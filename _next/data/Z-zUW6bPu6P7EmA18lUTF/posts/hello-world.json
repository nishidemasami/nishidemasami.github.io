{"pageProps":{"title":"はじめまして","description":"はじめての投稿です。","date":"2016-07-01T04:58:43+0900","modified_date":null,"image":null,"content":"<p>はじめての投稿です。\r\nこれから、なにか有益なことや無益なことを書いてゆこうと思います。\r\nよろしくお願いします。</p>","recents":[{"slug":"posts/google-colab-github","date":"2022-12-04T05:58:43+0900","draft":false,"title":"Google ColaboratoryでGitHubのファイルを開く","description":"Google ColaboratoryでGitHubのファイルを開く","content":"\r\nGoogle ColaboratoryでGitHubのファイルを開いてみたいと思って書いてみました。\r\n\r\nと言っても簡単で、GitHubでパブリックのリポジトリにファイルをコミットするだけです。\r\n\r\n<https://github.com/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこのようなパスにコミットしたとしたら、\r\n\r\n<https://colab.research.google.com/github/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこうやってGoogle Colaboratoryで開くことができます。\r\n\r\n簡単！\r\n","tags":null,"category":"blog"},{"slug":"posts/nextjs-latex","date":"2022-12-04T04:58:43+0900","draft":false,"title":"Next.jsで数式を書く","description":"Next.jsで数式を書く","content":"\r\nNext.jsで数式を書いてみたいと思って書いてみました。\r\n$\\LaTeX$をウェブブラウザで表示するためのライブラリである$\\KaTeX$をNext.jsで使ってみたいと思います。\r\n\r\nJavaScriptで動的にブラウザ上で数式を描画するのがよく見る$\\KaTeX$の使い方ですが、Next.jsでSSGする時にはビルド時に既に数式が描画されているという挙動になるので少し仕組みが違います。\r\n\r\nまず、必要なパッケージをインストールします。\r\n\r\n```bash\r\nnpm install remark-math rehype-katex\r\n```\r\n\r\nこのウェブサイトではMarkdownを読み込むのに _unified_ を使用しているので、 _remark-math_ と _rehype-katex_ を追加で _use_ します。\r\n\r\n```typescript\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkRehype, { allowDangerousHtml: true })\r\n      .use(rehypePrism)\r\n      .use(rehypeKatex)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString();\r\n```\r\n\r\nあとは$\\KaTeX$のCSSをCDNなどから読み込めば完成です。\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css\" crossOrigin=\"anonymous\" />\r\n```\r\n\r\nでは、実際に書いてみることにします。  \r\nまずは任意の$x$と$y$の最大公約数を求める$gcd$関数の定義です。\r\n\r\n```latex\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y)&(\\text{otherwize})\r\n\\end{cases}\r\n```\r\n\r\n$$\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y) & (\\text{otherwize})\r\n\\end{cases}\r\n$$\r\n\r\nいい感じですね！\r\n\r\n2次方程式の解の公式も書いてみます。\r\n\r\n```latex\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n```\r\n\r\n$$\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n$$\r\n\r\n学生時代を思い出す公式も上手に書けました。\r\n","tags":null,"category":"blog"},{"slug":"posts/check_github_repository_size copy","date":"2022-12-02T23:02:43+0900","draft":false,"title":"ED25519の鍵を生成する","description":"ED25519の鍵を生成する","content":"\r\nもう1年以上前にAWSでED25519の鍵が使えるようになっていた。  \r\n当然のようにGitHubでも使える。  \r\nどんどんED25519を使えない環境もかなり減ってきていて、ED25519の鍵を作る機会も増えてきた。\r\n\r\nなのに、ED25519の鍵の作り方をいつもググって調べるので自分用にメモ。\r\n\r\n`ssh-keygen -t ed25519`  \r\nで作成できる。  \r\n\r\n```bash\r\n$ ssh -V\r\nOpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022\r\n$ ssh-keygen -t ed25519\r\nGenerating public/private ed25519 key pair.\r\nEnter file in which to save the key (/home/nishidemasami/.ssh/id_ed25519):\r\nEnter passphrase (empty for no passphrase):\r\nEnter same passphrase again:\r\nYour identification has been saved in /home/nishidemasami/.ssh/id_ed25519\r\nYour public key has been saved in /home/nishidemasami/.ssh/id_ed25519.pub\r\nThe key fingerprint is:\r\nSHA256:mObF7QvcCUg1/JQb9aF6hc2R6GCuu7UpYipZ03J6Xtw nishidemasami@desktop-nishidemasami\r\nThe key's randomart image is:\r\n+--[ED25519 256]--+\r\n|       .o  o..o. |\r\n|       ...* .*.o |\r\n|      .  = =o =  |\r\n|     . = .+...   |\r\n|     .= S.o .    |\r\n|    +oo+.= o     |\r\n|   o =. =.E      |\r\n|  o . +.oo +     |\r\n|   ..=...o+      |\r\n+----[SHA256]-----+\r\n```\r\n\r\n参考\r\n<https://aws.amazon.com/jp/about-aws/whats-new/2021/08/amazon-ec2-customers-ed25519-keys-authentication/>","tags":["SSH","AWS"],"category":"blog"},{"slug":"posts/check_github_repository_size","date":"2022-12-01T23:02:43+0900","draft":false,"title":"GitHubのレポジトリサイズを確認する","description":"GitHubのレポジトリサイズを確認する","content":"\r\nリポジトリのサイズがいつも気になるので自分用にメモ。\r\n\r\n`https://api.github.com/repos/アカウント名/リポジトリ名`  \r\nにアクセスするとjsonで詳細が取得できる。  \r\nその`size`にKB単位でサイズが入っている。\r\n\r\nたとえば`github.com:nishidemasami/nishidemasami.github.io.git`の場合、  \r\n<https://api.github.com/repos/nishidemasami/nishidemasami.github.io>  \r\nこのURLで取得できる。\r\n","tags":["GitHub"],"category":"blog"},{"slug":"posts/css-svg-rotate-text","date":"2021-03-17T01:04:03+0900","draft":false,"title":"SVGで文字をクルクル回す","description":"SVGで文字をクルクル回す","content":"\r\nSVGとCSSだけで文字をクルクル回したかったので自分用にメモ。\r\n\r\n<svg style=\"animation: spin 5s linear infinite; width:100%\" viewBox=\"0 0 100 100\">\r\n    <defs>\r\n        <path id=\"Circle\"\r\n                d=\"M 25, 50\r\n            a 25,25 0 1,1 50,0\r\n            a 25,25 0 1,1 -50,0\" />\r\n    </defs>\r\n    <text>\r\n        <textPath href=\"#Circle\">文字がクルクル回ります。</textPath>\r\n    </text>\r\n</svg>\r\n\r\n```html\r\n<svg style=\"animation: spin 5s linear infinite\" viewBox=\"0 0 100 100\" style=\"width:100%\">\r\n    <defs>\r\n        <path id=\"Circle\"\r\n                d=\"M 25, 50\r\n            a 25,25 0 1,1 50,0\r\n            a 25,25 0 1,1 -50,0\" />\r\n    </defs>\r\n    <text>\r\n        <textPath href=\"#Circle\">文字がクルクル回ります。</textPath>\r\n    </text>\r\n</svg>\r\n```\r\n\r\nSVGは大きさ50*50の円とその周囲を沿うようにテキストを記述しています。SVGのスタイルにはクルクル回るCSSを書いてます。  \r\nこれだけでクルクル回ったので楽しかったです。\r\n","tags":["CSS","SVG"],"category":"blog"},{"slug":"articles/react-sound-test","date":"2021-03-14T01:04:03+0900","draft":false,"title":"Reactでホワイトノイズを鳴らす","description":"↓ React + TypeScript でホワイトノイズを鳴らしてみました ※音が鳴ります！パソコンで音を鳴らすのはかんたんなんですけどスマホはガードが固いらしくて、ユーザのなんらかの動作をトリガーとして再生しないと再生されないみたいです。なので今回は useCallback で宣言して onClick から呼びました。…","content":"*/\n\nimport React from 'react';\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\n\nimport { ReactAudioTest } from '../../components/ReactAudioTest';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst ReactEmbedGist = dynamic(() => import('../../utils/CodeBlock'), {\n\tloading: () => <p>loading...</p>,\n\tssr: false,\n});\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Reactでホワイトノイズを鳴らす\"\n\t\t\t\tdescription=\"React + TypeScript でホワイトノイズを鳴らしてみました\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"text-center font-bold text-3xl text-gray-900\">\n\t\t\tReactでホワイトノイズを鳴らす\n\t\t</h1>\n\t\t<div className=\"text-center text-sm mb-8\">\n\t\t\t{format(new Date('2021-03-14T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t↓ React + TypeScript でホワイトノイズを鳴らしてみました\n\t\t\t\t\t※音が鳴ります！\n\t\t\t\t</p>\n\t\t\t\t<ReactAudioTest />\n\t\t\t\t<p>\n\t\t\t\t\tパソコンで音を鳴らすのはかんたんなんですけどスマホはガードが固いらしくて、ユーザのなんらかの動作をトリガーとして再生しないと再生されないみたいです。\n\t\t\t\t</p>\n\t\t\t\t<p>なので今回は useCallback で宣言して onClick から呼びました。</p>\n\t\t\t\t<p>↓ これが今回のコードです</p>\n\t\t\t\t<ReactEmbedGist gist=\"nishidemasami/133b02b3a02869dea1a2d7d3e15ce3b6\" />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React"],"category":"blog"},{"slug":"articles/blog-remake-with-gatsby","date":"2021-03-06T18:04:03+0900","draft":false,"title":"Gatsbyでブログをリニューアルしてみました","description":"このブログをリニューアルしてみました。このブログのソースはここ ↓ で公開しています。https://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby見てみた感じどうですか？すごくないですか！？…","content":"*/\n\nimport React from 'react';\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\n\nimport ReactHelloWorld from '../../components/ReactHelloWorld/ReactHelloWorld';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\n\ntype AboutProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst About = (props: AboutProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Gatsbyでブログをリニューアルしてみました\"\n\t\t\t\tdescription=\"Gatsbyでブログをリニューアルしてみました\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"text-center font-bold text-3xl text-gray-900\">\n\t\t\tGatsbyでブログをリニューアルしてみました\n\t\t</h1>\n\t\t<div className=\"text-center text-sm mb-8\">\n\t\t\t{format(new Date('2021-03-06T18:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tこのブログをリニューアルしてみました。\n\t\t\t\t\tちなみにこのブログのソースはここ ↓ で公開しています。\n\t\t\t\t\t<a href=\"https://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby\">\n\t\t\t\t\t\thttps://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t\t<p>作ってみた感じ、すごくいいと思います！</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>React が動いている・生で React が書ける</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tページ間の遷移の速度が速い(React の仮想 DOM 操作に由来している)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tちょっとがんばれば Typescript でも書ける(使用する Gatsby\n\t\t\t\t\t\tのテンプレートによっては最初から Typescript を使っているらしい)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tGatsby が静的にページを作ってくれているので Javascript\n\t\t\t\t\t\tをオフにしてても見れる\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ReactHelloWorld>\n\t\t\t\t\tこんな感じで普通にReact が<br />\n\t\t\t\t\tTypescript で書けて動きます！✨\n\t\t\t\t</ReactHelloWorld>\n\t\t\t\t<p>\n\t\t\t\t\tGatsby は、HEXO や Hugo、Jekyll\n\t\t\t\t\tみたいに静的ジェネレータなので、こうやって Github Pages\n\t\t\t\t\tにも乗せられるので便利！ AWS S3 とかに乗せればスケールしますし！✨\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tあと、ページを高速化するための細かなテクニックを最初から使ってくれています。\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>静的プレレンダリング・静的プリフェッチ(速い)</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tいわゆる PRPL パターンに準拠する PWA サポート\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Push </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tcritical resources for the initial URL route using\n\t\t\t\t\t\t<code>&lt;link preload&gt;</code> and HTTP/2.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Render </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tinitial route.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Pre-cache </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tremaining routes.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Lazy-load </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tand create remaining routes on demand.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<a href=\"https://www.gatsbyjs.com/docs/prpl-pattern/\">\n\t\t\t\t\t\t\thttps://www.gatsbyjs.com/docs/prpl-pattern/\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tGraphQL(ビルド時には json\n\t\t\t\t\t\tになっている)によるデータアクセスや画面遷移(これまた速い)\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<p>\n\t\t\t\t\tGatsby で Markdown ファイルとかいい感じにしてくれますし、普通に React\n\t\t\t\t\tの仮想 DOM による高速化の恩恵も受けることできてます！\n\t\t\t\t\tかなりいい感じになってると思います！✨\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<AboutProps> = async () => ({\n\tprops: {\n\t\trecents: getRecentPosts(['title', 'date', 'slug']),\n\t\ttags: getTags(),\n\t\t...getPrevNextPost(__filename),\n\t},\n});\n\nexport default About;\n","tags":["JavaScript","TypeScript","React","Gatsby"],"category":"blog"},{"slug":"posts/network-specialist-examination","date":"2016-12-18T18:04:03+0900","draft":false,"title":"ネットワークスペシャリスト合格体験記","description":"念願のネットワークスペシャリストに合格しました！本当に念願で、というのも情報セキュリティスペシャリスト合格から今回で丸 2 年経っていて、今回合格できなければ午前 I 免除が終わってしまうところだったんです。…","content":"\r\n念願のネットワークスペシャリストに合格しました！\r\n本当に念願で、というのも情報セキュリティスペシャリスト合格から今回で丸 2 年経っていて、今回合格できなければ午前 I 免除が終わってしまうところだったんです。\r\n\r\nこちらが成績です。\r\n\r\n![ネットワークスペシャリスト成績](https://lh3.googleusercontent.com/pw/ACtC-3cJJG24p8M5wNBDBcGb4Bmc0njr2p2GzTuXB3z_7vwnC0FyW8ChvDTKkOH5SFB1fqS6jiFCkysXD53sSs5OOZ_67KRgHwIJ-vH_Pg6XSFM2JSZmDplgXH-WgtqPZRQ9qG9D7g59rYN7efbAoiJILXnnmA=w563-h351-no?authuser=0)\r\n60 点が合格ラインなので、ゆとりを持った合格となりました！\r\n\r\n2 年前の情報セキュリティスペシャリストの時は午前 I 免除、午前 II が 84 点、午後 I が 71 点、午後 II が 62 点と午後 II がギリギリでした。\r\nしかし今回は、午前 I が同じく免除で、午前 II が 72 点、午後 I が 70 点、午後 II が 72 点でした。いずれも 7 割超です！\r\nでは今回のネットワークスペシャリストが余裕だったかと言うとそうではなく、今回も非常に厳しい戦いとなりました。\r\n\r\n今後ネットワークスペシャリストに挑戦するみなさんの助けになるよう、自分の今回の勉強法を書いていきたいと思います。\r\n\r\n### 良い教本に出会う\r\n\r\n僕はネットワークスペシャリストに合格するのに 2 年かかりました。\r\n長い間お付き合いする本ですから、教本選びは大切です。\r\n僕は、定番のポケットスタディで勉強しました。「ポケットスタディ ネットワークスペシャリスト」で検索すれば出てくると思います。\r\nコンパクトなのでいつでも持ち歩けますし、外出先でも気軽に読めて便利です。\r\nポケットスタディだけで基礎を完璧にはできないかもしれませんが、必要知識のリストアップとして効果的です。\r\n不足知識や理解しきれない部分はネットで調べました。\r\nネットとポケットスタディで、常に勉強ができる状態を維持するところがポイントです。\r\n\r\nまた、過去問の解答の解説にはネスペの剣なども読みました。\r\n問題・解答は無料で公式サイトからダウンロードできますが、解説は別に必要です。\r\nただ、解説本に手を出すのもおそらく基礎を身に付けてからの話だと思います。\r\nそれに、基礎を身につける間にネットでわからないところを検索していると、いつの間にか解説なしでも問題を読めるようになっているものです。\r\nちなみに僕は BGP や OSPF などがピンと来ないのでそこらへんは本に頼りました。\r\n\r\nそれから、これまた定番の「3 Minutes Networking([http://www5e.biglobe.ne.jp/aji/3min/](http://www5e.biglobe.ne.jp/aji/3min/))」もオススメです。\r\nネットワーク技術をある程度体系的にまとめて教えてくれる貴重なサイトです。しかも 1 講座 3 分で読めるのだそうです(※読めません！)。\r\nぜひ読破に挑戦してみましょう！\r\n\r\n### 新しい技術を学ぶ\r\n\r\nデータベーススペシャリストは、新しい技術はあまり出てきません。出てきて NoSQL くらいです。データベーススペシャリストは話のわかるヤツです。\r\nけどネットワークスペシャリストはそんなの気にしません。\r\n今回、午後 II では STUN や WebRTC が問題に登場しました。\r\nWebSocket や、過去には OpenFlow も出ています。\r\n2013 年なんて午後 II の問 2 が丸々 OpenFlow だったので、OpenFlow をノーチェックだった人は問 1 しか選択肢が無く非常に不利な戦いとなったはずです。\r\n今こうしている間にも新しい技術はどんどん出現していますので、後学のためにも話題の新技術は怯まずぜひチェックしてゆきましょう。\r\n\r\n### 確実に基礎を固める\r\n\r\n上に書いたことと関連するのですが、新技術を学ぶことは、当然基礎を固めることから始まります。\r\n新技術もおおむね基礎の上に成り立っています。既存の技術をパッケージした AJAX のような例もありますし、また問題によっては、わからない技術がちょこっとあったとしても基礎ができていれば解ける問題もあります。\r\nネットワークスペシャリスト試験はネットワーク技術に絞った試験…と言われる範囲は狭いと思われがちですが、実際の所、ネットワーク技術がクライアントからサーバ、バックボーン、セキュリティまでも出るので範囲は広いです。ホントに途方もない範囲です。\r\nしかし、だいたいのネットワークは TCP/IP の上で動いているので TCP/IP さえ理解すれば問題文から解ける時もあります。\r\n試験問題は意外にも親切丁寧に書かれていたりします。基礎を固めておくだけで、チャンスはぐっと広がります。\r\n例えば今回受験した平成 28 年度から以下の問題です。\r\n\r\n> 迷惑メールの送信を防止する対策として、OP25B(Outbound Port 25\r\n> Blocking)のポリシでメールシステムを運用している。具体的には、自社が動的に割り当てた\r\n> IP\r\n> アドレスのホストから、自社のサービスネットワーク外のホストへの宛先ポート番号\r\n> 25 の SMTP 通信を許可しないという運用上のルールを適用している。 (中略)B\r\n> 社の PC から A 社のメールサーバへ SMTP\r\n> によるメール送信ができたとしても、そのメールサーバは A\r\n> 社のドメイン以外への宛先へはメールを転送しない設定となっている。\r\n> この設定がないことによって生じる情報セキュリティ上のリスクを、25\r\n> 字以内で答えよ (※平成 28 年度 ネットワークスペシャリスト試験午後 I\r\n> 試験問題より引用・要約)\r\n\r\nこれは「第三者中継」に関する問題です。今時当たり前すぎて見逃しがちな「第三者中継」、だからなのか随分親切な問題文です。\r\n「第三者中継」という概念を知らなくとも、これだけ丁寧に説明されていれば、基礎をわかっていれば答えられるはずです。\r\n※もちろんこれは問題文から必要な箇所だけ抜きだしたものなので簡単そうに見えますが実際は何ページもある問題文からヒントを見つけなければいけません！\r\n\r\nちなみに解答は以下の通りです。\r\n\r\n> 不正メールの踏み台にされてしまうリスク (※平成 28 年度\r\n> ネットワークスペシャリスト試験午後 I 試験解答例より引用)\r\n\r\nこのように、基礎さえわかっていれば自力で解ける問題もあります。\r\nそれに基礎は実務では必須です。ぜひ幅広く身につけましょう。\r\niptables でルータを作ってみたり、Wireshark などで通信を覗いてみたりすると楽しいくて勉強にもなるのでおすすめです！\r\n\r\n### 過去問の解答例を学ぶ\r\n\r\n記述式の問題にはしばしば、なんて答えればいいか悩む問題があります。例えば同じく平成 28 年度から以下の問題です。\r\n\r\n> ロードバランサは、通信の行きと戻りを同じ ISP\r\n> 経由にするが、通信の行きと戻りが同じ ISP でない場合の問題を、社外から Web\r\n> サーバへのアクセスを例に、IP アドレスという用語を用いて 40\r\n> 文字以内で述べよ。 (※平成 28 年度 ネットワークスペシャリスト試験午後 II\r\n> 試験問題より引用・要約)\r\n\r\nさて、困りました。こんなこと聞かれては。\r\n通信の行きと戻りで違う ISP でを使うと言われても、そんなことすればブラウザからホームページへアクセスしても、問い合わせしたところと全然違うところからレスポンスが横殴りで返ってくるわけです。\r\nESTABLISHED してないんですから、今時 NAPT やファイアーウォールでガチガチに守られている我々のブラウザには、戻りの通信は届きすらしなさそうです。\r\nなんと答えればいいでしょうか？\r\n「戻りの IP アドレスの通信がファイアーウォールで弾かれてしまう」でしょうか？\r\nそもそも「戻りの通信の IP アドレスが ESTABLISHED していない」でしょうか？\r\n\r\n解答を見てみましょう。\r\n\r\n> 応答が行きの宛先 IP アドレスとは異なる送信元 IP アドレスから戻る。 (※平成\r\n> 28 年度 ネットワークスペシャリスト試験午後 II 試験解答例より引用)\r\n\r\n根本的！\r\nそうなんです。解答に困ったら「で、実際のところなにが言いたいの？」というところを突き詰めてゆくと、自ずとシンプルな答えが出てくるはずです。\r\nこの問題は TCP/IP の知識があれば答えられますが、後半の問題は STUN も絡んできます。STUN ですよ！ワクワクしますよね？\r\nですがワクワクするからといって、例えば変に Skype 黎明期の苦労話などを知っていると「そもそも NAT 超えというのは〜〜」などと長々と講釈を書いてしまいそうになりますが、\r\nそれは心の中にそっと閉まっておくのが試験合格のため（そして普段の円滑な業務遂行のため）の秘訣です。\r\n◯◯ 文字以内という解答に求められているレベル感を掴むためにも、過去問はぜひ 1 度解いてみましょう。なんていったって過去問は公式サイトからダウンロード無料です。\r\n\r\n### 心を強く持つ\r\n\r\n最後になりましたが！\r\n諦めてはそこで試験終了です！\r\n僕は過去に何度も試験中諦めそうになった問題を気合で解いてきました！そしてそのうち半分くらいは合格してました！\r\n心を強く持って、挫けずにトライすることが大切です！\r\nがんばりましょう！僕もがんばります！次は春はデータベーススペシャリスト、秋はシステムアーキテクトかもしくは IT ストラテジストを受ける予定です！\r\n\r\nネットワークスペシャリストに合格したという話でした！\r\n","tags":["情報処理技術者試験","ネットワークスペシャリスト"],"category":"blog"},{"slug":"posts/hexo-themes-error","date":"2016-12-11T23:04:03+0900","draft":false,"title":"hexoのテーマを変更した時に、テーマだけデプロイされない","description":"このブログはHexoにて構築し、GitHub Pagesにて公開しています。先日、テーマを変更した際にテーマが正しく反映されず困ったので、今どうやって動いているかを覚え書きしておきます。…","content":"\r\nこのブログは[Hexo](https://hexo.io/)にて構築し、[GitHub Pages](https://pages.github.com/)にて公開しています。\r\n\r\n先日、テーマを変更した際にテーマが正しく反映されず困ったので、今どうやって動いているかを覚え書きしておきます。\r\n\r\n今回、ingenuous というテーマを利用したのですが、「hexo server」では正しく表示されるのに、確認後「hexo deploy -g」で GitHub Pages へデプロイするとレイアウトが崩れるという現象に見舞われました。\r\n\r\n```bash\r\n$ tree -L 2\r\n.\r\n├── _config.yml\r\n├── node_modules\r\n│   └── (省略)\r\n├── package.json\r\n├── public\r\n│   ├── 2016\r\n│   ├── about-me\r\n│   ├── archives\r\n│   ├── atom.xml\r\n│   ├── css\r\n│   ├── fancybox\r\n│   ├── index.html\r\n│   ├── js\r\n│   └── tags\r\n├── scaffolds\r\n│   └── (省略)\r\n├── source\r\n│   └── _posts\r\n└── themes\r\n    ├── ingenuous\r\n    └── landscape\r\n```\r\n\r\nこの、css らへんがブラウザから取得できておらず、どうやら記事ファイルだけ書き換わってデプロイされ、css はデプロイされず放置されている現象が置きてるっぽかったです。\r\nhexo deploy が public 内の更新を取得できていないのなら、全部消してしまえばいいじゃないということで、\r\n\r\n```bash\r\nhexo clean\r\nhexo deploy -g\r\n```\r\n\r\nで無事にレイアウトも含めてデプロイすることができました。\r\nちょっとネットで検索しても出てこなかったのでみなさまの助けになればという意味も含め覚え書きでした。\r\n","tags":["hexo"],"category":"blog"},{"slug":"posts/vim-crypt","date":"2016-12-04T09:04:03+0900","draft":false,"title":"Vimで暗号化","description":"Vim で暗号化を行うには、次の方法が用意されています。:set cryptmethod=blowfishこの blowfish の他に zip や、環境によっては blowfish2 が用意されています。使えるならばセキュリティの面から考えて blowfish2 を使うべきでしょう。…","content":"\r\nVim で暗号化を行うには、次の方法が用意されています。\r\n\r\n```vim\r\n:set cryptmethod=blowfish\r\n```\r\n\r\nこの blowfish の他に zip や、環境によっては blowfish2 が用意されています。使えるならばセキュリティの面から考えて blowfish2 を使うべきでしょう。\r\nしかしです。本当にセキュリティの面から考えると、blowfish の発展型である Twofish[※注：blowfish2 は Twofish ではありません](http://vim.1045645.n5.nabble.com/Blowfish2-td5726043.html)や AES 等の方がより良い選択肢なはずです。\r\n今回、Vim の暗号化機能に頼らず、自前で openssl を用いて AES にて暗号化・復号をしてみたいと思います。\r\n\r\n通常 vim で文章を保存するのには\r\n\r\n```vim\r\n:w\r\n```\r\n\r\nを行いますが、出力先を標準入力としてコマンドを実行することもできます。\r\nすなわち、openssl へ以下のように渡せば良いわけです。\r\n\r\n```vim\r\n:w !openssl aes-256-cbc -out ~/vim_enc_test_file\r\n```\r\n\r\n2 回パスワードを聞かれるため、それを入力すれば指定した場所(この場合は~/vim_enc_test_file)へ書き込まれます。\r\n\r\n復号する際は、Vim から\r\n\r\n```vim\r\n:r !openssl aes-256-cbc -d -in ~/vim_enc_test_file\r\n```\r\n\r\nとするか、もしくはコマンドラインから\r\n\r\n```bash\r\n$ cat ~/vim_enc_test_file | openssl aes-256-cbc -d | vim -\r\n```\r\n\r\nとします。\r\n\r\nただ、非常にイケてないことにこの書き込まれたファイルを text して見てみると、\r\n\r\n```text\r\n00000000  53 61 6c 74 65 64 5f 5f  04 12 0d 0c 9e e8 74 aa  |Salted__......t.|\r\n00000010  f6 60 00 e7 d1 60 7b 64  19 23 a5 ad 7f 4d 62 19  |.`...`{d.#...Mb.|\r\n\r\n```\r\n\r\nこのように、ファイルの頭に「Salted\\_\\_」の文字列が入るため、openssl にて暗号化したことはわかる人にはバレバレです。\r\nもっとも、Vim の暗号化機能でも以下のように、\r\n\r\n```text\r\n00000000  56 69 6d 43 72 79 70 74  7e 30 32 21 de 8b b9 db  |VimCrypt~02!....|\r\n00000010  03 c7 6b 23 86 e1 25 79  e7 ee 6c 5e 27 9d eb 58  |..k#..%y..l^'..X|\r\n00000020  f8                                                |.|\r\n```\r\n\r\n「VimCrypt~02!」という文字列が入るのでバレバレなのですが。\r\n\r\nこのバレバレなのをどうにかしたい時も、openssl でやる場合は簡単です。\r\n以下のように dd で 8 バイトスキップすれば「Salted\\_\\_」の文字列を消すことができます。\r\n\r\n```vim\r\n:w !openssl aes-256-cbc | dd ibs=8 skip=1 of=~/vim_enc_test_file\r\n```\r\n\r\nそうすると、以下のようなファイルが出力されます。\r\n\r\n```text\r\n00000000  92 3a 22 ce 3e 26 5a cf  26 6c da e5 3c ec e9 c6  |.:\".>&Z.&l..<...|\r\n00000010  ad 3b c1 47 13 d6 e9 d2                           |.;.G....|\r\n```\r\n\r\n当然、一見ランダムですから、ただの乱数ファイルにも見えますし、たとえ暗号化されたファイルだとわかったとしてもいったいなんのソフトで暗号化されたのかもわかりません。\r\n\r\n読み込みは以下のように行います。\r\n\r\n```vim\r\n:r !cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-cbc -d\r\n```\r\n\r\n```bash\r\n$ cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-cbc -d | vim -\r\n```\r\n\r\nちなみに圧縮もしてみましょう。書き込みは以下の通りです。\r\n\r\n```vim\r\n:w !bzip2 | openssl aes-256-cbc | dd ibs=8 skip=1 of=~/vim_enc_test_file\r\n```\r\n\r\n読み込みは以下の通りです。\r\n\r\n```vim\r\n:r !cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-cbc -d | bzcat\r\n```\r\n\r\n```bash\r\n$ cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-cbc -d | bzcat | vim -\r\n```\r\n\r\nさて、最後にあとひと押しです。\r\n「aes-256-cbc」はパスワードが間違っている場合にエラーを出します。CentOS6.8 の場合は以下のエラーとなります。\r\n\r\n```text\r\ndigital envelope routines:EVP_DecryptFinal_ex:wrong final block length\r\n```\r\n\r\nこれは、総当りで復号化を試みるクラッカーにとっては助けにもなってしまいます。なぜなら、パスワードが間違っていることがわかるためです。\r\nMac 等では使えませんが、「aes-256-cbc」の代わりに「aes-256-ofb」を使うことで解決されます。\r\n「aes-256-ofb」なら、パスワードが合っているのか間違っているのすらわかりません。\r\n書き込みは以下の通りです。\r\n\r\n```vim\r\n:w !bzip2 | openssl aes-256-ofb | dd ibs=8 skip=1 of=~/vim_enc_test_file\r\n```\r\n\r\n読み込みは以下の通りです。\r\n\r\n```vim\r\n:r !cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-ofb -d | bzcat\r\n```\r\n\r\n```bash\r\n$ cat <(echo -ne Salted__) ~/vim_enc_test_file | openssl aes-256-ofb -d | bzcat | vim -\r\n```\r\n\r\nパスワードが合っているのか間違っているのすらわからないというのは、つまりあなたのパスワードを突破しようとしても、パスワード 1 つ 1 つを確認しなければならないということです。\r\n人間には不可能ですし、機械的に判定しようにも非常に手をこまねくはずです。\r\n環境が許せばぜひやってみて下さい。\r\n\r\nVim と openssl で暗号化・復号をしようというお話でした。\r\nみなさんもぜひやってみて下さい。\r\n","tags":["Vim","OpenSSL"],"category":"blog"}],"tags":null,"prevPost":{"slug":"posts/java-combination","date":"2016-11-26T09:04:03+0900","draft":false,"title":"JAVAで組み合わせ","description":"Ruby では組み合わせを作成することができるArray#combinationが用意されています。これを使えば、例えば下記のように…","content":"\r\nRuby では組み合わせを作成することができる[Array#combination](https://docs.ruby-lang.org/ja/latest/method/Array/i/combination.html)が用意されています。  \r\nこれを使えば、例えば下記のように\r\n\r\n```ruby\r\nrequire 'json'\r\n\r\njsonstr = <<JSON\r\n[\r\n  {\r\n    \"price\": 432,\r\n    \"name\": \"hoge\"\r\n  },\r\n  {\r\n    \"price\": 531,\r\n    \"name\": \"fuga\"\r\n  },\r\n  {\r\n    \"price\": 568,\r\n    \"name\": \"piyo\"\r\n  }\r\n]\r\nJSON\r\n\r\np JSON.load(jsonstr)\r\n    .combination(2)\r\n    .to_a\r\n    .select(&->x{x.reduce(&->x,y{x[\"price\"] + y[\"price\"]}) == 1000})\r\n```\r\n\r\nこうすれば、JSON の商品リストから price の合計が 1000 になるもの(hoge と piyo)を抜き出してくれます。\r\n\r\n```ruby\r\n[[{\"price\"=>432, \"name\"=>\"hoge\"}, {\"price\"=>568, \"name\"=>\"piyo\"}]]\r\n```\r\n\r\n非常にイージー。\r\n\r\nところが、combination は Java には無いんですよね。  \r\nこれを Java で書きたい時、どうすればいいのか悩みました。  \r\n今回は再帰的なやりかたでやってみました。\r\n\r\n```java\r\n * 組み合わせを返す\r\n *\r\n * @param parameter 組み合わせを作成するリスト\r\n * @param combinationCount 組み合わせの個数\r\n * @return 組み合わせのリスト\r\n */\r\nprivate static final <E> List<List<E>> combination(\r\n  final List<E> parameter,\r\n  final long combinationCount) {\r\n\r\n  final int parameterSize = parameter.size();\r\n\r\n  if (parameterSize < combinationCount) {\r\n    throw new IllegalArgumentException(\"リストの要素数が組み合わせ個数より少ないです。\");\r\n  } else if (combinationCount <= 0) {\r\n    throw new IllegalArgumentException(\"組み合わせ個数が不正です。\");\r\n  } else if (combinationCount == 1) {\r\n    List<List<E>> result = new LinkedList<List<E>>();\r\n    parameter.forEach(x -> {\r\n      List<E> resultWork = new LinkedList<E>();\r\n      resultWork.add(x);\r\n      result.add(resultWork);\r\n    });\r\n    return result;\r\n  } else {\r\n    List<List<E>> result = new LinkedList<List<E>>();\r\n    for (int i = 0; i < parameterSize - combinationCount + 1; i++) {\r\n      List<List<E>> resultWork = combination(\r\n        parameter.subList(1 + i, parameterSize),\r\n        combinationCount - 1);\r\n      for (List<E> resultWorkForEach : resultWork) {\r\n        resultWorkForEach.add(0, parameter.get(i));\r\n      }\r\n      result.addAll(resultWork);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n```\r\n\r\nLinkedList を使っているのは先頭追加があるためです。  \r\nちょっと見た目がヘビーですが、使えます。  \r\nこんな感じです。\r\n\r\n```java\r\nclass Item {\r\n  public Item(int price, String name){\r\n    this.price = price;\r\n    this.name = name;\r\n  }\r\n  int price;\r\n  String name;\r\n\r\n  @Override\r\n  public String toString() {\r\n    return name + \":\" + price + \"円\";\r\n  }\r\n}\r\n\r\nclass Main {\r\n  public static void main(String[] args) {\r\n    List<Item> itemList = Arrays.asList(new Item[]{\r\n      new Item(432, \"hoge\"),\r\n      new Item(531, \"fuga\"),\r\n      new Item(568, \"piyo\"),\r\n      new Item(999, \"meta\")\r\n    });\r\n\r\n    combination(itemList,3)\r\n      .stream()\r\n      .forEach(x->{System.out.println(Arrays.toString(x.toArray()));});\r\n  }\r\n}\r\n```\r\n\r\nこうなります。\r\n\r\n```json\r\n[hoge:432円, fuga:531円, piyo:568円]\r\n[hoge:432円, fuga:531円, meta:999円]\r\n[hoge:432円, piyo:568円, meta:999円]\r\n[fuga:531円, piyo:568円, meta:999円]\r\n```\r\n\r\nRuby の例題と同じようにこうすると、\r\n\r\n```java\r\ncombination(itemList,2)\r\n  .stream()\r\n  .filter(x-> x.stream().map(y -> y.price).reduce((y, z)-> y + z).get() == 1000)\r\n  .forEach(x->{System.out.println(Arrays.toString(x.toArray()));});\r\n```\r\n\r\nこうなります。\r\n\r\n```json\r\n[hoge:432円, piyo:568円]\r\n```\r\n\r\njava8 の stream なのに遅延評価が役に立たないのは、Ruby も combination を[Enumerator::Lazy](https://docs.ruby-lang.org/ja/latest/class/Enumerator=3a=3aLazy.html)で使えないのと一緒ですね。  \r\njava8 は遅延評価がデフォルトとなっているので、気軽に limit(1)などで一瞬で返ってくるつもりでいたら combination 部分が延々返ってこない…なんてことが発生しないようになのかもしれません。\r\n\r\nRuby で使えた combination が無くて困った話でした。\r\n","tags":["Java","Ruby"],"category":"blog"},"nextPost":null,"mainTags":["SSH","AWS","GitHub","CSS","SVG","hexo","Java","Ruby","情報処理技術者試験","ネットワークスペシャリスト","Vim","OpenSSL","JavaScript","TypeScript","React","Gatsby","TypeScript","React"]},"__N_SSG":true}