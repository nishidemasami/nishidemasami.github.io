{"pageProps":{"recents":[{"slug":"posts/rust-fizzbuzz","date":"2022-12-31T04:58:43+0900","draft":false,"title":"RustでFizzBuzzを書く","description":"RustでFizzBuzzを書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\nRustでFizzBuzzを書いてみたいと思うこと、ありますよね。  \n僕はあるので自分用にメモです。\n\nなお、この記事を書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Rust-%E7%AC%AC2%E7%89%88-Jim-Blandy/dp/4873119782?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=16SB3SPXD9LVL&keywords=rust&qid=1672662058&sprefix=rust+%2Caps%2C261&sr=8-4&linkCode=ll1&tag=nishidemasami-22&linkId=5f2948f4e335959907e6a8b8e22b859d&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >プログラミングRust 第2版</a>を参考にしました。\n\nとりあえず最初に結論を書いておきます。\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n    Fizz,\n    Buzz,\n    FizzBuzz,\n    Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            FizzBuzz::Fizz => write!(f, \"Fizz\"),\n            FizzBuzz::Buzz => write!(f, \"Buzz\"),\n            FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n            FizzBuzz::Number(x) => write!(f, \"{}\", x),\n        }\n    }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n    T: From<u8>,\n    for<'a> &'a T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &T) -> FizzBuzz {\n        match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n```\n\n以上のようになると思います。\n\n以下、解説です。\n\nまず、愚直にFizzBuzzを書いたら以下のようになると思います。\n\n```rust\nfn main() {\n    (1..=15).for_each(|x| {\n        match ((x % 3) == 0, (x % 5) == 0) {\n            (true, true) => println!(\"FizzBuzz\"),\n            (true, _) => println!(\"Fizz\"),\n            (_, true) => println!(\"Buzz\"),\n            _ => println!(\"{}\", x),\n        }\n    })\n}\n```\n\nしかし、Rustを使用する以上、当然以下のようなメリットを享受したいです。\n\n* テスト可能\n* 型安全\n* ゼロコスト抽象化\n\nそのため、まずテスト可能なようにメソッドに分けてからテストを書きます。\n\n```rust\nfn fizzbuzz(x: u128) -> String {\n    match ((x % 3) == 0, (x % 5) == 0) {\n        (true, true) => \"FizzBuzz\".to_string(),\n        (true, _) => \"Fizz\".to_string(),\n        (_, true) => \"Buzz\".to_string(),\n        _ => x.to_string(),\n    }\n}\n\nfn main() {\n    (1..=15).map(fizzbuzz).for_each(|x| println!(\"{}\", x))\n}\n\n#[test]\nfn test() {\n    let test_target: Vec<String> = (1..=15)\n        .map(fizzbuzz)\n        .collect();\n\n    assert_eq!(\n        test_target,\n        vec![\n            \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n            \"14\", \"FizzBuzz\",\n        ]\n    );\n}\n```\n\n次はこれをRustらしく、`enum`に[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトと[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトを実装した書き方にします。  \n[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトの[`from()`](https://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from)メソッドを実装すれば[`std::convert::Into`](https://doc.rust-lang.org/std/convert/trait.Into.html)トレイトの[`into()`](https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into)メソッドが自動で実装され、[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトの[`fmt()`](https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt)メソッドを実装すれば[`std::string::ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html)トレイトの[`to_string()`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)メソッドが自動で実装されます。\n\n```rust\nuse std::fmt;\n\nenum FizzBuzz {\n    Fizz,\n    Buzz,\n    FizzBuzz,\n    Number(String),\n}\n\nimpl From<u32> for FizzBuzz {\n    fn from(x: u32) -> FizzBuzz {\n        match ((x % 3) == 0, (x % 5) == 0) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n\nimpl fmt::Display for FizzBuzz {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            FizzBuzz::Fizz => write!(f, \"Fizz\"),\n            FizzBuzz::Buzz => write!(f, \"Buzz\"),\n            FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n            FizzBuzz::Number(x) => write!(f, \"{}\", x),\n        }\n    }\n}\n\n// 以下はテスト用\n\nfn main() {\n    (1..=15).map(|x| -> FizzBuzz {\n        x.into()\n    } ).map(|x| -> String {\n        x.to_string()\n    } ).for_each(|x| println!(\"{}\", x))\n}\n\n#[test]\nfn test() {\n    let test_target: Vec<String> = (1..=15)\n        .map(|x| -> FizzBuzz {\n            x.into()\n        } )\n        .map(|x| -> String {\n            x.to_string()\n        } )\n        .collect();\n\n    assert_eq!(\n        test_target,\n        vec![\n            \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n            \"14\", \"FizzBuzz\",\n        ]\n    );\n}\n```\n\nここで、`u32`では`4294967295`が最大値なのは心もとないので拡張可能にしたいと考えると思います。  \n`u32`を`u128`にしたところで`340282366920938463463374607431768211455`が最大値です。  \nこれでは十分ではないので、もっと抽象的な数値を扱えるようにします。\n\nfizzbuzz関数$f(x)$を定義してみます。\n\n$\nf(x) =\n\\begin{cases}\n  \\text{FizzBuzz} & (x \\bmod 3 = 0 \\land x \\bmod 5 = 0)\\\\\n  \\text{Fizz} & (x \\bmod 3 = 0 \\land x \\bmod 5 \\neq 0)\\\\\n  \\text{Buzz} & (x \\bmod 3 \\neq 0 \\land x \\bmod 5 = 0)\\\\\n  x & (\\text{otherwize})\\\\\n\\end{cases}\n$\n\n冷静になって見てみると、$x$に対する操作は「3で割る」「5で割る」「割った結果を0と比較する」しかしていないことしかわかります。  \n型で表すと以下のようなものです。\n\n```rust\nT: Rem<T, Output = U> + From<u8>,\nU: Zero,\n```\n\nつまり、先述の`from`は以下のように書けるのです。\n\n```rust\nimpl<T, U> From<T> for FizzBuzz\nwhere\n    T: ToString + Rem<T, Output = U> + Clone + From<u8>,\n    U: Zero,\n{\n    fn from(x: T) -> FizzBuzz {\n        match ((x.clone() % T::from(3)).is_zero(), (x.clone() % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n```\n\nただ、`.clone()`を何度もするのは躊躇われますし、所有権も必要としておらず借用で十分なので借用にすると、以下のようになります。\n\n```rust\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n    T: From<u8>,\n    &'a T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &'a T) -> FizzBuzz {\n        match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n```\n\n<div class=\"note alert\">\n\n<i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i>もしここで以下のようにライフタイム`'a`の記述を書かないと…\n\n```rust example-bad\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n    T: From<u8>,\n    &T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &'a T) -> FizzBuzz {\n        match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0637]: `&` without an explicit lifetime name cannot be used here\n  --> src\\main.rs:42:5\n   |\n42 |     &T: Rem<T, Output = U> + ToString,\n   |     ^ explicit lifetime name needed here\n```\n\nつまり、`&`を使う必要があるならライフタイムを明示的に示さないといけないということです。\n\n</div>\n\nさらにシンプルに書くのなら、ライフタイム`'a`は高階トレイト境界を用いて以下のような書き方をすることができます。\n\n```rust\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n    T: From<u8>,\n    for<'a> &'a T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &T) -> FizzBuzz {\n        match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n```\n\nこの`T`は`num::BigUint`なども満たしているので、これで`u128`でも扱えないような大きな数字も以下のように扱うことができるようになりました。\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\nenum FizzBuzz {\n    Fizz,\n    Buzz,\n    FizzBuzz,\n    Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            FizzBuzz::Fizz => write!(f, \"Fizz\"),\n            FizzBuzz::Buzz => write!(f, \"Buzz\"),\n            FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n            FizzBuzz::Number(x) => write!(f, \"{}\", x),\n        }\n    }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n    T: From<u8>,\n    for<'a> &'a T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &T) -> FizzBuzz {\n        match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(x.to_string()),\n        }\n    }\n}\n\n// 以下はmain用・テスト用\n\nuse num::{BigUint, Num};\n\nfn main() {\n    num_iter::range_inclusive(\n        BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n        BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n    )\n    .map(|x: BigUint| -> String {\n        let fizzbuzz: FizzBuzz = (&x).into();\n        fizzbuzz.to_string()\n    })\n    .for_each(|x| println!(\"{}\", x));\n}\n\n#[test]\nfn test_bigint() {\n    let test_target: Vec<String> = num_iter::range_inclusive(\n        BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n        BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n    )\n    .map(|x| {\n        let buffer: FizzBuzz = (&x).into();\n        let buffer: String = buffer.to_string();\n        buffer.to_string()\n    })\n    .collect();\n\n    assert_eq!(\n        test_target,\n        vec![\n            \"340282366920938463463374607431768211471\",\n            \"340282366920938463463374607431768211472\",\n            \"Fizz\",\n            \"340282366920938463463374607431768211474\",\n            \"Buzz\",\n            \"Fizz\",\n            \"340282366920938463463374607431768211477\",\n            \"340282366920938463463374607431768211478\",\n            \"Fizz\",\n            \"Buzz\",\n            \"340282366920938463463374607431768211481\",\n            \"Fizz\",\n            \"340282366920938463463374607431768211483\",\n            \"340282366920938463463374607431768211484\",\n            \"FizzBuzz\",\n        ]\n    );\n}\n\n#[test]\nfn test() {\n    let test_target: Vec<String> = (1..=15)\n        .map(|x| {\n            let buffer: FizzBuzz = (&x).into();\n            let buffer: String = buffer.to_string();\n            buffer.to_string()\n        })\n        .collect();\n\n    assert_eq!(\n        test_target,\n        vec![\n            \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n            \"14\", \"FizzBuzz\",\n        ]\n    );\n}\n```\n\n<div class=\"note warn\">\n\n<i class=\"fontawesome fa fa-exclamation-circle\" style=\"color:#f7a535;font-size:20px;\" aria-hidden=\"true\"></i>もしここで「そうだ！FizzBuzzのenumにString型ではなくBox<dyn 'a + ToString>型で値を持たせれば、ゼロコスト抽象化の恩恵を得られてコンパイル時にさらに最適化されるのでは？」と思うかもしれませんが…\n\n```rust example-bad\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz<'a> {\n    Fizz,\n    Buzz,\n    FizzBuzz,\n    Number(Box<dyn 'a + ToString>),\n}\n\nimpl<'a> fmt::Display for FizzBuzz<'a> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            FizzBuzz::Fizz => write!(f, \"Fizz\"),\n            FizzBuzz::Buzz => write!(f, \"Buzz\"),\n            FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n            FizzBuzz::Number(x) => write!(f, \"{}\", x.to_string()),\n        }\n    }\n}\n\nimpl<'a, T, U> From<&'a T> for FizzBuzz<'a>\nwhere\n    T: 'a + From<u8>,\n    &'a T: Rem<T, Output = U> + ToString,\n    U: Zero,\n{\n    fn from(x: &'a T) -> FizzBuzz<'a> {\n        let three = T::from(3);\n        match ((x % three).is_zero(), (x % T::from(5)).is_zero()) {\n            (true, true) => FizzBuzz::FizzBuzz,\n            (true, _) => FizzBuzz::Fizz,\n            (_, true) => FizzBuzz::Buzz,\n            _ => FizzBuzz::Number(Box::new(x)),\n        }\n    }\n}\n```\n\nこれを以下のような利用をしようとすると…\n\n```rust example-bad\nfn main() {\n    (1..=15)\n        .map(|x| (&x).into())\n        .for_each(|x: FizzBuzz| println!(\"{}\", x));\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0515]: cannot return value referencing function parameter `x`\n --> src\\main.rs:7:18\n  |\n7 |         .map(|x| (&x).into())\n  |                  ----^^^^^^^\n  |                  |\n  |                  returns a value referencing data owned by the current function\n  |                  `x` is borrowed here\n```\n\nつまり、クロージャ外から出た後までライフタイムを必要とするような処理はできませんよ、ということです。  \nなので以下のようにすれば問題ありません。\n\n```rust\nfn main() {\n    (1..=15)\n        .for_each(|x| println!(\"{}\", Into::<FizzBuzz>::into(&x)));\n}\n```\n\nこのように、あまりに長いライフタイムを要求すると、後々取り扱いに苦労してしまうので、性能と汎用性を天秤にかけて判断するようにしましょう。\n\n</div>\n\nRustでFizzBuzzを実装してみましたという話でした。\n","tags":["Rust","FizzBuzz"],"category":"blog"},{"slug":"articles/typescript-bitcoin","date":"2022-12-24T01:04:03+0900","draft":false,"title":"Typescriptでビットコインアドレスを生成する","description":"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport React from 'react';\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\n\nimport { TypescriptBitcoin } from '../../components/TypescriptBitcoin';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `\nTypescriptでビットコインアドレスを生成したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%AA%E3%82%A2%E3%83%A0%E3%80%81DApp%E9%96%8B%E7%99%BA%E3%81%BE%E3%81%A7-Bikramaditya-Singhal/dp/4274225372?_encoding=UTF8&qid=1671896601&sr=8-1&linkCode=ll1&tag=nishidemasami-22&linkId=b026b2c2bd3729a8fe4c35dda528a7bb&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n👇このボタンをクリックするとビットコインアドレスを生成します。\n`;\n\nconst secondArticle = `\nビットコインのアドレスは、32バイトの秘密鍵を以下のようにしてビットコインアドレスに変換します。\n\n\\`\\`\\`mermaid\nflowchart TD\n\nA[32バイトの秘密鍵] -->|secp256k1| B(公開鍵)\nA -->|base58変換とチェックサム付与| F[WIF形式秘密鍵]\nB --> C{ビットコインアドレス形式}\nC -->|BASE58変換とチェックサム付与| D[P2PKH形式ビットコインアドレス]\nC -->|BASE32変換とチェックサム付与| E[Bech32形式ビットコインアドレス]\n\\`\\`\\`\n\nこれはTypescriptでも簡単に計算できます。\n\nそれを実際に書いてみたのが ↓ この今回のコードです\n\\`\\`\\`tsx\nimport { randomBytes, createHash, BinaryLike } from 'crypto';\n\nimport { useState, FC, useMemo, useCallback } from 'react';\n\nimport { Button, TextField } from '@mui/material';\nimport { bech32 } from 'bech32';\nimport { encode } from 'bs58';\nimport RIPEMD160 from 'ripemd160';\nimport { publicKeyCreate, privateKeyVerify } from 'secp256k1';\n\n/** 16進数の文字列かどうかチェックする正規表現 */\nconst check32BytesHex = /^[0-9a-fA-F]{64}$/;\n\n/** 16進数の文字列をUint8Arrayに変換する */\nconst hexToUint8Array = (hex: string): Uint8Array => Buffer.from(hex, 'hex');\n\n/** Bufferを16進数の文字列に変換する */\nconst bufferToHex = (data: Buffer): string => data.toString('hex');\n\n/** sha256でハッシュする */\nconst sha256 = (data: BinaryLike): Buffer =>\n  createHash('sha256').update(data).digest();\n\n/** ripemd160でハッシュする */\nconst ripemd160 = (data: BinaryLike): Buffer =>\n  new RIPEMD160().update(data).digest();\n\n/** BASE58チェックサム生成 */\nconst calcBase58Checksum = (data: BinaryLike): Buffer =>\n  sha256(sha256(data)).subarray(0, 4);\n\n/** BASE58変換＋チェックサム */\nconst base58WithChecksum = (data: Uint8Array): string =>\n  encode([...data, ...calcBase58Checksum(data)]);\n\n/** ビットコインアドレス(BASE58(P2PKH)形式)生成 */\nconst genBitcoinAddressP2PKH = (publicKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x00, ...ripemd160(sha256(publicKey))]));\n\n/** BASE32変換＋チェックサム */\nconst bech32WithChecksum = (data: Uint8Array) =>\n  bech32.encode('bc', [0x00, ...bech32.toWords(data)]);\n\n/** ビットコインアドレス(BASE32(Bech32)形式)生成 */\nconst genBitcoinAddressBECH32 = (publicKey: Uint8Array): string =>\n  bech32WithChecksum(ripemd160(sha256(publicKey)));\n\n/** 秘密鍵(WIF形式)生成 */\nconst genWif = (privateKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x80, ...privateKey]));\n\nconst TypescriptBitcoin: FC = () => {\n  // 秘密鍵(32バイトの16進数)\n  const [hexPrivateKey, setHexPrivateKey] = useState(\n    bufferToHex(randomBytes(32))\n  );\n\n  /** 秘密鍵(32バイト) */\n  const privateKey: Uint8Array | string = useMemo(() => {\n    if (!check32BytesHex.test(hexPrivateKey))\n      return '秘密鍵が32バイトの16進数ではない';\n    return hexToUint8Array(hexPrivateKey);\n  }, [hexPrivateKey]);\n\n  /** 公開鍵 */\n  const publicKey: Uint8Array | string = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (!privateKeyVerify(privateKey)) return '秘密鍵が不適切';\n    return publicKeyCreate(privateKey, false);\n  }, [privateKey]);\n\n  /** ビットコインアドレス(BASE32(Bech32)形式) */\n  const bitcoinAddressBECH32 = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressBECH32(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** ビットコインアドレス(BASE58(P2PKH)形式) */\n  const bitcoinAddressP2PKH = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressP2PKH(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** 秘密鍵をランダムに生成 */\n  const genRamdamKey = useCallback(\n    () => setHexPrivateKey(bufferToHex(randomBytes(32))),\n    []\n  );\n\n  /** 秘密鍵(WIF形式) */\n  const wif = useMemo(\n    () => genWif(hexToUint8Array(hexPrivateKey)),\n    [hexPrivateKey]\n  );\n\n  return (\n    <>\n      <Button onClick={genRamdamKey} variant=\"outlined\">\n        秘密鍵をランダムに生成\n      </Button>\n      <TextField\n        error={!check32BytesHex.test(hexPrivateKey)}\n        fullWidth\n        label=\"秘密鍵(32バイトの16進数)\"\n        margin=\"dense\"\n        value={hexPrivateKey}\n        onChange={(e) => {\n          setHexPrivateKey(e.currentTarget.value);\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"秘密鍵(WIF形式)\"\n        margin=\"dense\"\n        value={wif}\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE58(P2PKH)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressP2PKH}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE32(Bech32)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressBECH32}\n      />\n    </>\n  );\n};\n\nexport { TypescriptBitcoin };\n\\`\\`\\`\n`;\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Typescriptでビットコインアドレスを生成する\"\n\t\t\t\tdescription=\"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"text-center font-bold text-3xl text-gray-900\">\n\t\t\tTypescriptでビットコインアドレスを生成する\n\t\t</h1>\n\t\t<div className=\"text-center text-sm mb-4\">\n\t\t\t{format(new Date('2022-12-10T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t<TypescriptBitcoin />\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React","Bitcoin"],"category":"blog"},{"slug":"posts/nextjs-mermaid","date":"2022-12-18T23:04:03+0900","draft":false,"title":"Next.jsでSSG時にRemarkでMermaidをSVGとして出力する","description":"Next.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。","content":"\r\nNext.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。  \r\n僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。\r\n\r\n今回は`remark-mermaidjs`を使って実装しました。\r\n\r\nこのサイトではMarkdownを`unified`で扱っているので`remark-mermaidjs`を`use`します。  \r\n`remark-mermaidjs`はGoogle Chromeを使ってMermaidをSVGにしているらしく`executablePath`でGoogle Chromeのパスを指定しなければならないようです。  \r\nこのサイトはGitHub Actionsでビルドしているので、ubuntuのために`/opt/google/chrome/google-chrome`を指定しました。なお、ローカル環境でも自由に動かせるように`.env`にもGoogle Chromeへのパスを書くことにしました。\r\n\r\n```typescript\r\n// @ts-ignore\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkMermaid from 'remark-mermaidjs';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkMermaid, {\r\n        launchOptions: {\r\n          executablePath:\r\n            process.env.GoogleChromeExecutablePath ?? // .env\r\n            '/opt/google/chrome/google-chrome', // for GitHub Actions Ubuntu\r\n        },\r\n        svgo: false,\r\n      })\r\n      .use(remarkRehype, { allowDangerousHtml: true, footnoteLabel: '脚注' })\r\n      .use(rehypePrism)\r\n      .use(rehypeKatex)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString()\r\n    .replace(/@@baseUrl@@/g, process.env.baseUrl || '');\r\n```\r\n\r\n以下にサンプルを置いておきます。図がSVGになっていることがわかると思います。\r\n\r\n## Flowchart\r\n\r\n````markdown\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n````\r\n\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n\r\n## Sequence diagram\r\n\r\n````markdown\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n````\r\n\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n\r\n## Gantt chart\r\n\r\n````markdown\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n````\r\n\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n\r\n## Class diagram\r\n\r\n````markdown\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n````\r\n\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n\r\n## Git graph\r\n\r\n````markdown\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n````\r\n\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n\r\n## State diagram\r\n\r\n````markdown\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n````\r\n\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n\r\n## Pie chart\r\n\r\n````markdown\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n````\r\n\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n\r\n## Entity Relationship Diagram\r\n\r\n````markdown\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n````\r\n\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n\r\n## User Journey diagram\r\n\r\n````markdown\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n````\r\n\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n\r\n## C4 diagram\r\n\r\n````markdown\r\n```mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n```\r\n````\r\n\r\n````mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n````\r\n\r\nMermaid記法なら簡単にグラフを書けて便利なので、どんどん使っていきたいと思います。\r\n","tags":["Mermaid","Markdown","Next.js","SSG","SVG","Remark","remark-mermaidjs","GitHub Actions"],"category":"blog"},{"slug":"posts/svg-prayer-wheel","date":"2022-12-17T01:04:03+0900","draft":false,"title":"SVGだけで作ったSVGマニ車をCSSでクルクル回して自動で徳を積む","description":"徳、積みたいですよね。JavaScriptを使わずにSVGとCSSだけでマニ車をクルクル回して自動で徳を積みたいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n\r\n徳、積みたいですよね。\r\n\r\nご存知マニ車。お寺とかにたまにある、周囲にマントラが書いてあって手で回すと1回転毎に1回お経を読んだのと同じ徳を積めるスピリチュアルグッズです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=マニ車\">参考</a>]</sup>  \r\nチベット仏教が国教であるブータンでは、水力マニ車や風力マニ車、ソーラーマニ車<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=ソーラーマニ車\">参考</a>]</sup>などもあり、マニ車も進化しているということがわかります。[^1]\r\n\r\n[^1]: 日本風力エネルギー学会誌 Vol.44, No.4\r\n\r\nならば、SVGとCSSでマントラを回しても徳が積めるのでは…？  \r\nそう思ったので自分用にメモです。\r\n\r\n```html\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n```\r\n\r\nこのような感じで円のパスを複数個作って、それぞれを違う速さで回しています。\r\n\r\nなお、以下のようにSVGのanimateTransformで回転させることもできます。  \r\nしかし、CPUレンダリングになってしまうのでちょっとカクカクするので今回はこの方法は使いませんでした。\r\n\r\n\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n\r\n```xml\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n```\r\n\r\nSVG単体でanimateTransformを利用してマニ車を回すより、CSSのanimationで回した方がスムーズな動作で回せました。\r\n\r\nこれでパソコンでもスマホでも、いつでもどこでも誰でも自動でスマートに徳を積めますね。  \r\n以上、SVGで徳を積んだという話でした。\r\n","tags":["SVG","CSS"],"category":"blog"},{"slug":"posts/google-colab-github","date":"2022-12-03T05:58:43+0900","draft":false,"title":"Google ColaboratoryでGitHubのipynbファイルを開く","description":"Google ColaboratoryでGitHubのipynbファイルを開いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nGoogle ColaboratoryでGitHubのファイルを開いてみたいと思うこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\nと言っても簡単で、GitHubでパブリックのリポジトリにファイルをコミットするだけです。\r\n\r\n<https://github.com/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこのようなパスにコミットしたとしたら、\r\n\r\n<https://colab.research.google.com/github/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこうやってGoogle Colaboratoryで開くことができます。\r\n\r\n簡単！\r\n","tags":["Google Colaboratory","GitHub"],"category":"blog"},{"slug":"posts/nextjs-latex","date":"2022-11-26T04:58:43+0900","draft":false,"title":"Next.jsで数式を書く","description":"Next.jsで数式を書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nNext.jsで数式を書いてみたいと思うこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\n2次方程式の解の公式、懐かしいですね。\r\n\r\n$\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n$\r\n\r\nこれを見ると学生時代を思い出しますね。  \r\nこういう数式を、Next.jsでもMarkdownに$\\LaTeX$で\r\n\r\n```latex\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n```\r\n\r\nこんな感じで書けたら便利です。\r\n\r\n今回は$\\LaTeX$をウェブブラウザで表示するためのライブラリである$\\KaTeX$をNext.jsで使ってみました。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/React-js%EF%BC%86Next-js%E8%B6%85%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83-ebook/dp/B08XBNGYVH?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1304MCUGBPN1M&keywords=next.js&qid=1670505884&sprefix=next.j%2Caps%2C195&sr=8-6&linkCode=ll1&tag=nishidemasami-22&linkId=1faf1c568d048e662fff7bffcc7794e3&language=ja_JP&ref_=as_li_ss_tl\">参考文献</a>]</sup>\r\n\r\nJavaScriptで動的にブラウザ上で数式を描画するのがよく見る$\\KaTeX$の使い方ですが、Next.jsでSSGしている時にはビルド時に既に数式がHTMLにレンダリング済みだという挙動になるので少し仕組みが違います。  \r\nブラウザとしては$\\LaTeX$形式の数式をHTMLへ変換する必要がなくなり描画が高速だという点がメリットです。ブラウザがJavaScriptを無効化していても見れるのもいいですね。\r\n\r\nまず、必要なパッケージをインストールします。\r\n\r\n```bash\r\nnpm install remark-math rehype-katex\r\n```\r\n\r\nこのウェブサイトではMarkdownを読み込むのに _unified_ を使用しているので、 _remark-math_ と _rehype-katex_ を追加で _use_ します。\r\n\r\n```typescript\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkRehype, { allowDangerousHtml: true })\r\n      .use(rehypePrism)\r\n      .use(rehypeKatex)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString();\r\n```\r\n\r\nあとは$\\KaTeX$のCSSをCDNなどから読み込めば完成です。\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css\" crossOrigin=\"anonymous\" />\r\n```\r\n\r\nでは、実際に書いてみることにします。  \r\n以下は任意の$x$と$y$の最大公約数を求める$gcd$関数の定義です。\r\n\r\n```latex\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y) & (\\text{otherwize})\r\n\\end{cases}\r\n```\r\n\r\n$\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y) & (\\text{otherwize})\r\n\\end{cases}\r\n$\r\n\r\n上手に書けました！✨\r\n\r\n以上です。  \r\n<https://github.com/nishidemasami/nishidemasami.github.io>  \r\n実際にNext.jsで動いているコードは👆ここから確認してください。\r\n","tags":["Next.js","LaTeX","KaTeX","Markdown"],"category":"blog"},{"slug":"posts/gen_ed25519_key","date":"2022-11-19T23:02:43+0900","draft":false,"title":"ED25519の鍵を生成する","description":"ED25519の鍵を生成したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nもう1年以上前にAWSでED25519の鍵が使えるようになっていた。  \r\n当然のようにGitHubでも使える。  \r\nどんどんED25519を使えない環境もかなり減ってきていて、ED25519の鍵を作る機会も増えてきた。\r\n\r\nなのに、ED25519の鍵の作り方をいつもググって調べるので自分用にメモ。\r\n\r\n`ssh-keygen -t ed25519`  \r\nで作成できる。  \r\n\r\n```bash\r\n$ ssh -V\r\nOpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022\r\n$ ssh-keygen -t ed25519\r\nGenerating public/private ed25519 key pair.\r\nEnter file in which to save the key (/home/nishidemasami/.ssh/id_ed25519):\r\nEnter passphrase (empty for no passphrase):\r\nEnter same passphrase again:\r\nYour identification has been saved in /home/nishidemasami/.ssh/id_ed25519\r\nYour public key has been saved in /home/nishidemasami/.ssh/id_ed25519.pub\r\nThe key fingerprint is:\r\nSHA256:mObF7QvcCUg1/JQb9aF6hc2R6GCuu7UpYipZ03J6Xtw nishidemasami@desktop-nishidemasami\r\nThe key's randomart image is:\r\n+--[ED25519 256]--+\r\n|       .o  o..o. |\r\n|       ...* .*.o |\r\n|      .  = =o =  |\r\n|     . = .+...   |\r\n|     .= S.o .    |\r\n|    +oo+.= o     |\r\n|   o =. =.E      |\r\n|  o . +.oo +     |\r\n|   ..=...o+      |\r\n+----[SHA256]-----+\r\n```\r\n\r\n参考\r\n<https://aws.amazon.com/jp/about-aws/whats-new/2021/08/amazon-ec2-customers-ed25519-keys-authentication/>\r\n","tags":["SSH","AWS","ED25519"],"category":"blog"},{"slug":"posts/check_github_repository_size","date":"2022-11-12T23:02:43+0900","draft":false,"title":"GitHubのレポジトリサイズを確認する","description":"GitHubのレポジトリサイズを確認する","content":"\r\nリポジトリのサイズがいつも気になるので自分用にメモ。\r\n\r\n`https://api.github.com/repos/アカウント名/リポジトリ名`  \r\nにアクセスするとjsonで詳細が取得できる。  \r\nその`size`にKB単位でサイズが入っている。\r\n\r\nたとえば`github.com:nishidemasami/nishidemasami.github.io.git`の場合、  \r\n<https://api.github.com/repos/nishidemasami/nishidemasami.github.io>  \r\nこのURLで取得できる。\r\n","tags":["GitHub"],"category":"blog"},{"slug":"posts/nextjs-website-renewal","date":"2022-11-05T01:04:03+0900","draft":false,"title":"Next.jsでこのウェブサイトをリニューアルしました！✨","description":"Next.jsでこのウェブサイトをリニューアルしました！✨","content":"\r\nNext.jsでこのウェブサイトをリニューアルしました！✨\r\n\r\nT3 Stackの6つの技術のうち、フロントエンド側の以下の3つの技術をフル活用しています。\r\n\r\n* TypeScript<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0TypeScript-%E2%80%95%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8BJavaScript%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA-Boris-Cherny/dp/4873119049?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3Q7MI7KXY06BB&keywords=typescript&qid=1670505807&sprefix=typescript+%2Caps%2C224&sr=8-9&linkCode=ll1&tag=nishidemasami-22&linkId=48539012d76c58e8bc3549b5a9dc7a1f&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>  \r\nほぼ全てTypeScriptで書いています。\r\n* Next.js  \r\nSSGフレームワークに使用しています。\r\n* Tailwind CSS  \r\nスタイルを書くのに使用しています。CSSもSCSSもstyled-componentsもどうしても必要な箇所を除けば使っていません。\r\n\r\nまた、リニューアル後も引き続きGitHub ActionsでCI/CDを継続しています。\r\n\r\n今のところこのウェブサイトはNext.jsになる前には、\r\n\r\nHexo  \r\n🔽  \r\nGatsby.js  \r\n🔽  \r\nNext.js\r\n\r\nという偏移を経ています。\r\n\r\nHexoは純粋な時代の古き良きSSGでした。しかしパフォーマンスを追い求めると限界がありました。  \r\nGatsby.jsは _Blazing fast🔥_ ではあったもののちょっとカスタマイズしようとするとすぐgatsby-pluginが必要になりました。  \r\nその点Next.jsは、何もかも自分でコントロールできるような確かな手触りを感じています。  \r\nそれにNext.jsも十分速い。とにかくウェブサイトのなにをクリックしても速いです。普通の使い方をするならGatsby.jsと違いがわからないほど速いです。  \r\n\r\nNext.jsをもっと良く知るためにも、引き続きこのウェブサイトでいろいろなことをやってみようと思っています。\r\n","tags":["Next.js"],"category":"blog"},{"slug":"posts/css-svg-rotate-text","date":"2021-03-17T01:04:03+0900","draft":false,"title":"SVGとCSSだけで文字をクルクル回す","description":"JavaScriptを使わずにSVGとCSSだけで文字をクルクル回したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\nJavaScriptを使わずにSVGとCSSだけで文字をクルクル回したいこと、ありますよね。  \n僕はあるので自分用にメモです。\n\n<svg style=\"animation: spin 5s linear infinite; max-width:300px\" viewBox=\"0 0 100 100\" >\n  <defs>\n    <path id=\"Circle\" d=\"M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\n  </defs>\n  <text>\n    <textPath href=\"#Circle\">文字がクルクル回ります。</textPath>\n  </text>\n</svg>\n\n```html\n<svg\n  style=\"animation: spin 5s linear infinite; max-width:300px\"\n  viewBox=\"0 0 100 100\"\n>\n  <defs>\n    <path\n      id=\"Circle\"\n      d=\"M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\"\n    />\n  </defs>\n  <text>\n    <textPath href=\"#Circle\">\n      文字がクルクル回ります。\n    </textPath>\n  </text>\n</svg>\n```\n\nSVGは大きさ50*50の円とその周囲を沿うようにテキストを記述しています。SVGのスタイルにはクルクル回るCSSを書いてます。  \nこれだけでクルクル回ったので楽しかったです。\n","tags":["CSS","SVG"],"category":"blog"}],"tags":["GitHub","CSS","SVG","SSH","AWS","ED25519","Google Colaboratory","GitHub","hexo","Java","Ruby","情報処理技術者試験","ネットワークスペシャリスト","Next.js","LaTeX","KaTeX","Markdown","Mermaid","Markdown","Next.js","SSG","SVG","Remark","remark-mermaidjs","GitHub Actions","Next.js","Rust","FizzBuzz","SVG","CSS","Vim","OpenSSL","JavaScript","TypeScript","React","Gatsby","TypeScript","React","TypeScript","React","Bitcoin"],"sorceCodeHTML":"<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> React </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'react'</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { VolumeDown, VolumeUp } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'@mui/icons-material'</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { Button, CircularProgress, Grid, Slider } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'@mui/material'</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6E7781\">// webkit用Typescript型宣言</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> global {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Window</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">webkitAudioContext</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">AudioContext</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">ReactAudioTest</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">React</span><span style=\"color: #24292F\">.</span><span style=\"color: #953800\">FunctionComponent</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// 音量：初期値25</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">volume</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">setVolume</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.</span><span style=\"color: #8250DF\">useState</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">25</span><span style=\"color: #24292F\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// 再生状態：初期値false</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">playingFlag</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">setPlayingFlag</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.</span><span style=\"color: #8250DF\">useState</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// AudioContext：初期値undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">audioContext</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">setAudioContext</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.useState</span><span style=\"color: #CF222E\">&#x3C;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    AudioContext </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// 音源ソース：初期値undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">source</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">setSourceState</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.useState</span><span style=\"color: #CF222E\">&#x3C;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    AudioBufferSourceNode </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// 音量調節：初期値undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">gainState</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">setGainState</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.</span><span style=\"color: #8250DF\">useState</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">GainNode</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">undefined</span><span style=\"color: #24292F\">>(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  React.</span><span style=\"color: #8250DF\">useEffect</span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// 初期化</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">newAudioContext</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (window.AudioContext </span><span style=\"color: #CF222E\">||</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      window.webkitAudioContext)();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">setAudioContext</span><span style=\"color: #24292F\">(newAudioContext);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">gainNode</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> newAudioContext.</span><span style=\"color: #8250DF\">createGain</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    gainNode.gain.value </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> volume </span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">100</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">setGainState</span><span style=\"color: #24292F\">(gainNode);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #6E7781\">// unmount時の後始末</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (source) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        source.buffer </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// メモリリーク防止</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (newAudioContext) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        newAudioContext.</span><span style=\"color: #8250DF\">close</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }, []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  React.</span><span style=\"color: #8250DF\">useEffect</span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// 音量変更</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (gainState) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      gainState.gain.value </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> volume </span><span style=\"color: #CF222E\">/</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">100</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }, [volume]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// スマホなどでは迷惑な自動再生を防ぐ目的で</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// ユーザの操作に伴う再生でしか音を再生できない</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">onClickToStartAndStop</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> React.</span><span style=\"color: #8250DF\">useCallback</span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (audioContext </span><span style=\"color: #CF222E\">&#x26;&#x26;</span><span style=\"color: #24292F\"> gainState) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (playingFlag) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">// 停止</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (source) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          source.</span><span style=\"color: #8250DF\">stop</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          source.buffer </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// メモリリーク防止</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #6E7781\">// 再生</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">channels</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// モノラル</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">frameCount</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> audioContext.sampleRate </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2.0</span><span style=\"color: #24292F\">; </span><span style=\"color: #6E7781\">// 2秒</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">myArrayBuffer</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> audioContext.</span><span style=\"color: #8250DF\">createBuffer</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          channels,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          frameCount,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          audioContext.sampleRate</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> channel </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">; channel </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\"> channels; channel </span><span style=\"color: #CF222E\">+=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #6E7781\">// ホワイトノイズ生成</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">nowBuffering</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> myArrayBuffer.</span><span style=\"color: #8250DF\">getChannelData</span><span style=\"color: #24292F\">(channel);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> i </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">; i </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\"> frameCount; i </span><span style=\"color: #CF222E\">+=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            nowBuffering[i] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> Math.</span><span style=\"color: #8250DF\">random</span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">buffersource</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> audioContext.</span><span style=\"color: #8250DF\">createBufferSource</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #8250DF\">setSourceState</span><span style=\"color: #24292F\">(buffersource);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        buffersource.buffer </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> myArrayBuffer;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        buffersource.loop </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        buffersource.</span><span style=\"color: #8250DF\">connect</span><span style=\"color: #24292F\">(gainState).</span><span style=\"color: #8250DF\">connect</span><span style=\"color: #24292F\">(audioContext.destination);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        buffersource.</span><span style=\"color: #8250DF\">start</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #8250DF\">setPlayingFlag</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">playingFlag);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }, [playingFlag, audioContext, gainState]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">audioContext </span><span style=\"color: #CF222E\">||</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">gainState) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">React.Fragment</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">CircularProgress </span><span style=\"color: #CF222E\">/></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        loading</span><span style=\"color: #CF222E\">...</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">React.Fragment</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">div className</span><span style=\"color: #CF222E\">=</span><span style=\"color: #0A3069\">\"text-center h-fit w-full\"</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid container</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid item</span><span style=\"color: #CF222E\">></span><span style=\"color: #24292F\">&#x3C;/</span><span style=\"color: #953800\">Grid</span><span style=\"color: #24292F\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid item</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">VolumeDown </span><span style=\"color: #CF222E\">/></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">Grid</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid item xs</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{</span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">}</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #953800\">Slider</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            min</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            max</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{</span><span style=\"color: #0550AE\">100</span><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            defaultValue</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{</span><span style=\"color: #0550AE\">50</span><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            value</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{volume}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            onChange</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{(__, newValue) => {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">              </span><span style=\"color: #8250DF\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">newValue</span><span style=\"color: #24292F\"> === </span><span style=\"color: #0A3069\">'number'</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">                </span><span style=\"color: #8250DF\">setVolume</span><span style=\"color: #24292F\">(newValue);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">              }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            }}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            valueLabelDisplay</span><span style=\"color: #CF222E\">=</span><span style=\"color: #0A3069\">\"auto\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">            aria</span><span style=\"color: #CF222E\">-</span><span style=\"color: #24292F\">labelledby</span><span style=\"color: #CF222E\">=</span><span style=\"color: #0A3069\">\"continuous-slider\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">/></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">Grid</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid item</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">          </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">VolumeUp </span><span style=\"color: #CF222E\">/></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">Grid</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #24292F\">Grid item</span><span style=\"color: #CF222E\">></span><span style=\"color: #24292F\">&#x3C;/</span><span style=\"color: #953800\">Grid</span><span style=\"color: #24292F\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">Grid</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;</span><span style=\"color: #953800\">Button</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        variant</span><span style=\"color: #CF222E\">=</span><span style=\"color: #0A3069\">\"outlined\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        color</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{playingFlag ? </span><span style=\"color: #0A3069\">'info'</span><span style=\"color: #24292F\"> : </span><span style=\"color: #0A3069\">'primary'</span><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        onClick</span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\">{onClickToStartAndStop}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">        ホワイトノイズ{playingFlag ? </span><span style=\"color: #0A3069\">'停止'</span><span style=\"color: #24292F\"> : </span><span style=\"color: #0A3069\">'再生'</span><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">Button</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">&#x3C;/</span><span style=\"color: #24292F\">div</span><span style=\"color: #CF222E\">></span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { ReactAudioTest };</span></span></code></pre>","prevPost":{"slug":"posts/css-svg-rotate-text","date":"2021-03-17T01:04:03+0900","draft":false,"title":"SVGとCSSだけで文字をクルクル回す","description":"JavaScriptを使わずにSVGとCSSだけで文字をクルクル回したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\nJavaScriptを使わずにSVGとCSSだけで文字をクルクル回したいこと、ありますよね。  \n僕はあるので自分用にメモです。\n\n<svg style=\"animation: spin 5s linear infinite; max-width:300px\" viewBox=\"0 0 100 100\" >\n  <defs>\n    <path id=\"Circle\" d=\"M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\n  </defs>\n  <text>\n    <textPath href=\"#Circle\">文字がクルクル回ります。</textPath>\n  </text>\n</svg>\n\n```html\n<svg\n  style=\"animation: spin 5s linear infinite; max-width:300px\"\n  viewBox=\"0 0 100 100\"\n>\n  <defs>\n    <path\n      id=\"Circle\"\n      d=\"M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\"\n    />\n  </defs>\n  <text>\n    <textPath href=\"#Circle\">\n      文字がクルクル回ります。\n    </textPath>\n  </text>\n</svg>\n```\n\nSVGは大きさ50*50の円とその周囲を沿うようにテキストを記述しています。SVGのスタイルにはクルクル回るCSSを書いてます。  \nこれだけでクルクル回ったので楽しかったです。\n","tags":["CSS","SVG"],"category":"blog"},"nextPost":{"slug":"articles/blog-remake-with-gatsby","date":"2021-03-06T18:04:03+0900","draft":false,"title":"Gatsbyでブログをリニューアルしてみました","description":"このブログをリニューアルしてみました。このブログのソースはここ ↓ で公開しています。https://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby見てみた感じどうですか？すごくないですか！？…","content":"*/\n\nimport React from 'react';\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport Link from 'next/link';\n\nimport ReactHelloWorld from '../../components/ReactHelloWorld/ReactHelloWorld';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\n\ntype AboutProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst About = (props: AboutProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Gatsbyでブログをリニューアルしてみました\"\n\t\t\t\tdescription=\"Gatsbyでブログをリニューアルしてみました\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"text-center font-bold text-3xl text-gray-900\">\n\t\t\tGatsbyでブログをリニューアルしてみました\n\t\t</h1>\n\t\t<div className=\"text-center text-sm mb-4\">\n\t\t\t{format(new Date('2021-03-06T18:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t{['JavaScript', 'TypeScript', 'React', 'Gatsby'].map((tag) => (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\tkey={tag}\n\t\t\t\t>\n\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t#{tag}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tこのブログをリニューアルしてみました。\n\t\t\t\t\tちなみにこのブログのソースはここ ↓ で公開しています。\n\t\t\t\t\t<a href=\"https://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby\">\n\t\t\t\t\t\thttps://github.com/nishidemasami/nishidemasami.github.io/tree/gatsby\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t\t<p>作ってみた感じ、すごくいいと思います！</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>React が動いている・生で React が書ける</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tページ間の遷移の速度が速い(React の仮想 DOM 操作に由来している)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tちょっとがんばれば Typescript でも書ける(使用する Gatsby\n\t\t\t\t\t\tのテンプレートによっては最初から Typescript を使っているらしい)\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tGatsby が静的にページを作ってくれているので Javascript\n\t\t\t\t\t\tをオフにしてても見れる\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ReactHelloWorld>\n\t\t\t\t\tこんな感じで普通にReact が<br />\n\t\t\t\t\tTypescript で書けて動きます！✨\n\t\t\t\t</ReactHelloWorld>\n\t\t\t\t<p>\n\t\t\t\t\tGatsby は、HEXO や Hugo、Jekyll\n\t\t\t\t\tみたいに静的ジェネレータなので、こうやって Github Pages\n\t\t\t\t\tにも乗せられるので便利！ AWS S3 とかに乗せればスケールしますし！✨\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tあと、ページを高速化するための細かなテクニックを最初から使ってくれています。\n\t\t\t\t</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>静的プレレンダリング・静的プリフェッチ(速い)</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tいわゆる PRPL パターンに準拠する PWA サポート\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Push </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tcritical resources for the initial URL route using\n\t\t\t\t\t\t<code>&lt;link preload&gt;</code> and HTTP/2.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Render </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tinitial route.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Pre-cache </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tremaining routes.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<em>Lazy-load </em>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t\tand create remaining routes on demand.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<a href=\"https://www.gatsbyjs.com/docs/prpl-pattern/\">\n\t\t\t\t\t\t\thttps://www.gatsbyjs.com/docs/prpl-pattern/\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tGraphQL(ビルド時には json\n\t\t\t\t\t\tになっている)によるデータアクセスや画面遷移(これまた速い)\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<p>\n\t\t\t\t\tGatsby で Markdown ファイルとかいい感じにしてくれますし、普通に React\n\t\t\t\t\tの仮想 DOM による高速化の恩恵も受けることできてます！\n\t\t\t\t\tかなりいい感じになってると思います！✨\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<AboutProps> = async () => ({\n\tprops: {\n\t\trecents: getRecentPosts(['title', 'date', 'slug']),\n\t\ttags: getTags(),\n\t\t...getPrevNextPost(__filename),\n\t},\n});\n\nexport default About;\n","tags":["JavaScript","TypeScript","React","Gatsby"],"category":"blog"}},"__N_SSG":true}