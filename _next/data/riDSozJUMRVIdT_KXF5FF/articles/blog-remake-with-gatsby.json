{"pageProps":{"recents":[{"slug":"posts/onion-distroless-website","date":"2023-09-10T11:14:43+0900","draft":false,"title":"OnionドメインのウェブサイトをDockerでDistrolessコンテナで構築して安全に公開する","description":"OnionドメインのウェブサイトをDockerでDistrolessコンテナで構築して安全に公開したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\nonionサービスはtorネットワークで公開する以上、強固なセキュリティが求められます。\n今回は、Distrolessコンテナを利用して、torネットワークにWEBサイトを公開してみようと思います。\n\nなお、この記事を書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873117763?&linkCode=ll1&tag=nishidemasami-22&linkId=7b0a0e16eab9786a7b21bcf0d7c4e768&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >O'Reilly Docker</a>を参考にしました。\n\n## TL;DR\n\nhttps://github.com/nishidemasami/distroless-tor-nginx\n\nここで公開しています。\n\n## 用語の説明\n\n### torネットワークのonionサービスとは？\n\ntorネットワークは検閲されることなく通信するためのネットワークで、onionサービスはインターネット上に情報が出ることなく完全にtorネットワーク上だけで完結するWEBサイトを公開する仕組みです。\nしばしば「ダークウェブ」と呼ばれることもあるtorネットワークですが、内部告発サイトや人権活動サイトなどを誰にも検閲されることなくインターネット上に公開できることからイギリスの公共放送BBCもonionサービスで全世界にニュースを公開しているなど活用が進んでいます。\nたとえばあなたが内部告発Webシステムを開発する場合、この記事で紹介する知識が役に立つはずです。\n\n### Distrolessコンテナとは？\n\nDistrolessコンテナは、必要最小限の構成で作られたコンテナです。\naptどころか、viもshも、なんとbusyboxすら入っていません。gcr.io/distroless/base-nossl-debian12:latestでは、入っているのは主に\n\n* CA証明書\n* rootユーザの`/etc/passwd`\n* `/tmp`ディレクトリ\n* tzdata\n* glibc\n\nだけという徹底ぶりです。\nセキュリティの観点からも不要なアプリケーションが入っていないことは(OSコマンドインジェクションを防げるなど)非常に好ましいです。\ngcr.io/distroless/base-nossl-debian12:latestは現在14.79MBしかなく、非常に軽量なのも大きなメリットです。\nこれを土台にして、必要なファイルだけをマルチステージビルドで入れていきます。\n\n## 実践\n\n構築の土台となる部分を最小構成で作成します。  \n最小構成で一旦動かしてみることで動きなども理解できます。\n\n### Docker\n\nまず`compose.yaml`を作ります。\n\n<div class=\"preshiki\">compose.yaml</div>\n\n```yaml\nversion: '3.8'\n\nservices:\n  nginx:\n    build:\n      dockerfile: ./nginx/Dockerfile\n    networks:\n      - tor_network\n    volumes:\n      - ./nginx/settings:/etc/nginx/sites-enabled:ro\n      - ./htdocs:/usr/share/nginx/html:ro\n    restart: unless-stopped\n  tor:\n    build:\n      dockerfile: ./tor/Dockerfile\n    networks:\n      - tor_network\n      - front\n    volumes:\n      - ./data:/var/lib/tor\n      - ./tor/settings:/etc/tor\n    restart: unless-stopped\n\nnetworks:\n  front:\n  tor_network:\n    internal: true\n```\n\nネットワークは、外部に接続するための`front`ネットワークと、外部とつながっていない内部だけで独立したネットワークの`tor_network`を用意します。  \n`tor`コンテナだけ外部と接続して、`nginx`コンテナは外部と遮断し、そして`tor`コンテナと`nginx`コンテナを`tor_network`ネットワークでつなげます。  \n\nネットワーク図に表すと以下のようになります。\n\n```plantuml\n@startuml\n\n!define ICONURL https://raw.githubusercontent.com/Roemer/plantuml-office/master/office2014\n!includeurl ICONURL/Servers/database_server.puml\n!includeurl ICONURL/Servers/application_server.puml\n!includeurl ICONURL/Concepts/firewall_orange.puml\n\nnwdiag {\n    torネットワーク [ shape = cloud];\n    torネットワーク -- 仮想ブリッジ;\n    \n    network front {\n        tor [description = \"<&cog*4>\\ntor\"];\n        仮想ブリッジ [description = \"Docker\\n仮想ブリッジ\"];\n    }\n    network tor_network {\n        nginx [address = \"nginx\",description = \"<$application_server>\\n nginx\"];\n        tor [description = \"<&cog*4>\\ntor\"];\n    }\n    \n    group {\n        color = \"#CCFFCC\";\n        description = \"Docker\\n内部\\n \";\n        \n        nginx;\n        tor;\n    }\n}\n@enduml\n```\n\n`nginx`コンテナと`tor`コンテナは、後述の`tor/Dockerfile`と`nginx/Dockerfile`で記述しています。 \n\nまた、どちらも`restart: unless-stopped`で、落ちたら再起動するようにしています。\n\n### Tor\n\n`debian:12`にtorをインストールして、動作に必要なファイルだけを`gcr.io/distroless/base-nossl-debian12:latest`に移動しています。\n\n<div class=\"preshiki\">tor/Dockerfile</div>\n\n```text\nFROM debian:12 as build\n\nRUN apt update && \\\n  apt install tor -y --no-install-recommends && \\\n  cp -a --parents /usr/bin/tor /opt && \\\n  cp -a --parents /usr/sbin/tor /opt && \\\n  cp -a --parents /etc/tor /opt && \\\n  cp -aL --parents /usr/share/tor /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libz.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libm.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libevent-2.1.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libssl.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libcrypto.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libsystemd.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/liblzma.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libzstd.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libseccomp.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libcap.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libc.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libgcrypt.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/liblz4.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libgpg-error.so.* /opt\n\nFROM gcr.io/distroless/base-nossl-debian12:latest\nCOPY --from=build /opt /\n\nENTRYPOINT  [\"/usr/bin/tor\"]\n```\n\ntorの設定ファイルである`torrc`で、80ポートへの接続を`nginx`コンテナに向けています。  \n※Dockerネットワーク内ではコンテナ名で名前解決をすることができます\n\n<div class=\"preshiki\">tor/settings/torrc</div>\n\n```text\nSocksPort 0\nHiddenServiceDir /var/lib/tor/hidden_service/\nHiddenServicePort 80 nginx:80\n```\n\n誰かの踏み台にされるのだけは防ぐために`SocksPort 0`の設定をしています。\n\n### Nginx\n\nこれも`debian:12`にnginxをインストールして、動作に必要なファイルだけを`gcr.io/distroless/base-nossl-debian12:latest`に移動しています。  \n\n<div class=\"preshiki\">nginx/Dockerfile</div>\n\n```text\nFROM debian:12 as build\n\nRUN apt update && \\\n  apt install nginx -y --no-install-recommends && \\\n  cp -a --parents /usr/share/nginx /opt && \\\n  cp -a --parents /var/log/nginx /opt && \\\n  cp -a --parents /var/lib/nginx /opt && \\\n  cp -aL --parents /var/run /opt && \\\n  cp -a --parents /etc/nginx /opt && \\\n  cp -a --parents /etc/passwd /opt && \\\n  cp -a --parents /etc/group /opt && \\\n  cp -a --parents /usr/sbin/nginx /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libcrypt.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libpcre2-8.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libssl.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libcrypto.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libz.so.* /opt && \\\n  cp -a --parents /lib/x86_64-linux-gnu/libc.so.* /opt\n\nFROM gcr.io/distroless/base-nossl-debian12:latest\nCOPY --from=build /opt /\n\nEXPOSE 80\n\nENTRYPOINT [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"]\n```\n\nnginxの設定ファイルを配置します。\n\n<div class=\"preshiki\">nginx\\settings\\tor.conf</div>\n\n```text\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\nなにも表示されないと動いているかどうかわかりにくいので`index.html`を配置しておきます。\n\n<div class=\"preshiki\">htdocs/index.html</div>\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>docker hidden service test title</title>\n  </head>\n  <body>\n    <div>docker hidden service test body div</div>\n  </body>\n</html>\n```\n\n以上で最小構成は作成完了です。\n\n## 起動する\n\nDockerは普通に`docker-compose up -d`コマンドで起動します。\n\n### 起動確認(onionサービスとの疎通確認)\n\n正常に起動すると、`data/hidden_service/hostname`に以下のようなファイルが出力されています。\n\n<div class=\"preshiki\">data/hidden_service/hostname</div>\n\n```text\nkxal3j4zblhjt4jinnbly6icciqbh2ihq4u2opsu4qhqyqazwsgaq3ad.onion\n```\n\nこのアドレスにtorブラウザなどで接続し、作成したindex.htmlが表示されていることを確認します。\n\n<div><img srcset=\"/assets/images/tor-browser-preview.webp\" alt=\"Torブラウザで表示できたところ\"/><div class=\"photo-space-detail\">Torブラウザで表示できたところ</div></div>\n\n無事に動いていることが確認できました。\n\nこのように、Distrolessを使えばセキュリティが非常に強固なサービスを簡単に立ち上げることができます！\nセキュリティの強固さが求められる場合、ぜひDistrolessを使ってください！\n","tags":["Distroless","Onion Service","Tor","Docker","Tor Hidden Service","Nginx"],"category":"blog"},{"slug":"posts/nextjs-plantuml","date":"2023-03-04T23:04:03+0900","draft":false,"title":"Next.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGとして出力する","description":"Next.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGにして出力してみたいと思うこと、ありますよね。僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。","content":"\r\nNext.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGにして出力してみたいと思うこと、ありますよね。  \r\n僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。\r\n\r\n今回は`remark-sync-plantuml`を使って実装しました。\r\n\r\nこのサイトではMarkdownを`unified`で扱っているので`remark-sync-plantuml`を`use`します。  \r\n`remark-sync-plantuml`はjavaでplantuml.jarを使ってMermaidをSVGにしているらしく、このサイトはGitHub Actionsでビルドしているので問題なく動かせそうなので採用しました。\r\n\r\n```typescript\r\nimport rehypeShiki from '@leafac/rehype-shiki';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkMermaid from 'remark-mermaidjs';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport remarkPlantUML from 'remark-sync-plantuml';\r\nimport { getHighlighter } from 'shiki';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n\t(\r\n\t\tawait unified()\r\n\t\t\t.use(remarkParse)\r\n\t\t\t.use(remarkMath)\r\n\t\t\t.use(remarkGfm)\r\n\t\t\t.use(remarkMermaid, {\r\n\t\t\t\tlaunchOptions: {\r\n\t\t\t\t\texecutablePath:\r\n\t\t\t\t\t\tprocess.env.GoogleChromeExecutablePath ??\r\n\t\t\t\t\t\t'/opt/google/chrome/google-chrome',\r\n\t\t\t\t},\r\n\t\t\t\tsvgo: false,\r\n\t\t\t})\r\n\t\t\t.use(remarkPlantUML)\r\n\t\t\t.use(remarkRehype, {\r\n\t\t\t\tallowDangerousHtml: true,\r\n\t\t\t\tfootnoteLabel: '脚注',\r\n\t\t\t})\r\n\t\t\t.use(rehypeShiki, {\r\n\t\t\t\thighlighter: await getHighlighter({\r\n\t\t\t\t\ttheme: 'github-light',\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t.use(rehypeKatex)\r\n\t\t\t.use(rehypeStringify, { allowDangerousHtml: true })\r\n\t\t\t.process(markdown)\r\n\t)\r\n\t\t.toString();\r\n\r\n```\r\n\r\n以下にサンプルを置いておきます。図がSVGになっていることがわかると思います。\r\n\r\n## AWS Architecture Diagrams\r\n\r\nAWSが<https://github.com/awslabs/aws-icons-for-plantuml>で公開しているAWS Icons for PlantUMLも使うことができます。  \r\nこれなら簡単にAWSのアーキテクチャ図を書くことができて便利です。\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)\r\n\r\n!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist\r\n\r\n!include AWSPuml/AWSCommon.puml\r\n!include AWSPuml/AWSExperimental.puml\r\n!include AWSPuml/Groups/all.puml\r\n!include AWSPuml/Compute/LambdaLambdaFunction.puml\r\n!include AWSPuml/General/Documents.puml\r\n!include AWSPuml/General/Multimedia.puml\r\n!include AWSPuml/General/Tapestorage.puml\r\n!include AWSPuml/General/User.puml\r\n!include AWSPuml/MediaServices/ElementalMediaConvert.puml\r\n!include AWSPuml/MachineLearning/Transcribe.puml\r\n!include AWSPuml/Storage/SimpleStorageService.puml\r\n\r\n' define custom group for Amazon S3 bucket\r\nAWSGroupColoring(S3BucketGroup, #FFFFFF, AWS_COLOR_GREEN, plain)\r\n!define S3BucketGroup(g_alias, g_label=\"Amazon S3 bucket\") AWSGroupEntity(g_alias, g_label, AWS_COLOR_GREEN, SimpleStorageService, S3BucketGroup)\r\n\r\n' Groups are rectangles with a custom style using stereotype - need to hide\r\nhide stereotype\r\nskinparam linetype ortho\r\nskinparam rectangle {\r\n\t\tBackgroundColor AWS_BG_COLOR\r\n\t\tBorderColor transparent\r\n}\r\nsprite Callout_1 <svg width=\"18\" height=\"18\"><circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"black\" /><text x=\"5\" y=\"13\" fill=\"#FFFFFF\" font-size=\"12\">1</text></svg>\r\n\r\nrectangle \"$UserIMG()\\nユーザー\" as user\r\nAWSCloudGroup(cloud){\r\n\tRegionGroup(region) {\r\n\t\tS3BucketGroup(s3) {\r\n\t\t\trectangle \"$MultimediaIMG()\\n\\t動画\\t\" as video\r\n\t\t\trectangle \"$TapestorageIMG()\\n\\t音声\\t\" as audio\r\n\t\t\trectangle \"$DocumentsIMG()\\n\\tテキスト\\t\" as transcript\r\n\r\n\t\t\tuser -r-> video: <$Callout_1>\\lアップロード\r\n\t\t\tvideo -r-> audio\r\n\t\t\taudio -r-> transcript\r\n\t\t}\r\n\r\n\t\trectangle \"$LambdaLambdaFunctionIMG()\\nObjectCreated\\nevent handler\" as e1\r\n\t\trectangle \"$ElementalMediaConvertIMG()\\nAWS Elemental\\nMediaConvert\" as mediaconvert\r\n\t\trectangle \"$TranscribeIMG()\\nAmazon Transcribe\\n\" as transcribe\r\n\r\n\t\tvideo -d-> e1: <$Callout_2>\r\n\t\te1 -[hidden]r-> mediaconvert\r\n\t\tmediaconvert -[hidden]r-> transcribe\r\n\t\tmediaconvert -u-> audio: <$Callout_3>\r\n\t\ttranscribe -u-> transcript: <$Callout_4>\r\n\r\n\t\tStepFunctionsWorkflowGroup(sfw) {\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\nextract audio\" as sfw1\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\ntranscribe audio\" as sfw2\r\n\r\n\t\t\te1 -r-> sfw1: 起動\r\n\t\t\tsfw1 -r-> sfw2\r\n\t\t\tsfw1 -u-> mediaconvert\r\n\t\t\tsfw2 -u-> transcribe\r\n\t\t}\r\n\t}\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)\r\n\r\n!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist\r\n\r\n!include AWSPuml/AWSCommon.puml\r\n!include AWSPuml/AWSExperimental.puml\r\n!include AWSPuml/Groups/all.puml\r\n!include AWSPuml/Compute/LambdaLambdaFunction.puml\r\n!include AWSPuml/General/Documents.puml\r\n!include AWSPuml/General/Multimedia.puml\r\n!include AWSPuml/General/Tapestorage.puml\r\n!include AWSPuml/General/User.puml\r\n!include AWSPuml/MediaServices/ElementalMediaConvert.puml\r\n!include AWSPuml/MachineLearning/Transcribe.puml\r\n!include AWSPuml/Storage/SimpleStorageService.puml\r\n\r\n' define custom group for Amazon S3 bucket\r\nAWSGroupColoring(S3BucketGroup, #FFFFFF, AWS_COLOR_GREEN, plain)\r\n!define S3BucketGroup(g_alias, g_label=\"Amazon S3 bucket\") AWSGroupEntity(g_alias, g_label, AWS_COLOR_GREEN, SimpleStorageService, S3BucketGroup)\r\n\r\n' Groups are rectangles with a custom style using stereotype - need to hide\r\nhide stereotype\r\nskinparam linetype ortho\r\nskinparam rectangle {\r\n\t\tBackgroundColor AWS_BG_COLOR\r\n\t\tBorderColor transparent\r\n}\r\nsprite Callout_1 <svg width=\"18\" height=\"18\"><circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"black\" /><text x=\"5\" y=\"13\" fill=\"#FFFFFF\" font-size=\"12\">1</text></svg>\r\n\r\nrectangle \"$UserIMG()\\nユーザー\" as user\r\nAWSCloudGroup(cloud){\r\n\tRegionGroup(region) {\r\n\t\tS3BucketGroup(s3) {\r\n\t\t\trectangle \"$MultimediaIMG()\\n\\t動画\\t\" as video\r\n\t\t\trectangle \"$TapestorageIMG()\\n\\t音声\\t\" as audio\r\n\t\t\trectangle \"$DocumentsIMG()\\n\\tテキスト\\t\" as transcript\r\n\r\n\t\t\tuser -r-> video: <$Callout_1>\\lアップロード\r\n\t\t\tvideo -r-> audio\r\n\t\t\taudio -r-> transcript\r\n\t\t}\r\n\r\n\t\trectangle \"$LambdaLambdaFunctionIMG()\\nObjectCreated\\nevent handler\" as e1\r\n\t\trectangle \"$ElementalMediaConvertIMG()\\nAWS Elemental\\nMediaConvert\" as mediaconvert\r\n\t\trectangle \"$TranscribeIMG()\\nAmazon Transcribe\\n\" as transcribe\r\n\r\n\t\tvideo -d-> e1: <$Callout_2>\r\n\t\te1 -[hidden]r-> mediaconvert\r\n\t\tmediaconvert -[hidden]r-> transcribe\r\n\t\tmediaconvert -u-> audio: <$Callout_3>\r\n\t\ttranscribe -u-> transcript: <$Callout_4>\r\n\r\n\t\tStepFunctionsWorkflowGroup(sfw) {\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\nextract audio\" as sfw1\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\ntranscribe audio\" as sfw2\r\n\r\n\t\t\te1 -r-> sfw1: 起動\r\n\t\t\tsfw1 -r-> sfw2\r\n\t\t\tsfw1 -u-> mediaconvert\r\n\t\t\tsfw2 -u-> transcribe\r\n\t\t}\r\n\t}\r\n}\r\n@enduml\r\n```\r\n\r\n## 他のUML図\r\n\r\nPlantUMLで書ける他のUML図の例も紹介しておきます。\r\n\r\n### シーケンス図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nparticipant User\r\n\r\nUser -> A: DoWork\r\nactivate A #FFBBBB\r\n\r\nA -> A: Internal call\r\nactivate A #DarkSalmon\r\n\r\nA -> B: << createRequest >>\r\nactivate B\r\n\r\nB --> A: RequestCreated\r\ndeactivate B\r\ndeactivate A\r\nA -> User: Done\r\ndeactivate A\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nparticipant User\r\n\r\nUser -> A: DoWork\r\nactivate A #FFBBBB\r\n\r\nA -> A: Internal call\r\nactivate A #DarkSalmon\r\n\r\nA -> B: << createRequest >>\r\nactivate B\r\n\r\nB --> A: RequestCreated\r\ndeactivate B\r\ndeactivate A\r\nA -> User: Done\r\ndeactivate A\r\n\r\n@enduml\r\n```\r\n\r\n### ユースケース図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nUser -> (Start)\r\nUser --> (Use the application) : A small label\r\n\r\n:Main Admin: ---> (Use the application) : This is\\nyet another\\nlabel\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nUser -> (Start)\r\nUser --> (Use the application) : A small label\r\n\r\n:Main Admin: ---> (Use the application) : This is\\nyet another\\nlabel\r\n\r\n@enduml\r\n```\r\n\r\n### クラス図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nclass Student {\r\n  Name\r\n}\r\nStudent \"0..*\" - \"1..*\" Course\r\n(Student, Course) .. Enrollment\r\n\r\nclass Enrollment {\r\n  drop()\r\n  cancel()\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nclass Student {\r\n  Name\r\n}\r\nStudent \"0..*\" - \"1..*\" Course\r\n(Student, Course) .. Enrollment\r\n\r\nclass Enrollment {\r\n  drop()\r\n  cancel()\r\n}\r\n@enduml\r\n```\r\n\r\n### アクティビティ図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nstart\r\nrepeat\r\n  :Test something;\r\n    if (Something went wrong?) then (no)\r\n      #palegreen:OK;\r\n      break\r\n    endif\r\n    ->NOK;\r\n    :Alert \"Error with long text\";\r\nrepeat while (Something went wrong with long text?) is (yes) not (no)\r\n->//merged step//;\r\n:Alert \"Success\";\r\nstop\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nstart\r\nrepeat\r\n  :Test something;\r\n    if (Something went wrong?) then (no)\r\n      #palegreen:OK;\r\n      break\r\n    endif\r\n    ->NOK;\r\n    :Alert \"Error with long text\";\r\nrepeat while (Something went wrong with long text?) is (yes) not (no)\r\n->//merged step//;\r\n:Alert \"Success\";\r\nstop\r\n@enduml\r\n```\r\n\r\n### コンポーネント図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n\r\npackage \"Some Group\" {\r\n  HTTP - [First Component]\r\n  [Another Component]\r\n}\r\n\r\nnode \"Other Groups\" {\r\n  FTP - [Second Component]\r\n  [First Component] --> FTP\r\n}\r\n\r\ncloud {\r\n  [Example 1]\r\n}\r\n\r\n\r\ndatabase \"MySql\" {\r\n  folder \"This is my folder\" {\r\n    [Folder 3]\r\n  }\r\n  frame \"Foo\" {\r\n    [Frame 4]\r\n  }\r\n}\r\n\r\n\r\n[Another Component] --> [Example 1]\r\n[Example 1] --> [Folder 3]\r\n[Folder 3] --> [Frame 4]\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n\r\npackage \"Some Group\" {\r\n  HTTP - [First Component]\r\n  [Another Component]\r\n}\r\n\r\nnode \"Other Groups\" {\r\n  FTP - [Second Component]\r\n  [First Component] --> FTP\r\n}\r\n\r\ncloud {\r\n  [Example 1]\r\n}\r\n\r\n\r\ndatabase \"MySql\" {\r\n  folder \"This is my folder\" {\r\n    [Folder 3]\r\n  }\r\n  frame \"Foo\" {\r\n    [Frame 4]\r\n  }\r\n}\r\n\r\n\r\n[Another Component] --> [Example 1]\r\n[Example 1] --> [Folder 3]\r\n[Folder 3] --> [Frame 4]\r\n\r\n@enduml\r\n```\r\n\r\n### マインドマップ図\r\n\r\n````markdown\r\n```plantuml\r\n@startmindmap\r\n+ root node\r\n++ some first level node\r\n+++_ second level node\r\n+++_ another second level node\r\n+++_ foo\r\n+++_ bar\r\n+++_ foobar\r\n++_ another first level node\r\n-- some first right level node\r\n--_ another first right level node\r\n@endmindmap\r\n```\r\n````\r\n\r\n```plantuml\r\n@startmindmap\r\n+ root node\r\n++ some first level node\r\n+++_ second level node\r\n+++_ another second level node\r\n+++_ foo\r\n+++_ bar\r\n+++_ foobar\r\n++_ another first level node\r\n-- some first right level node\r\n--_ another first right level node\r\n@endmindmap\r\n```\r\n\r\n### 状態図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nscale 600 width\r\n\r\n[*] -> State1\r\nState1 --> State2 : Succeeded\r\nState1 --> [*] : Aborted\r\nState2 --> State3 : Succeeded\r\nState2 --> [*] : Aborted\r\nstate State3 {\r\n  state \"Accumulate Enough Data\\nLong State Name\" as long1\r\n  long1 : Just a test\r\n  [*] --> long1\r\n  long1 --> long1 : New Data\r\n  long1 --> ProcessData : Enough Data\r\n}\r\nState3 --> State3 : Failed\r\nState3 --> [*] : Succeeded / Save Result\r\nState3 --> [*] : Aborted\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nscale 600 width\r\n\r\n[*] -> State1\r\nState1 --> State2 : Succeeded\r\nState1 --> [*] : Aborted\r\nState2 --> State3 : Succeeded\r\nState2 --> [*] : Aborted\r\nstate State3 {\r\n  state \"Accumulate Enough Data\\nLong State Name\" as long1\r\n  long1 : Just a test\r\n  [*] --> long1\r\n  long1 --> long1 : New Data\r\n  long1 --> ProcessData : Enough Data\r\n}\r\nState3 --> State3 : Failed\r\nState3 --> [*] : Succeeded / Save Result\r\nState3 --> [*] : Aborted\r\n\r\n@enduml\r\n```\r\n\r\n### オブジェクト図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml PERT\r\nleft to right direction\r\n' Horizontal lines: -->, <--, <-->\r\n' Vertical lines: ->, <-, <->\r\ntitle PERT: Project Name\r\n\r\nmap Kick.Off {\r\n}\r\nmap task.1 {\r\n    Start => End\r\n}\r\nmap task.2 {\r\n    Start => End\r\n}\r\nmap task.3 {\r\n    Start => End\r\n}\r\nmap task.4 {\r\n    Start => End\r\n}\r\nmap task.5 {\r\n    Start => End\r\n}\r\nKick.Off --> task.1 : Label 1\r\nKick.Off --> task.2 : Label 2\r\nKick.Off --> task.3 : Label 3\r\ntask.1 --> task.4\r\ntask.2 --> task.4\r\ntask.3 --> task.4\r\ntask.4 --> task.5 : Label 4\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml PERT\r\nleft to right direction\r\n' Horizontal lines: -->, <--, <-->\r\n' Vertical lines: ->, <-, <->\r\ntitle PERT: Project Name\r\n\r\nmap Kick.Off {\r\n}\r\nmap task.1 {\r\n    Start => End\r\n}\r\nmap task.2 {\r\n    Start => End\r\n}\r\nmap task.3 {\r\n    Start => End\r\n}\r\nmap task.4 {\r\n    Start => End\r\n}\r\nmap task.5 {\r\n    Start => End\r\n}\r\nKick.Off --> task.1 : Label 1\r\nKick.Off --> task.2 : Label 2\r\nKick.Off --> task.3 : Label 3\r\ntask.1 --> task.4\r\ntask.2 --> task.4\r\ntask.3 --> task.4\r\ntask.4 --> task.5 : Label 4\r\n@enduml\r\n```\r\n\r\n### ネットワーク図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n!include <office/Servers/application_server>\r\n!include <office/Servers/database_server>\r\n\r\nnwdiag {\r\n  network dmz {\r\n      address = \"210.x.x.x/24\"\r\n\r\n      // set multiple addresses (using comma)\r\n      web01 [address = \"210.x.x.1, 210.x.x.20\",  description = \"<$application_server>\\n web01\"]\r\n      web02 [address = \"210.x.x.2\",  description = \"<$application_server>\\n web02\"];\r\n  }\r\n  network internal {\r\n      address = \"172.x.x.x/24\";\r\n\r\n      web01 [address = \"172.x.x.1\"];\r\n      web02 [address = \"172.x.x.2\"];\r\n      db01 [address = \"172.x.x.100\",  description = \"<$database_server>\\n db01\"];\r\n      db02 [address = \"172.x.x.101\",  description = \"<$database_server>\\n db02\"];\r\n  }\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n!include <office/Servers/application_server>\r\n!include <office/Servers/database_server>\r\n\r\nnwdiag {\r\n  network dmz {\r\n      address = \"210.x.x.x/24\"\r\n\r\n      // set multiple addresses (using comma)\r\n      web01 [address = \"210.x.x.1, 210.x.x.20\",  description = \"<$application_server>\\n web01\"]\r\n      web02 [address = \"210.x.x.2\",  description = \"<$application_server>\\n web02\"];\r\n  }\r\n  network internal {\r\n      address = \"172.x.x.x/24\";\r\n\r\n      web01 [address = \"172.x.x.1\"];\r\n      web02 [address = \"172.x.x.2\"];\r\n      db01 [address = \"172.x.x.100\",  description = \"<$database_server>\\n db01\"];\r\n      db02 [address = \"172.x.x.101\",  description = \"<$database_server>\\n db02\"];\r\n  }\r\n}\r\n@enduml\r\n```\r\n\r\n### ガントチャート図\r\n\r\n````markdown\r\n```plantuml\r\n@startgantt\r\n<style>\r\nganttDiagram {\r\n\ttask {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t}\r\n\tmilestone {\r\n\t\tFontColor blue\r\n\t\tFontSize 25\r\n\t\tFontStyle italic\r\n\t\tBackGroundColor yellow\r\n\t\tLineColor red\r\n\t}\r\n\tnote {\r\n\t\tFontColor DarkGreen\r\n\t\tFontSize 10\r\n\t\tLineColor OrangeRed\r\n\t}\r\n\tarrow {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t\tLineStyle 8.0;13.0\r\n\t\tLineThickness 3.0\r\n\t}\r\n\tseparator {\r\n\t\tBackgroundColor lightGreen\r\n\t\tLineStyle 8.0;3.0\r\n\t\tLineColor red\r\n\t\tLineThickness 1.0\r\n\t\tFontSize 16\r\n\t\tFontStyle bold\r\n\t\tFontColor purple\r\n\t\tMargin 5\r\n\t\tPadding 20\r\n\t}\r\n\ttimeline {\r\n\t    BackgroundColor Bisque\r\n\t}\r\n\tclosed {\r\n\t\tBackgroundColor pink\r\n\t\tFontColor red\r\n\t}\r\n}\r\n</style>\r\nProject starts the 2020-12-01\r\n\r\n[Task1] lasts 10 days\r\nsunday are closed\r\n\r\nnote bottom\r\n  memo1 ...\r\n  memo2 ...\r\n  explanations1 ...\r\n  explanations2 ...\r\nend note\r\n\r\n[Task2] lasts 20 days\r\n[Task2] starts 10 days after [Task1]'s end\r\n-- Separator title --\r\n[M1] happens on 5 days after [Task1]'s end\r\n\r\n<style>\r\n\tseparator {\r\n\t    LineColor black\r\n\t\tMargin 0\r\n\t\tPadding 0\r\n\t}\r\n</style>\r\n\r\n-- end --\r\n@endgantt\r\n```\r\n````\r\n\r\n```plantuml\r\n@startgantt\r\n<style>\r\nganttDiagram {\r\n\ttask {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t}\r\n\tmilestone {\r\n\t\tFontColor blue\r\n\t\tFontSize 25\r\n\t\tFontStyle italic\r\n\t\tBackGroundColor yellow\r\n\t\tLineColor red\r\n\t}\r\n\tnote {\r\n\t\tFontColor DarkGreen\r\n\t\tFontSize 10\r\n\t\tLineColor OrangeRed\r\n\t}\r\n\tarrow {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t\tLineStyle 8.0;13.0\r\n\t\tLineThickness 3.0\r\n\t}\r\n\tseparator {\r\n\t\tBackgroundColor lightGreen\r\n\t\tLineStyle 8.0;3.0\r\n\t\tLineColor red\r\n\t\tLineThickness 1.0\r\n\t\tFontSize 16\r\n\t\tFontStyle bold\r\n\t\tFontColor purple\r\n\t\tMargin 5\r\n\t\tPadding 20\r\n\t}\r\n\ttimeline {\r\n\t    BackgroundColor Bisque\r\n\t}\r\n\tclosed {\r\n\t\tBackgroundColor pink\r\n\t\tFontColor red\r\n\t}\r\n}\r\n</style>\r\nProject starts the 2020-12-01\r\n\r\n[Task1] lasts 10 days\r\nsunday are closed\r\n\r\nnote bottom\r\n  memo1 ...\r\n  memo2 ...\r\n  explanations1 ...\r\n  explanations2 ...\r\nend note\r\n\r\n[Task2] lasts 20 days\r\n[Task2] starts 10 days after [Task1]'s end\r\n-- Separator title --\r\n[M1] happens on 5 days after [Task1]'s end\r\n\r\n<style>\r\n\tseparator {\r\n\t    LineColor black\r\n\t\tMargin 0\r\n\t\tPadding 0\r\n\t}\r\n</style>\r\n\r\n-- end --\r\n@endgantt\r\n```\r\n\r\nPlantUML記法なら簡単にグラフを書けて便利なので、どんどん使っていきたいと思います。\r\n","tags":["PlantUML","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions"],"category":"blog"},{"slug":"posts/onion-website","date":"2023-02-04T11:14:43+0900","draft":false,"title":"OnionドメインのウェブサイトをDockerで構築して公開する","description":"OnionドメインのウェブサイトをDockerで構築して公開したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nOnionドメインのウェブサイトをDockerで構築して公開したいこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\nなお、このレポートを書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873117763?&linkCode=ll1&tag=nishidemasami-22&linkId=7b0a0e16eab9786a7b21bcf0d7c4e768&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >O'Reilly Docker</a>を参考にしました。\r\n\r\n## 最小構成で作る\r\n\r\n構築の土台となる部分を最小構成で作成します。  \r\n最小構成で一旦動かしてみることで動きなども理解できます。\r\n\r\n### Docker\r\n\r\nまず`compose.yaml`を作ります。\r\n\r\n<div class=\"preshiki\">compose.yaml</div>\r\n\r\n```yaml\r\nversion: '3.8'\r\n\r\nservices:\r\n  nginx:\r\n    image: nginx:alpine\r\n    networks:\r\n      - tor_network\r\n    volumes:\r\n      - ./htdocs:/usr/share/nginx/html:ro\r\n    restart: unless-stopped\r\n  tor:\r\n    build:\r\n      dockerfile: ./tor/Dockerfile\r\n    networks:\r\n      - tor_network\r\n      - front\r\n    volumes:\r\n      - ./data:/var/lib/tor\r\n      - ./tor/settings:/etc/tor\r\n    restart: unless-stopped\r\n\r\nnetworks:\r\n  front:\r\n  tor_network:\r\n    internal: true\r\n```\r\n\r\nネットワークは、外部に接続するための`front`ネットワークと、外部とつながっていない内部だけで独立したネットワークの`tor_network`を作成します。  \r\n`tor`コンテナだけ外部と接続し、`nginx`コンテナを外部と遮断し、そして`tor`コンテナと`nginx`コンテナを`tor_network`ネットワークでつなげることにします。  \r\n\r\nネットワーク図に表すと以下のようになります。\r\n\r\n```plantuml\r\n@startuml\r\n\r\n!define ICONURL https://raw.githubusercontent.com/Roemer/plantuml-office/master/office2014\r\n!includeurl ICONURL/Servers/database_server.puml\r\n!includeurl ICONURL/Servers/application_server.puml\r\n!includeurl ICONURL/Concepts/firewall_orange.puml\r\n\r\nnwdiag {\r\n\tinternet [ shape = cloud];\r\n\tinternet -- 仮想ブリッジ;\r\n\r\n\tgroup {\r\n    color = \"#CCFFCC\";\r\n    description = \"Docker\\n内部\\n \";\r\n\r\n    nginx;\r\n    tor;\r\n  }\r\n  network front {\r\n      tor [description = \"<&cog*4>\\ntor\"];\r\n      仮想ブリッジ [description = \"Docker\\n仮想ブリッジ\"];\r\n  }\r\n  network tor_network {\r\n      nginx [address = \"nginx\",description = \"<$application_server>\\n nginx\"];\r\n      tor [description = \"<&cog*4>\\ntor\"];\r\n  }\r\n}\r\n@enduml\r\n```\r\n\r\n`nginx`コンテナは、余計なものが入っていない`nginx:alpine`を使用します。  \r\n`tor`コンテナは、後述の`Dockerfile`を使用します。  \r\n\r\nまた、どちらも`restart: unless-stopped`で、落ちたら再起動するようにしています。不要だったかもしれません。\r\n\r\n### Tor\r\n\r\n`tor`コンテナのDockerfileは、`alpine:latest`にtorを追加して起動するだけのものです。\r\n\r\n<div class=\"preshiki\">tor/Dockerfile</div>\r\n\r\n```text\r\nFROM alpine:latest\r\n\r\nRUN apk update\r\nRUN apk add tor\r\n\r\nCMD [\"tor\", \"-f\", \"/etc/tor/torrc\"]\r\n```\r\n\r\ntorの設定ファイルである`torrc`で、80ポートへの接続を`nginx`コンテナに向けています。  \r\n※Dockerネットワーク内ではコンテナ名で名前解決をすることができる\r\n\r\n<div class=\"preshiki\">tor/settings/torrc</div>\r\n\r\n```text\r\nSocksPort 0\r\nHiddenServiceDir /var/lib/tor/hidden_service/\r\nHiddenServicePort 80 nginx:80\r\n```\r\n\r\n誰かの踏み台にされるのだけは防ぐために`SocksPort 0`の設定をしていますが、自分でもTorプロクシとして利用したい場合はここを`SocksPort 0.0.0.0:9150`として、`Dockerfile`で`EXPOSE 9150`をしてから`compose.yaml`でtorのportsに`\"9150:9150\"`を追加することでSOCKSホストとして利用できます。\r\n\r\n### Nginx\r\n\r\nNginxは`nginx:alpine`イメージをそのまま使います。  \r\nなにも表示されないと動いているかどうかわかりにくいので`index.html`を配置しておきます。\r\n\r\n<div class=\"preshiki\">htdocs/index.html</div>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>docker hidden service test title</title>\r\n  </head>\r\n  <body>\r\n    <div>docker hidden service test body div</div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n以上で最小構成は作成完了です。\r\n\r\n## 起動する\r\n\r\nDockerは普通に`docker-compose up -d`コマンドで起動します。\r\n\r\n### 起動確認(Onionドメインの疎通確認)\r\n\r\n正常に起動すると、`data/hidden_service/hostname`に以下のようなファイルが出力されています。\r\n\r\n<pre class=\"preshiki\">data/hidden_service/hostname</pre>\r\n\r\n```text\r\nkxal3j4zblhjt4jinnbly6icciqbh2ihq4u2opsu4qhqyqazwsgaq3ad.onion\r\n```\r\n\r\nこのアドレスにTorブラウザなどで接続し、作成したindex.htmlが表示されていることを確認します。\r\n\r\n<div class=\"note alert\">\r\n\r\n<i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i> WindowsでDockerを立てている場合、ここで既に`data/hidden_service`が存在すると、以下のようなエラーメッセージが出て終了してしまいます。\r\n\r\n```text example-bad\r\n[notice] Tor 0.4.7.13 running on Linux with Libevent 2.1.12-stable, OpenSSL 3.0.7, Zlib 1.2.13, Liblzma 5.2.9, Libzstd 1.5.2 and Unknown N/A as libc.\r\n[notice] Tor can't help you if you use it wrong! Learn how to be safe at https://support.torproject.org/faq/staying-anonymous/\r\n[notice] Read configuration file \"/etc/tor/torrc\".\r\n[warn] Permissions on directory /var/lib/tor/hidden_service/ are too permissive.\r\n[warn] Failed to parse/validate config: Failed to configure rendezvous options. See logs for details.\r\n[err] Reading config failed--see warnings above.\r\n```\r\n\r\n既にWindows側の既存のディレクトリをDockerでマウントするとディレクトリのパーミッションが777になります。  \r\nそのためSSH接続時の証明書と同様に、パーミッションがあまりにもオープンすぎるとTorが判断するとエラーで止まるようです。  \r\nなので既存の`hidden_service`を使用したい場合は、`tor/Dockerfile`内で`COPY`したり`chmod -R 700 /var/lib/tor/hidden_service/`を叩く必要がありそうですが、今回は最小構成だけ作りたいのでここでは説明を省きます。\r\n\r\n</div>\r\n\r\n<div><img srcset=\"/assets/images/tor-browser-preview.webp\" alt=\"Torブラウザで表示できたところ\"/><div class=\"photo-space-detail\">Torブラウザで表示できたところ</div></div>\r\n\r\n無事に動いていることが確認できました。\r\n\r\n`nginx`コンテナは外部に接続できないようになっていますから、セキュリティは高いです。  \r\nもし更にセキュリティを向上させるのであれば、`nginx`コンテナや`tor`コンテナを`distroless`や`scratch`でマルチステージビルドで組み立てると良いでしょう。その方法についてはまた後日投稿します。\r\n","tags":["Onion Service","Tor","Docker","Tor Hidden Service","Nginx"],"category":"blog"},{"slug":"articles/react-leaflet-egnlish","date":"2023-01-28T12:00:00+0900","draft":false,"title":"Reactで地図上に地名を英語で表示する","description":"Reactで地図上に地名を英語で表示したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { useMemo } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\n\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `Next.jsとReactとTypeScriptで地図に地名を英字表記で表示したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873119049?&linkCode=ll1&tag=nishidemasami-22&linkId=269abe7d00fb75538542192fd6ea40b4&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n[前回のレポート](https://nishidemasami.github.io/articles/react-leaflet/)の続きです。\n\n国土地理院が、地図データをgeojson形式で公開してくれています。  \n[ベクトルタイルとその提供実験について 国土地理院](https://maps.gsi.go.jp/development/vt.html)  \n地名を多言語で表記するためのデータも公開してくれています。\n[国土地理院地図 多言語表記の地図 国土地理院](https://www.gsi.go.jp/kihonjohochousa/multilingual.html)  \n仕様も[PDF](https://www.gsi.go.jp/common/000212661.pdf)で見られます。\n\nこのデータも、国土地理院の地図と同様に、国土交通省国土地理院地図は利用規約を守る限り自由に使えます。  \n利用規約は以下の通りです。  \n国土地理院コンテンツ利用規約 国土地理院:<https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html>\n\n今回このデータを使って、地図上に地名などを表示するように作ってみました。  \n文字の色やサイズ、日本語と英語と非表示を切り替えられるように作ってみました。\n\nなお、本当はgeojsonには「地物種別コード(ftCode)」や「注記分類コード(annoCtg)」などで、どれが都道府県名だとかどれが空港名だとか、どれが河川名でどれが駅名だとかがコードでデータに入っていて、仕様も[PDF](https://maps.gsi.go.jp/help/pdf/vector/dataspec.pdf)で公開されているのですが、ご覧の通り(少なくとも個人開発でやる分には)やってられないので、今回は全部一緒くたに表示してみます。\n\nさて、実際に実装してみたのが ↓ これです。\n`;\n\nconst secondArticle = `\n先述の通り、都道府県名から河川名まで一緒くたに表示されているので見にくいですが、無事に表示することができました！  \n用途に合わせてもう少しチューニングしてゆけば、もっと見やすくなると思います。\n\nこれが ↓ この今回のコードです。\n\\`\\`\\`tsx\nimport React from 'react';\n\nimport { TextDecrease, TextIncrease } from '@mui/icons-material';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Slider,\n  Stack,\n  Typography,\n} from '@mui/material';\nimport { Util, geoJSON, marker, divIcon } from 'leaflet';\nimport { SketchPicker } from 'react-color';\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst languages = ['English', '日本語', '地名非表示'];\n\nconst MapController: React.FC<{\n  setZoom: (zoom: number) => void;\n}> = ({ setZoom }) => {\n  const map = useMap();\n  React.useEffect(() => {\n    map.on('zoomend', () => {\n      setZoom(map.getZoom());\n    });\n  }, [map, setZoom]);\n  return (\n    <TileLayer\n      attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\" target=\"_blank\">地理院タイル</a>'\n      url=\"https://maps.gsi.go.jp/xyz/pale2/{z}/{x}/{y}.png\"\n      eventHandlers={{\n        tileload: async (event) => {\n          const response = await fetch(\n            Util.template(\n              'https://cyberjapandata.gsi.go.jp/xyz/experimental_multil/{z}/{x}/{y}.geojson',\n              event.coords\n            )\n          );\n          if (!response.ok) return;\n          const geojson = await response.json();\n          if (!geojson) return;\n          const zoom = event.coords.z;\n          geoJSON(geojson, {\n            filter: (feature) => feature.properties.name,\n            pointToLayer: (feature, latlng) =>\n              marker(latlng, {\n                icon: divIcon({\n                  className: 'gsi-div-icon font-sans',\n                  html:\n                    \\`<span class=\"English marker zoomLevel\\${zoom}marker\">\\${feature.properties.name}</span>\\` +\n                    \\`<span class=\"日本語 marker zoomLevel\\${zoom}marker\">\\${feature.properties.knj}</span>\\`,\n                }),\n              }),\n          }).addTo(map);\n        },\n      }}\n    />\n  );\n};\n\nconst LeafletEnglishDemo = (): JSX.Element => {\n  const [zoom, setZoom] = React.useState<number>(7);\n  const [fontSize, setFontSize] = React.useState<number>(12);\n  const [color, setColor] = React.useState<string>('#000000');\n  const [language, setLanguage] = React.useState<string>('English');\n\n  return (\n    <div className={\\`allZoomLevel zoomLevel\\${zoom}\\`}>\n      <style jsx>\n        {\\`\n          :global(.allZoomLevel .marker) {\n            display: none;\n            color: \\${color};\n            font-size: \\${fontSize}px;\n            font-weight: bold;\n            text-shadow: -1px -1px #fff, 1px -1px #fff, -1px 1px #fff,\n              1px 1px #fff;\n            background: transparent;\n            line-height: \\${fontSize}px;\n            white-space: nowrap;\n          }\n          .allZoomLevel.zoomLevel\\${zoom}\n            :global(.zoomLevel\\${zoom}marker.\\${language}) {\n            display: block;\n          }\n        \\`}\n      </style>\n      <SketchPicker\n        className=\"float-left m-2\"\n        color={color}\n        disableAlpha\n        onChangeComplete={(value) => {\n          setColor(value.hex);\n        }}\n      />\n      <Typography className=\"m-1\">地図上の地名の文字設定</Typography>\n      <Stack\n        className=\"mb-1 w-1/2\"\n        spacing={2}\n        direction=\"row\"\n        alignItems=\"center\"\n      >\n        <TextDecrease />\n        <Slider\n          value={fontSize}\n          min={10}\n          max={50}\n          onChange={(_, newValue) => {\n            if (typeof newValue === 'number') setFontSize(newValue);\n          }}\n        />\n        <TextIncrease />\n      </Stack>\n      <FormControl margin=\"normal\">\n        <InputLabel>Language</InputLabel>\n        <Select\n          value={language}\n          label=\"Language\"\n          onChange={(event) => {\n            setLanguage(event.target.value);\n          }}\n        >\n          {languages.map((value) => (\n            <MenuItem key={value} value={value}>\n              {value}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <MapContainer\n        center={[35.0585904, 137.5191176]}\n        className=\"h-96 w-full\"\n        zoom={7}\n        minZoom={5}\n        maxZoom={17}\n        scrollWheelZoom={true}\n      >\n        <MapController setZoom={setZoom} />\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default LeafletEnglishDemo;\n\\`\\`\\`\nよかったら参考にしてみてください！(なげやり)\n`;\n\nconst ReactLeafletTest = (props: ReactSoundTestProps) => {\n\tconst LeafletDemoComponent = useMemo(\n\t\t() =>\n\t\t\tdynamic(() => import('../../components/Leaflet/LeafletEnglishDemo'), {\n\t\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\t\tssr: false,\n\t\t\t}),\n\t\t[],\n\t);\n\treturn (\n\t\t<Main\n\t\t\trecents={props.recents}\n\t\t\ttags={props.tags}\n\t\t\tmeta={\n\t\t\t\t<Meta\n\t\t\t\t\ttitle=\"Reactで地図上に地名を英語で表示する\"\n\t\t\t\t\tdescription=\"Reactで地図上に地名を英語で表示したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t\t/>\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"content-title\">Reactで地図上に地名を英語で表示する</h1>\n\t\t\t<div className=\"content-date\">\n\t\t\t\tPosted {format(new Date('2023-01-28T12:00:00+0900'), 'LLLL d, yyyy')}\n\t\t\t</div>\n\t\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t\t{[\n\t\t\t\t\t'TypeScript',\n\t\t\t\t\t'React',\n\t\t\t\t\t'OpenStreetMap',\n\t\t\t\t\t'国土地理院地図',\n\t\t\t\t\t'leaflet',\n\t\t\t\t\t'Next.js',\n\t\t\t\t].map((tag) => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\t\tkey={tag}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t\t#{tag}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<Content>\n\t\t\t\t<div>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t\t<LeafletDemoComponent />\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\n\t\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t\t</Main>\n\t);\n};\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactLeafletTest;\n","tags":["TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js"],"category":"blog"},{"slug":"articles/react-leaflet","date":"2023-01-21T01:04:03+0900","draft":false,"title":"Reactで国土地理院地図やOpenStreetMapなどを表示する","description":"ReactとTypeScriptで国土地理院地図やOpenStreetMapなどを表示したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { useMemo } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\n\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873119049?&linkCode=ll1&tag=nishidemasami-22&linkId=269abe7d00fb75538542192fd6ea40b4&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\nGoogle Mapsが2018年の7月頃に有料になってからかなり経ちました。  \nいまさらGoogle Mapsの代わりを探している人はいないと思いますが、あれから色々とWebの事情も変わったので自分用にメモの意味も込めて書いています。\n\n「画像タイル地図」を公開しているWebサービスはたくさんあります。  \nですが無料で自由に使えるものは意外と少なく、国土地理院やOpenStreetMapは貴重な選択肢の一つだと思います。  \n(「画像タイル地図」ではなく「ベクトルタイル地図」も国土地理院は(実験的に)提供しているので次のレポートで説明します。)\n\n### 国土地理院地図\n\n国土交通省国土地理院地図は利用規約を守る限り自由に使えます。  \n利用規約は以下です。  \n国土地理院コンテンツ利用規約 国土地理院:<https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html>\n\n### OpenStreetMap\n\nOpenStreetMapもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nOpenStreetMap著作権とライセンス:<https://www.openstreetmap.org/copyright/ja>  \nOpenStreetMapは現地の言語(日本はもちろん日本語)を表示しているみたいでした。  \nただ、ドイツ語版が日本では英語を併記しているようなので試しに表示してみます。\n\n### Stamen Maps\n\nStamen MapsもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nStamen Maps:<http://maps.stamen.com/>  \n\n### OpenTopoMap\n\nOpenTopoMapは、OSMやSRTMのデータから地形図を表示するようにした地図です。ライセンスはCC-BY-SAです。  \nOpenTopoMap:<opentopomap.org>  \n\n今回は、この4つのフリーの地図から5種類の地図を表示してみたいと思います。\n\n地図描画にはLeafletを使用します。\n\nライブラリとしては現在最新の\\`leaflet@1.9.3\\`と\\`react-leaflet@4.2.0\\`、それからTypeScript用の型定義として\\`@types/leaflet@1.9.0\\`を利用しています。  \n※react-leafletはバージョンがv4にメジャーバージョンアップされてからまだ1年も経っておらず、ネット上にもv3の情報ばかりですが最近v4の情報も少しずつ増えてきています。僕もこのことに困っていたので後の参考になるようにこのレポートを書いています。\n\n必要なnpm installは以下の通りです。TypeScript用にleafletの型定義が公開されています。react-leafletは最初から型定義が含まれています。\n\n\\`\\`\\`bash\nnpm install leaflet react-leaflet\nnpm install -D @types/leaflet\n\\`\\`\\`\n\n以上で実装のための説明は終了ですが、ただ地図を表示するだけだとつまらないので今回は東海道五十三次の場所をピンで表示して、セレクトボックスで選択したらその場所に動くようにしてみます。  \nそのための\\`@mui/material\\`も入れています。\n\n実際に実装してみたのが ↓ これです。\n`;\n\nconst secondArticle = `\n\n書いたのが ↓ この今回のコードです。\n\\`\\`\\`tsx\nimport React from 'react';\n\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { LatLngExpression, Icon } from 'leaflet';\nimport PinIcon from 'leaflet/dist/images/marker-icon.png';\nimport { TileLayer, MapContainer, Marker, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst merkerIcon = new Icon({\n  iconUrl: PinIcon.src,\n  iconAnchor: [13, 41],\n});\n\nconst maps = [\n  {\n    name: 'OpenStreetMap',\n    url: 'https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png',\n    attribution:\n      'Daten von <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> - Veröffentlicht unter <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>',\n  },\n  {\n    name: '国土地理院地図',\n    url: 'https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',\n    attribution:\n      '<a href=\"https://maps.gsi.go.jp/development/ichiran.html\" target=\"_blank\">地理院タイル</a>',\n  },\n  {\n    name: 'OpenStreetMap(日本語版)',\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  },\n  {\n    name: 'Stamen Maps(Terrain)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'Stamen Maps(Toner)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'OpenTopoMap',\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributions, <a href=\"http://viewfinderpanoramas.org/\">SRTM</a> | map style: © <a href=\"https://opentopomap.org/#map=15/35.68374/139.75330\">OpenTopoMap</a>',\n  },\n];\nconst places: {\n  name: string;\n  latlng: LatLngExpression;\n}[] = [\n  { name: '日本橋', latlng: [35.6836111111111, 139.774444444444] },\n  { name: '品川宿', latlng: [35.6219444444444, 139.739166666667] },\n  { name: '川崎宿', latlng: [35.5355555555556, 139.707777777778] },\n  { name: '神奈川宿', latlng: [35.4727777777778, 139.632277777778] },\n  { name: '保ヶ谷宿', latlng: [35.4440277777778, 139.595555555556] },\n  { name: '戸塚宿', latlng: [35.3950277777778, 139.529861111111] },\n  { name: '藤沢宿', latlng: [35.3456666666667, 139.486305555556] },\n  { name: '平塚宿', latlng: [35.3272777777778, 139.337805555556] },\n  { name: '大磯宿', latlng: [35.309, 139.315305555556] },\n  { name: '小田原宿', latlng: [35.2487222222222, 139.161027777778] },\n  { name: '箱根宿', latlng: [35.1904166666667, 139.026361111111] },\n  { name: '三島宿', latlng: [35.11925, 138.914472222222] },\n  { name: '沼津宿', latlng: [35.1001111111111, 138.857416666667] },\n  { name: '原宿', latlng: [35.1255277777778, 138.797333333333] },\n  { name: '吉原宿', latlng: [35.1627777777778, 138.685638888889] },\n  { name: '蒲原宿', latlng: [35.1199722222222, 138.605472222222] },\n  { name: '由比宿', latlng: [35.1076111111111, 138.567472222222] },\n  { name: '興津宿', latlng: [35.0498333333333, 138.519555555556] },\n  { name: '江尻宿', latlng: [35.0198888888889, 138.480861111111] },\n  { name: '府中宿', latlng: [34.9749166666667, 138.387638888889] },\n  { name: '鞠子宿', latlng: [34.9494166666667, 138.342444444444] },\n  { name: '岡部宿', latlng: [34.9188333333333, 138.282666666667] },\n  { name: '藤枝宿', latlng: [34.8698055555556, 138.252722222222] },\n  { name: '島田宿', latlng: [34.8328055555556, 138.175861111111] },\n  { name: '金谷宿', latlng: [34.8228611111111, 138.129277777778] },\n  { name: '日坂宿', latlng: [34.8041388888889, 138.075361111111] },\n  { name: '掛川宿', latlng: [34.7729166666667, 138.015888888889] },\n  { name: '袋井宿', latlng: [34.7474722222222, 137.923222222222] },\n  { name: '見附宿', latlng: [34.7268055555556, 137.857027777778] },\n  { name: '浜松宿', latlng: [34.7051111111111, 137.731916666667] },\n  { name: '舞阪宿', latlng: [34.6843888888889, 137.608944444444] },\n  { name: '新居宿', latlng: [34.6941388888889, 137.560777777778] },\n  { name: '白須賀宿', latlng: [34.6885555555556, 137.500833333333] },\n  { name: '二川宿', latlng: [34.7230555555556, 137.464527777778] },\n  { name: '吉田宿', latlng: [34.7666388888889, 137.389722222222] },\n  { name: '御油宿', latlng: [34.8448888888889, 137.317333333333] },\n  { name: '赤坂宿', latlng: [34.8557222222222, 137.308222222222] },\n  { name: '藤川宿', latlng: [34.9110555555556, 137.222194444444] },\n  { name: '岡崎宿', latlng: [34.9579166666667, 137.169194444444] },\n  { name: '池鯉鮒宿', latlng: [35.0081111111111, 137.040944444444] },\n  { name: '鳴海宿', latlng: [35.0796666666667, 136.949805555556] },\n  { name: '宮宿', latlng: [35.1204166666667, 136.906722222222] },\n  { name: '桑名宿', latlng: [35.0687222222222, 136.6955] },\n  { name: '四日市宿', latlng: [34.9695277777778, 136.625277777778] },\n  { name: '石薬師宿', latlng: [34.9043333333333, 136.548] },\n  { name: '庄野宿', latlng: [34.8833888888889, 136.524833333333] },\n  { name: '亀山宿', latlng: [34.8543055555556, 136.454111111111] },\n  { name: '関宿', latlng: [34.8524722222222, 136.392083333333] },\n  { name: '坂下宿', latlng: [34.8885555555556, 136.354083333333] },\n  { name: '土山宿', latlng: [34.9344166666667, 136.283833333333] },\n  { name: '水口宿', latlng: [34.9655555555556, 136.1835] },\n  { name: '石部宿', latlng: [35.0100555555556, 136.054638888889] },\n  { name: '草津宿', latlng: [35.0174444444444, 135.960638888889] },\n  { name: '大津宿', latlng: [35.0059722222222, 135.861416666667] },\n  { name: '三条大橋', latlng: [35.0103333333333, 135.774361111111] },\n];\n\nconst MapController: React.FC<{ center?: LatLngExpression }> = ({ center }) => {\n  const map = useMap();\n  React.useEffect(() => {\n    if (center) {\n      map.setView(center, 13, { animate: true });\n    }\n  }, [center, map]);\n  return null;\n};\n\nconst LeafletDemo = (): JSX.Element => {\n  const [center, setCenter] = React.useState<LatLngExpression>();\n  const [mapName, setMapName] = React.useState(maps[0].name);\n  const [placeName, setPlaceName] = React.useState('');\n  const selectedMap = React.useMemo(\n    () => maps.find((value) => value.name === mapName)!,\n    [mapName]\n  );\n\n  return (\n    <>\n      <FormControl margin=\"normal\">\n        <InputLabel>地図選択</InputLabel>\n        <Select\n          value={mapName}\n          label=\"地図選択\"\n          onChange={(event) => {\n            setMapName(event.target.value);\n          }}\n        >\n          {maps.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <InputLabel>場所選択</InputLabel>\n        <Select\n          className=\"w-28\"\n          value={placeName}\n          label=\"場所選択\"\n          onChange={(event) => {\n            const selected = places.find(\n              (value) => value.name === event.target.value\n            );\n            if (selected) {\n              setPlaceName(selected.name);\n              setCenter(selected.latlng);\n            }\n          }}\n        >\n          {places.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <MapContainer\n        center={[35.0585904, 137.5191176]}\n        zoom={7}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        style={{ height: 400, width: '100%' }}\n      >\n        <MapController center={center} />\n        <TileLayer\n          attribution={selectedMap.attribution}\n          url={selectedMap.url}\n        />\n        {places.map((place) => (\n          <Marker key={place.name} position={place.latlng} icon={merkerIcon}>\n            <Popup>{place.name}</Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n    </>\n  );\n};\n\nexport default LeafletDemo;\n\\`\\`\\`\n\nなお、Next.jsでSSGでLeafletを含むページを静的に生成しようとすると\n\\`\\`\\`\nReferenceError: window is not defined\n\\`\\`\\`\nというエラーが出てしまうので、Dynamic Importで\n\\`\\`\\`tsx\nconst LeafletDemoComponent = React.useMemo(\n\t() =>\n\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\tssr: false,\n\t\t}),\n\t[]\n);\n\\`\\`\\`\nというコンポーネントを1つ挟んでブラウザへのレンダリング時に動的インポートさせて表示させるようにしました。\n`;\n\nconst ReactLeafletTest = (props: ReactSoundTestProps) => {\n\tconst LeafletDemoComponent = useMemo(\n\t\t() =>\n\t\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\t\tssr: false,\n\t\t\t}),\n\t\t[],\n\t);\n\treturn (\n\t\t<Main\n\t\t\trecents={props.recents}\n\t\t\ttags={props.tags}\n\t\t\tmeta={\n\t\t\t\t<Meta\n\t\t\t\t\ttitle=\"Reactで国土地理院地図やOpenStreetMapを表示する\"\n\t\t\t\t\tdescription=\"ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t\t/>\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"content-title\">\n\t\t\t\tReactで国土地理院地図やOpenStreetMapを表示する\n\t\t\t</h1>\n\t\t\t<div className=\"content-date\">\n\t\t\t\tPosted {format(new Date('2023-01-21T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t\t</div>\n\t\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t\t{[\n\t\t\t\t\t'TypeScript',\n\t\t\t\t\t'React',\n\t\t\t\t\t'OpenStreetMap',\n\t\t\t\t\t'国土地理院地図',\n\t\t\t\t\t'leaflet',\n\t\t\t\t\t'Next.js',\n\t\t\t\t].map((tag) => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\t\tkey={tag}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t\t#{tag}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<Content>\n\t\t\t\t<div>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t\t<LeafletDemoComponent />\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\n\t\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t\t</Main>\n\t);\n};\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactLeafletTest;\n","tags":["TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js"],"category":"blog"},{"slug":"posts/rust-fizzbuzz","date":"2022-12-31T04:58:43+0900","draft":false,"title":"RustでFizzBuzzを書く","description":"RustでFizzBuzzを書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\nRustでFizzBuzzを書いてみたいと思うこと、ありますよね。  \n僕はあるので自分用にメモです。\n\nなお、このレポートを書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Rust-%E7%AC%AC2%E7%89%88-Jim-Blandy/dp/4873119782?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=16SB3SPXD9LVL&keywords=rust&qid=1672662058&sprefix=rust+%2Caps%2C261&sr=8-4&linkCode=ll1&tag=nishidemasami-22&linkId=5f2948f4e335959907e6a8b8e22b859d&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >プログラミングRust 第2版</a>を参考にしました。\n\nとりあえず最初に結論を書いておきます。\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n以上のようになると思います。\n\n以下、解説です。\n\nまず、何も考えずにRustでFizzBuzzを書くと以下のようになると思います。\n\n<div class=\"preshiki\">main.rs</div>\n\n```rust\nfn main() {\n  (1..=15).for_each(|x| {\n    match ((x % 3) == 0, (x % 5) == 0) {\n      (true, true) => println!(\"FizzBuzz\"),\n      (true, _) => println!(\"Fizz\"),\n      (_, true) => println!(\"Buzz\"),\n      _ => println!(\"{x}\"),\n    }\n  })\n}\n```\n\n<div class=\"preshiki\">Cargo.toml</div>\n\n```toml\n[package]\nname = \"fizzbuzz\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n```\n\nここからスタートしてゆきます。\n\n最終的に、以下のようにすることをゴールとします。\n\n* テスト可能\n* 汎用的\n* ゼロコスト抽象化\n\nまずメソッドに分けてからテストを書きます。\n\n<div class=\"preshiki\">main.rs</div>\n\n```rust\nfn fizzbuzz(x: u32) -> String {\n  match ((x % 3) == 0, (x % 5) == 0) {\n    (true, true) => \"FizzBuzz\".to_string(),\n    (true, _) => \"Fizz\".to_string(),\n    (_, true) => \"Buzz\".to_string(),\n    _ => x.to_string(),\n  }\n}\n\nfn main() {\n  (1..=15).map(fizzbuzz).for_each(|x| println!(\"{x}\"))\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(fizzbuzz)\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\n次はこれをRustらしく、`enum`に[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトと[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトを実装した書き方にします。  \n[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトの[`from()`](https://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from)メソッドを実装すれば[`std::convert::Into`](https://doc.rust-lang.org/std/convert/trait.Into.html)トレイトの[`into()`](https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into)メソッドが自動で実装され、[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトの[`fmt()`](https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt)メソッドを実装すれば[`std::string::ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html)トレイトの[`to_string()`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)メソッドが自動で実装されます。  \nついでにファイルも分けます。\n\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n\n```rust\nuse std::fmt;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl From<u32> for FizzBuzz {\n  fn from(x: u32) -> FizzBuzz {\n    match ((x % 3) == 0, (x % 5) == 0) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n```\n\n<div class=\"preshiki\">src/main.rs</div>\n\n```rust\nfn main() {\n  (1..=15).map(|x| -> FizzBuzz {\n    x.into()\n  } ).map(|x| -> String {\n    x.to_string()\n  } ).for_each(|x| println!(\"{x}\"))\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(|x| -> FizzBuzz {\n      x.into()\n    } )\n    .map(|x| -> String {\n      x.to_string()\n    } )\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\nさて、`u32`では`4294967295`が最大値なのは心もとないので拡張可能にしたいと考えると思います。  \nしかし、たとえ`u32`を`u128`にしたところで`340282366920938463463374607431768211455`が最大値です。  \nこれでは十分ではないので、もっと「抽象的な数値」を扱えるようにします。\n\nfizzbuzz関数$f(x)$を定義してみます。\n\n$$$\nf(x) =\n\\begin{cases}\n  \\text{FizzBuzz} & (x \\bmod 3 = 0 \\land x \\bmod 5 = 0)\\\\\n  \\text{Fizz} & (x \\bmod 3 = 0 \\land x \\bmod 5 \\neq 0)\\\\\n  \\text{Buzz} & (x \\bmod 3 \\neq 0 \\land x \\bmod 5 = 0)\\\\\n  x & (\\text{otherwize})\\\\\n\\end{cases}\n$$$\n\nここで定義を冷静になって見てみると、$x$に対する操作は「3で割る」 「5で割る」 「割った結果を0と比較する」 「文字列に変換する」しかしていないことがわかります。  \n型で表すと以下のようなものです。\n\n```rust\nT: Rem<T, Output = U> + From<u8> + ToString,\nU: Zero,\n```\n\nつまり、`u8`で割ることができて0と比較できて文字列に変換できる値なら、どんな値でもFizzBuzzをすることができるのです。  \nCloneも合わせて先述の`from`は以下のように書けるのです。\n\n```rust\nimpl<T, U> From<T> for FizzBuzz\nwhere\n  T: Rem<T, Output = U> + Clone + From<u8> + ToString,\n  U: Zero,\n{\n  fn from(x: T) -> FizzBuzz {\n    match ((x.clone() % T::from(3)).is_zero(), (x.clone() % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n`.clone()`を何度もするのはパフォーマンス上の観点から躊躇われますし処理上特に所有権も必要としておらず借用で十分なのでこれを借用に修正すると以下のようになります。\n\n```rust\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n  T: From<u8>,\n  &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n<div class=\"note alert\">\n\n<i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i>もしここで以下のようにライフタイム`'a`の記述を書かないと…\n\n```rust example-bad\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n  T: From<u8>,\n  &T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0637]: `&` without an explicit lifetime name cannot be used here\n  --> src\\main.rs:42:5\n   |\n42 |   &T: Rem<T, Output = U> + ToString,\n   |   ^ explicit lifetime name needed here\n```\n\nwhere句で`&`を使う必要があるならライフタイムを明示的に示さないといけないのです。\n\n</div>\n\nシンプルに書くのなら、ライフタイム`'a`は高階トレイト境界を用いて以下のような書き方をすることができます。\n\n```rust\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\nこれで完成です。\n\n`num::BigUint`などもこの`T`を満たすので、これで`u128`でも扱えないような大きな数字も以下のように扱うことができるようになりました。\n\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n<div class=\"preshiki\">src/main.rs</div>\n\n```rust\nmod fizzbuzz;\n\nuse fizzbuzz::FizzBuzz;\nuse num::{BigUint, Num};\n\nfn main() {\n  num_iter::range_inclusive(\n    BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n    BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n  )\n  .map(|x: BigUint| -> String {\n    let fizzbuzz: FizzBuzz = (&x).into();\n    fizzbuzz.to_string()\n  })\n  .for_each(|x| println!(\"{x}\"));\n}\n\n#[test]\nfn test_bigint() {\n  let test_target: Vec<String> = num_iter::range_inclusive(\n    BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n    BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n  )\n  .map(|x| {\n    let buffer: FizzBuzz = (&x).into();\n    let buffer: String = buffer.to_string();\n    buffer.to_string()\n  })\n  .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"340282366920938463463374607431768211471\",\n      \"340282366920938463463374607431768211472\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211474\",\n      \"Buzz\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211477\",\n      \"340282366920938463463374607431768211478\",\n      \"Fizz\",\n      \"Buzz\",\n      \"340282366920938463463374607431768211481\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211483\",\n      \"340282366920938463463374607431768211484\",\n      \"FizzBuzz\",\n    ]\n  );\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(|x| {\n      let buffer: FizzBuzz = (&x).into();\n      let buffer: String = buffer.to_string();\n      buffer.to_string()\n    })\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\n<div class=\"preshiki\">Cargo.toml</div>\n\n```toml\n[package]\nname = \"fizzbuzz\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nnum = \"0.4.0\"\nnum-iter = \"0.1.43\"\n```\n\n<div class=\"note warn\">\n\n<i class=\"fontawesome fa fa-exclamation-circle\" style=\"color:#f7a535;font-size:20px;\" aria-hidden=\"true\"></i> ここで「そうだ！FizzBuzzのenumにString型ではなく`Box<dyn 'a + ToString>`型で動的な型の値を持たせればゼロコスト抽象化の恩恵も得られながらよりコンパイル時に最適化されるのでは？」と思うかもしれませんが…\n\n```rust example-bad\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz<'a> {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(Box<dyn 'a + ToString>),\n}\n\nimpl<'a> fmt::Display for FizzBuzz<'a> {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<'a, T, U> From<&'a T> for FizzBuzz<'a>\nwhere\n  T: 'a + From<u8>,\n  &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz<'a> {\n    let three = T::from(3);\n    match ((x % three).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(Box::new(x)),\n    }\n  }\n}\n```\n\nしかし、実際にはBoxによるメモリ操作や動的ディスパッチによるオーバーヘッドもありますし、最終的に`to_string()`で文字列を生成しているのには変わりありませんから、メリットはあまりありません。\n\nまた、これを以下のような利用をしようとすると…\n\n```rust example-bad\nfn main() {\n  (1..=15)\n    .map(|x| (&x).into())\n    .for_each(|x: FizzBuzz| println!(\"{}\", x));\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0515]: cannot return value referencing function parameter `x`\n --> src\\main.rs:7:18\n  |\n7 | .map(|x| (&x).into())\n  |          ----^^^^^^^\n  |          |\n  |          returns a value referencing data owned by the current function\n  |          `x` is borrowed here\n```\n\nクロージャ外から出た後までライフタイムを必要とするような処理はできないということです。  \nこれは、以下のようにクロージャ内で変数のライフタイムが尽きた後に参照しないように修正しなければなりません。\n\n```rust\nfn main() {\n  (1..=15)\n    .for_each(|x| println!(\"{}\", Into::<FizzBuzz>::into(&x)));\n}\n```\n\nもしくは所有権を要求してしまうという手もあります。所有権を得た後はライフタイムが伸びるのでこれは問題ありません。\n\n```rust\nuse num::Zero;\nuse std::fmt::{Display, Formatter, Result};\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(Box<dyn Display>),\n}\n\nimpl Display for FizzBuzz {\n  fn fmt(&self, f: &mut Formatter) -> Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<T> for FizzBuzz\nwhere\n  for<'a> T: 'a + Display + From<u8>,\n  for<'a> &'a T: Rem<T, Output = U>,\n  U: Zero,\n{\n  fn from(x: T) -> FizzBuzz {\n    match ((&x % T::from(3)).is_zero(), (&x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(Box::new(x)),\n    }\n  }\n}\n```\n\n以上のように書けますが、どちらにせよBoxによるメモリ操作や動的ディスパッチによる実行時オーバーヘッドがあることには変わりありません。※静的ディスパッチであればビルド後のサイズは多少膨らむものの実行時のオーバーヘッドは無い。\n\nこのように、過大なライフタイムを要求すると、後々取り回しに苦労してしまうので、パフォーマンスや汎用性を天秤にかけて判断するようにしましょう。\n\n</div>\n\nRustでFizzBuzzを実装してみましたという話でした。\n","tags":["Rust","FizzBuzz"],"category":"blog"},{"slug":"articles/typescript-bitcoin","date":"2022-12-24T01:04:03+0900","draft":false,"title":"Typescriptでビットコインアドレスを生成する","description":"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport Link from 'next/link';\n\nimport { TypescriptBitcoin } from '../../components/TypescriptBitcoin';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `\nTypescriptでビットコインアドレスを生成したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%AA%E3%82%A2%E3%83%A0%E3%80%81DApp%E9%96%8B%E7%99%BA%E3%81%BE%E3%81%A7-Bikramaditya-Singhal/dp/4274225372?_encoding=UTF8&qid=1671896601&sr=8-1&linkCode=ll1&tag=nishidemasami-22&linkId=b026b2c2bd3729a8fe4c35dda528a7bb&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n👇このボタンをクリックするとビットコインアドレスを生成します。\n`;\n\nconst secondArticle = `\nビットコインのアドレスは、32バイトの秘密鍵を以下のようにしてビットコインアドレスに変換します。\n\n\\`\\`\\`mermaid\nflowchart TD\n\nA[32バイトの秘密鍵] -->|secp256k1| B(公開鍵)\nA -->|base58変換とチェックサム付与| F[WIF形式秘密鍵]\nB --> C{ビットコインアドレス形式}\nC -->|BASE58変換とチェックサム付与| D[P2PKH形式ビットコインアドレス]\nC -->|BASE32変換とチェックサム付与| E[Bech32形式ビットコインアドレス]\n\\`\\`\\`\n\nこれはTypescriptでも簡単に計算できます。\n\nそれを実際に書いてみたのが ↓ この今回のコードです\n\\`\\`\\`tsx\nimport { randomBytes, createHash, BinaryLike } from 'crypto';\n\nimport { useState, FC, useMemo, useCallback } from 'react';\n\nimport { Button, TextField } from '@mui/material';\nimport { bech32 } from 'bech32';\nimport { encode } from 'bs58';\nimport RIPEMD160 from 'ripemd160';\nimport { publicKeyCreate, privateKeyVerify } from 'secp256k1';\n\n/** 16進数の文字列かどうかチェックする正規表現 */\nconst check32BytesHex = /^[0-9a-fA-F]{64}$/;\n\n/** 16進数の文字列をUint8Arrayに変換する */\nconst hexToUint8Array = (hex: string): Uint8Array => Buffer.from(hex, 'hex');\n\n/** Bufferを16進数の文字列に変換する */\nconst bufferToHex = (data: Buffer): string => data.toString('hex');\n\n/** sha256でハッシュする */\nconst sha256 = (data: BinaryLike): Buffer =>\n  createHash('sha256').update(data).digest();\n\n/** ripemd160でハッシュする */\nconst ripemd160 = (data: BinaryLike): Buffer =>\n  new RIPEMD160().update(data).digest();\n\n/** BASE58チェックサム生成 */\nconst calcBase58Checksum = (data: BinaryLike): Buffer =>\n  sha256(sha256(data)).subarray(0, 4);\n\n/** BASE58変換＋チェックサム */\nconst base58WithChecksum = (data: Uint8Array): string =>\n  encode([...data, ...calcBase58Checksum(data)]);\n\n/** ビットコインアドレス(BASE58(P2PKH)形式)生成 */\nconst genBitcoinAddressP2PKH = (publicKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x00, ...ripemd160(sha256(publicKey))]));\n\n/** BASE32変換＋チェックサム */\nconst bech32WithChecksum = (data: Uint8Array) =>\n  bech32.encode('bc', [0x00, ...bech32.toWords(data)]);\n\n/** ビットコインアドレス(BASE32(Bech32)形式)生成 */\nconst genBitcoinAddressBECH32 = (publicKey: Uint8Array): string =>\n  bech32WithChecksum(ripemd160(sha256(publicKey)));\n\n/** 秘密鍵(WIF形式)生成 */\nconst genWif = (privateKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x80, ...privateKey]));\n\nconst TypescriptBitcoin: FC = () => {\n  // 秘密鍵(32バイトの16進数)\n  const [hexPrivateKey, setHexPrivateKey] = useState(\n    bufferToHex(randomBytes(32))\n  );\n\n  /** 秘密鍵(32バイト) */\n  const privateKey: Uint8Array | string = useMemo(() => {\n    if (!check32BytesHex.test(hexPrivateKey))\n      return '秘密鍵が32バイトの16進数ではない';\n    return hexToUint8Array(hexPrivateKey);\n  }, [hexPrivateKey]);\n\n  /** 公開鍵 */\n  const publicKey: Uint8Array | string = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (!privateKeyVerify(privateKey)) return '秘密鍵が不適切';\n    return publicKeyCreate(privateKey, false);\n  }, [privateKey]);\n\n  /** ビットコインアドレス(BASE32(Bech32)形式) */\n  const bitcoinAddressBECH32 = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressBECH32(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** ビットコインアドレス(BASE58(P2PKH)形式) */\n  const bitcoinAddressP2PKH = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressP2PKH(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** 秘密鍵をランダムに生成 */\n  const genRamdamKey = useCallback(\n    () => setHexPrivateKey(bufferToHex(randomBytes(32))),\n    []\n  );\n\n  /** 秘密鍵(WIF形式) */\n  const wif = useMemo(\n    () => genWif(hexToUint8Array(hexPrivateKey)),\n    [hexPrivateKey]\n  );\n\n  return (\n    <>\n      <Button onClick={genRamdamKey} variant=\"outlined\">\n        秘密鍵をランダムに生成\n      </Button>\n      <TextField\n        error={!check32BytesHex.test(hexPrivateKey)}\n        fullWidth\n        label=\"秘密鍵(32バイトの16進数)\"\n        margin=\"dense\"\n        value={hexPrivateKey}\n        onChange={(e) => {\n          setHexPrivateKey(e.currentTarget.value);\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"秘密鍵(WIF形式)\"\n        margin=\"dense\"\n        value={wif}\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE58(P2PKH)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressP2PKH}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE32(Bech32)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressBECH32}\n      />\n    </>\n  );\n};\n\nexport { TypescriptBitcoin };\n\\`\\`\\`\n`;\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Typescriptでビットコインアドレスを生成する\"\n\t\t\t\tdescription=\"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"content-title\">\n\t\t\tTypescriptでビットコインアドレスを生成する\n\t\t</h1>\n\t\t<div className=\"content-date\">\n\t\t\tPosted {format(new Date('2022-12-10T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t{['TypeScript', 'React', 'Bitcoin'].map((tag) => (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\tkey={tag}\n\t\t\t\t>\n\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t#{tag}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t<TypescriptBitcoin />\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React","Bitcoin"],"category":"blog"},{"slug":"posts/nextjs-mermaid","date":"2022-12-18T23:04:03+0900","draft":false,"title":"Next.jsでSSG時にRemarkでMermaidをSVGとして出力する","description":"Next.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。","content":"\r\nNext.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。  \r\n僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。\r\n\r\n今回は`remark-mermaidjs`を使って実装しました。\r\n\r\nこのサイトではMarkdownを`unified`で扱っているので`remark-mermaidjs`を`use`します。  \r\n`remark-mermaidjs`はGoogle Chromeを使ってMermaidをSVGにしているらしく`executablePath`でGoogle Chromeのパスを指定しなければならないようです。  \r\nこのサイトはGitHub Actionsでビルドしているので、ubuntuのために`/opt/google/chrome/google-chrome`を指定しました。なお、ローカル環境でも自由に動かせるように`.env`にもGoogle Chromeへのパスを書くことにしました。\r\n\r\n```typescript\r\n// @ts-ignore\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkMermaid from 'remark-mermaidjs';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkMermaid, {\r\n        launchOptions: {\r\n          executablePath:\r\n            process.env.GoogleChromeExecutablePath ?? // .env\r\n            '/opt/google/chrome/google-chrome', // for GitHub Actions Ubuntu\r\n        },\r\n        svgo: false,\r\n      })\r\n      .use(remarkRehype, { allowDangerousHtml: true, footnoteLabel: '脚注' })\r\n      .use(rehypePrism)\r\n      .use(rehypeKatex)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString()\r\n    .replace(/@@baseUrl@@/g, process.env.baseUrl || '');\r\n```\r\n\r\n以下にサンプルを置いておきます。図がSVGになっていることがわかると思います。\r\n\r\n## Flowchart\r\n\r\n````markdown\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n````\r\n\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n\r\n## Sequence diagram\r\n\r\n````markdown\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n````\r\n\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n\r\n## Gantt chart\r\n\r\n````markdown\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n````\r\n\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n\r\n## Class diagram\r\n\r\n````markdown\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n````\r\n\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n\r\n## Git graph\r\n\r\n````markdown\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n````\r\n\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n\r\n## State diagram\r\n\r\n````markdown\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n````\r\n\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n\r\n## Pie chart\r\n\r\n````markdown\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n````\r\n\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n\r\n## Entity Relationship Diagram\r\n\r\n````markdown\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n````\r\n\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n\r\n## User Journey diagram\r\n\r\n````markdown\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n````\r\n\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n\r\n## C4 diagram\r\n\r\n````markdown\r\n```mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n```\r\n````\r\n\r\n````mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n````\r\n\r\nMermaid記法なら簡単にグラフを書けて便利なので、どんどん使っていきたいと思います。\r\n","tags":["Mermaid","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions"],"category":"blog"},{"slug":"posts/svg-prayer-wheel","date":"2022-12-17T01:04:03+0900","draft":false,"title":"SVGだけで作ったSVGマニ車をCSSでクルクル回して自動で徳を積む","description":"徳、積みたいですよね。JavaScriptを使わずにSVGとCSSだけでマニ車をクルクル回して自動で徳を積みたいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n\r\n徳、積みたいですよね。\r\n\r\nご存知マニ車。お寺とかにたまにある、周囲にマントラが書いてあって手で回すと1回転毎に1回お経を読んだのと同じ徳を積めるスピリチュアルグッズです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=マニ車\">参考</a>]</sup>  \r\nチベット仏教が国教であるブータンでは、水力マニ車や風力マニ車、ソーラーマニ車<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=ソーラーマニ車\">参考</a>]</sup>などもあり、マニ車も進化しているということがわかります。[^1]\r\n\r\n[^1]: 日本風力エネルギー学会誌 Vol.44, No.4\r\n\r\nならば、SVGとCSSでマントラを回しても徳が積めるのでは…？  \r\nそう思ったので自分用にメモです。\r\n\r\n```html\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n```\r\n\r\nこのような感じで円のパスを複数個作って、それぞれを違う速さで回しています。\r\n\r\nなお、以下のようにSVGのanimateTransformで回転させることもできます。  \r\nしかし、CPUレンダリングになってしまうのでちょっとカクカクするので今回はこの方法は使いませんでした。\r\n\r\n\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n\r\n```xml\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n```\r\n\r\nSVG単体でanimateTransformを利用してマニ車を回すより、CSSのanimationで回した方がスムーズな動作で回せました。\r\n\r\nこれでパソコンでもスマホでも、いつでもどこでも誰でも自動でスマートに徳を積めますね。  \r\n以上、SVGで徳を積んだという話でした。\r\n","tags":["SVG","CSS"],"category":"blog"},{"slug":"posts/google-colab-github","date":"2022-12-03T05:58:43+0900","draft":false,"title":"Google ColaboratoryでGitHubのipynbファイルを開く","description":"Google ColaboratoryでGitHubのipynbファイルを開いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nGoogle ColaboratoryでGitHubのファイルを開いてみたいと思うこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\nと言っても簡単で、GitHubでパブリックのリポジトリにファイルをコミットするだけです。\r\n\r\n<https://github.com/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこのようなパスにコミットしたとしたら、\r\n\r\n<https://colab.research.google.com/github/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこうやってGoogle Colaboratoryで開くことができます。\r\n\r\n簡単！\r\n","tags":["Google Colaboratory","GitHub"],"category":"blog"}],"tags":["GitHub","CSS","SVG","SSH","AWS","GitHub","ED25519","Google Colaboratory","GitHub","Hexo","Java","Ruby","情報処理技術者試験","ネットワークスペシャリスト","Next.js","LaTeX","MathJax","Markdown","Mermaid","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions","PlantUML","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions","Next.js","Distroless","Onion Service","Tor","Docker","Tor Hidden Service","Nginx","Onion Service","Tor","Docker","Tor Hidden Service","Nginx","Rust","FizzBuzz","SVG","CSS","Vim","OpenSSL","JavaScript","TypeScript","React","Gatsby.js","TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js","TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js","TypeScript","React","TypeScript","React","Bitcoin"],"prevPost":{"slug":"articles/react-sound-test","date":"2021-03-14T01:04:03+0900","draft":false,"title":"Reactでホワイトノイズを鳴らす","description":"Reactでホワイトノイズを鳴らしたいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport Link from 'next/link';\n\nimport { ReactAudioTest } from '../../components/ReactAudioTest';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tsorceCodeHTML: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst sorceCodeMarkdown = `\n\\`\\`\\`typescript\nimport React from 'react';\n\nimport { VolumeDown, VolumeUp } from '@mui/icons-material';\nimport { Button, CircularProgress, Grid, Slider } from '@mui/material';\n\n// webkit用Typescript型宣言\ndeclare global {\n  interface Window {\n    webkitAudioContext: AudioContext;\n  }\n}\n\nconst ReactAudioTest: React.FunctionComponent = () => {\n  // 音量：初期値25\n  const [volume, setVolume] = React.useState(25);\n  // 再生状態：初期値false\n  const [playingFlag, setPlayingFlag] = React.useState(false);\n  // AudioContext：初期値undefined\n  const [audioContext, setAudioContext] = React.useState<\n    AudioContext | undefined\n  >(undefined);\n  // 音源ソース：初期値undefined\n  const [source, setSourceState] = React.useState<\n    AudioBufferSourceNode | undefined\n  >(undefined);\n  // 音量調節：初期値undefined\n  const [gainState, setGainState] = React.useState<GainNode | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    // 初期化\n    const newAudioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    setAudioContext(newAudioContext);\n    const gainNode = newAudioContext.createGain();\n    gainNode.gain.value = volume / 100;\n    setGainState(gainNode);\n\n    return () => {\n      // unmount時の後始末\n      if (source) {\n        source.buffer = null; // メモリリーク防止\n      }\n      if (newAudioContext) {\n        newAudioContext.close();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    // 音量変更\n    if (gainState) {\n      gainState.gain.value = volume / 100;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume]);\n\n  // スマホなどでは迷惑な自動再生を防ぐ目的で\n  // ユーザの操作に伴う再生でしか音を再生できない\n  const onClickToStartAndStop = React.useCallback(() => {\n    if (audioContext && gainState) {\n      if (playingFlag) {\n        // 停止\n        if (source) {\n          source.stop();\n          source.buffer = null; // メモリリーク防止\n        }\n      } else {\n        // 再生\n        const channels = 1; // モノラル\n        const frameCount = audioContext.sampleRate * 2.0; // 2秒\n\n        const myArrayBuffer = audioContext.createBuffer(\n          channels,\n          frameCount,\n          audioContext.sampleRate\n        );\n\n        for (let channel = 0; channel < channels; channel += 1) {\n          // ホワイトノイズ生成\n          const nowBuffering = myArrayBuffer.getChannelData(channel);\n          for (let i = 0; i < frameCount; i += 1) {\n            nowBuffering[i] = Math.random() * 2 - 1;\n          }\n        }\n        const buffersource = audioContext.createBufferSource();\n        setSourceState(buffersource);\n        buffersource.buffer = myArrayBuffer;\n        buffersource.loop = true;\n        buffersource.connect(gainState).connect(audioContext.destination);\n        buffersource.start();\n      }\n      setPlayingFlag(!playingFlag);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playingFlag, audioContext, gainState]);\n\n  if (!audioContext || !gainState) {\n    return (\n      <React.Fragment>\n        <CircularProgress />\n        loading...\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className=\"text-center h-fit w-full\">\n      <Grid container>\n        <Grid item></Grid>\n        <Grid item>\n          <VolumeDown />\n        </Grid>\n        <Grid item xs={10}>\n          <Slider\n            min={0}\n            max={100}\n            defaultValue={50}\n            value={volume}\n            onChange={(__, newValue) => {\n              if (typeof newValue === 'number') {\n                setVolume(newValue);\n              }\n            }}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n        <Grid item>\n          <VolumeUp />\n        </Grid>\n        <Grid item></Grid>\n      </Grid>\n\n      <Button\n        variant=\"outlined\"\n        color={playingFlag ? 'info' : 'primary'}\n        onClick={onClickToStartAndStop}\n      >\n        ホワイトノイズ{playingFlag ? '停止' : '再生'}\n      </Button>\n    </div>\n  );\n};\n\nexport { ReactAudioTest };\n\\`\\`\\`\n`;\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Reactでホワイトノイズを鳴らす\"\n\t\t\t\tdescription=\"React + TypeScript でホワイトノイズを鳴らしてみました\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"content-title\">Reactでホワイトノイズを鳴らす</h1>\n\t\t<div className=\"content-date\">\n\t\t\tPosted {format(new Date('2021-03-14T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t{['TypeScript', 'React'].map((tag) => (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\tkey={tag}\n\t\t\t\t>\n\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t#{tag}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tReactでホワイトノイズを鳴らしたいこと、ありますよね。\n\t\t\t\t\t<br />\n\t\t\t\t\t僕はあるので自分用にメモです。\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t↓ React + TypeScript でホワイトノイズを鳴らしてみました。\n\t\t\t\t\t<sup>\n\t\t\t\t\t\t[\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\thref=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0TypeScript-%E2%80%95%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8BJavaScript%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA-Boris-Cherny/dp/4873119049?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3Q7MI7KXY06BB&keywords=typescript&qid=1670505807&sprefix=typescript+%2Caps%2C224&sr=8-9&linkCode=ll1&tag=nishidemasami-22&linkId=48539012d76c58e8bc3549b5a9dc7a1f&language=ja_JP&ref_=as_li_ss_tl\"\n\t\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t参考文献\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t]\n\t\t\t\t\t</sup>\n\t\t\t\t\t<br />\n\t\t\t\t\t※音が鳴ります\n\t\t\t\t</p>\n\t\t\t\t<ReactAudioTest />\n\t\t\t\t<p>\n\t\t\t\t\tパソコンで音を鳴らすのはかんたんなんですけどスマホはガードが固いらしくて、ユーザのなんらかの動作をトリガーとして再生しないと再生されないみたいです。\n\t\t\t\t</p>\n\t\t\t\t<p>なので今回は useCallback で宣言して onClick から呼びました。</p>\n\t\t\t\t<p>↓ これが今回のコードです</p>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.sorceCodeHTML }} />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tsorceCodeHTML: await markdownToHtml(sorceCodeMarkdown),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React"],"category":"blog"},"nextPost":{"slug":"posts/network-specialist-examination","date":"2016-12-18T18:04:03+0900","draft":false,"title":"ネットワークスペシャリスト合格体験記","description":"念願のネットワークスペシャリストに合格しました！本当に念願で、というのも情報セキュリティスペシャリスト合格から今回で丸 2 年経っていて、今回合格できなければ午前 I 免除が終わってしまうところだったんです。…","content":"\r\n念願のネットワークスペシャリストに合格しました！\r\n本当に念願で、というのも情報セキュリティスペシャリスト合格から今回で丸 2 年経っていて、今回合格できなければ午前 I 免除が終わってしまうところだったんです。\r\n\r\nこちらが成績です。\r\n\r\n![ネットワークスペシャリスト成績](https://lh3.googleusercontent.com/pw/ACtC-3cJJG24p8M5wNBDBcGb4Bmc0njr2p2GzTuXB3z_7vwnC0FyW8ChvDTKkOH5SFB1fqS6jiFCkysXD53sSs5OOZ_67KRgHwIJ-vH_Pg6XSFM2JSZmDplgXH-WgtqPZRQ9qG9D7g59rYN7efbAoiJILXnnmA=w563-h351-no?authuser=0)\r\n60 点が合格ラインなので、ゆとりを持った合格となりました！\r\n\r\n2 年前の情報セキュリティスペシャリストの時は午前 I 免除、午前 II が 84 点、午後 I が 71 点、午後 II が 62 点と午後 II がギリギリでした。\r\nしかし今回は、午前 I が同じく免除で、午前 II が 72 点、午後 I が 70 点、午後 II が 72 点でした。いずれも 7 割超です！\r\nでは今回のネットワークスペシャリストが余裕だったかと言うとそうではなく、今回も非常に厳しい戦いとなりました。\r\n\r\n今後ネットワークスペシャリストに挑戦するみなさんの助けになるよう、自分の今回の勉強法を書いていきたいと思います。\r\n\r\n### 良い教本に出会う\r\n\r\n僕はネットワークスペシャリストに合格するのに 2 年かかりました。\r\n長い間お付き合いする本ですから、教本選びは大切です。\r\n僕は、定番のポケットスタディで勉強しました。「ポケットスタディ ネットワークスペシャリスト」で検索すれば出てくると思います。\r\nコンパクトなのでいつでも持ち歩けますし、外出先でも気軽に読めて便利です。\r\nポケットスタディだけで基礎を完璧にはできないかもしれませんが、必要知識のリストアップとして効果的です。\r\n不足知識や理解しきれない部分はネットで調べました。\r\nネットとポケットスタディで、常に勉強ができる状態を維持するところがポイントです。\r\n\r\nまた、過去問の解答の解説にはネスペの剣なども読みました。\r\n問題・解答は無料で公式サイトからダウンロードできますが、解説は別に必要です。\r\nただ、解説本に手を出すのもおそらく基礎を身に付けてからの話だと思います。\r\nそれに、基礎を身につける間にネットでわからないところを検索していると、いつの間にか解説なしでも問題を読めるようになっているものです。\r\nちなみに僕は BGP や OSPF などがピンと来ないのでそこらへんは本に頼りました。\r\n\r\nそれから、これまた定番の「3 Minutes Networking([http://www5e.biglobe.ne.jp/aji/3min/](http://www5e.biglobe.ne.jp/aji/3min/))」もオススメです。\r\nネットワーク技術をある程度体系的にまとめて教えてくれる貴重なサイトです。しかも 1 講座 3 分で読めるのだそうです(※読めません！)。\r\nぜひ読破に挑戦してみましょう！\r\n\r\n### 新しい技術を学ぶ\r\n\r\nデータベーススペシャリストは、新しい技術はあまり出てきません。出てきて NoSQL くらいです。データベーススペシャリストは話のわかるヤツです。\r\nけどネットワークスペシャリストはそんなの気にしません。\r\n今回、午後 II では STUN や WebRTC が問題に登場しました。\r\nWebSocket や、過去には OpenFlow も出ています。\r\n2013 年なんて午後 II の問 2 が丸々 OpenFlow だったので、OpenFlow をノーチェックだった人は問 1 しか選択肢が無く非常に不利な戦いとなったはずです。\r\n今こうしている間にも新しい技術はどんどん出現していますので、後学のためにも話題の新技術は怯まずぜひチェックしてゆきましょう。\r\n\r\n### 確実に基礎を固める\r\n\r\n上に書いたことと関連するのですが、新技術を学ぶことは、当然基礎を固めることから始まります。\r\n新技術もおおむね基礎の上に成り立っています。既存の技術をパッケージした AJAX のような例もありますし、また問題によっては、わからない技術がちょこっとあったとしても基礎ができていれば解ける問題もあります。\r\nネットワークスペシャリスト試験はネットワーク技術に絞った試験…と言われる範囲は狭いと思われがちですが、実際の所、ネットワーク技術がクライアントからサーバ、バックボーン、セキュリティまでも出るので範囲は広いです。ホントに途方もない範囲です。\r\nしかし、だいたいのネットワークは TCP/IP の上で動いているので TCP/IP さえ理解すれば問題文から解ける時もあります。\r\n試験問題は意外にも親切丁寧に書かれていたりします。基礎を固めておくだけで、チャンスはぐっと広がります。\r\n例えば今回受験した平成 28 年度から以下の問題です。\r\n\r\n> 迷惑メールの送信を防止する対策として、OP25B(Outbound Port 25\r\n> Blocking)のポリシでメールシステムを運用している。具体的には、自社が動的に割り当てた\r\n> IP\r\n> アドレスのホストから、自社のサービスネットワーク外のホストへの宛先ポート番号\r\n> 25 の SMTP 通信を許可しないという運用上のルールを適用している。 (中略)B\r\n> 社の PC から A 社のメールサーバへ SMTP\r\n> によるメール送信ができたとしても、そのメールサーバは A\r\n> 社のドメイン以外への宛先へはメールを転送しない設定となっている。\r\n> この設定がないことによって生じる情報セキュリティ上のリスクを、25\r\n> 字以内で答えよ (※平成 28 年度 ネットワークスペシャリスト試験午後 I\r\n> 試験問題より引用・要約)\r\n\r\nこれは「第三者中継」に関する問題です。今時当たり前すぎて見逃しがちな「第三者中継」、だからなのか随分親切な問題文です。\r\n「第三者中継」という概念を知らなくとも、これだけ丁寧に説明されていれば、基礎をわかっていれば答えられるはずです。\r\n※もちろんこれは問題文から必要な箇所だけ抜きだしたものなので簡単そうに見えますが実際は何ページもある問題文からヒントを見つけなければいけません！\r\n\r\nちなみに解答は以下の通りです。\r\n\r\n> 不正メールの踏み台にされてしまうリスク (※平成 28 年度\r\n> ネットワークスペシャリスト試験午後 I 試験解答例より引用)\r\n\r\nこのように、基礎さえわかっていれば自力で解ける問題もあります。\r\nそれに基礎は実務では必須です。ぜひ幅広く身につけましょう。\r\niptables でルータを作ってみたり、Wireshark などで通信を覗いてみたりすると楽しいくて勉強にもなるのでおすすめです！\r\n\r\n### 過去問の解答例を学ぶ\r\n\r\n記述式の問題にはしばしば、なんて答えればいいか悩む問題があります。例えば同じく平成 28 年度から以下の問題です。\r\n\r\n> ロードバランサは、通信の行きと戻りを同じ ISP\r\n> 経由にするが、通信の行きと戻りが同じ ISP でない場合の問題を、社外から Web\r\n> サーバへのアクセスを例に、IP アドレスという用語を用いて 40\r\n> 文字以内で述べよ。 (※平成 28 年度 ネットワークスペシャリスト試験午後 II\r\n> 試験問題より引用・要約)\r\n\r\nさて、困りました。こんなこと聞かれては。\r\n通信の行きと戻りで違う ISP でを使うと言われても、そんなことすればブラウザからホームページへアクセスしても、問い合わせしたところと全然違うところからレスポンスが横殴りで返ってくるわけです。\r\nESTABLISHED してないんですから、今時 NAPT やファイアーウォールでガチガチに守られている我々のブラウザには、戻りの通信は届きすらしなさそうです。\r\nなんと答えればいいでしょうか？\r\n「戻りの IP アドレスの通信がファイアーウォールで弾かれてしまう」でしょうか？\r\nそもそも「戻りの通信の IP アドレスが ESTABLISHED していない」でしょうか？\r\n\r\n解答を見てみましょう。\r\n\r\n> 応答が行きの宛先 IP アドレスとは異なる送信元 IP アドレスから戻る。 (※平成\r\n> 28 年度 ネットワークスペシャリスト試験午後 II 試験解答例より引用)\r\n\r\n根本的！\r\nそうなんです。解答に困ったら「で、実際のところなにが言いたいの？」というところを突き詰めてゆくと、自ずとシンプルな答えが出てくるはずです。\r\nこの問題は TCP/IP の知識があれば答えられますが、後半の問題は STUN も絡んできます。STUN ですよ！ワクワクしますよね？\r\nですがワクワクするからといって、例えば変に Skype 黎明期の苦労話などを知っていると「そもそも NAT 超えというのは〜〜」などと長々と講釈を書いてしまいそうになりますが、\r\nそれは心の中にそっと閉まっておくのが試験合格のため（そして普段の円滑な業務遂行のため）の秘訣です。\r\n◯◯ 文字以内という解答に求められているレベル感を掴むためにも、過去問はぜひ 1 度解いてみましょう。なんていったって過去問は公式サイトからダウンロード無料です。\r\n\r\n### 心を強く持つ\r\n\r\n最後になりましたが！\r\n諦めてはそこで試験終了です！\r\n僕は過去に何度も試験中諦めそうになった問題を気合で解いてきました！そしてそのうち半分くらいは合格してました！\r\n心を強く持って、挫けずにトライすることが大切です！\r\nがんばりましょう！僕もがんばります！次は春はデータベーススペシャリスト、秋はシステムアーキテクトかもしくは IT ストラテジストを受ける予定です！\r\n\r\nネットワークスペシャリストに合格したという話でした！\r\n","tags":["情報処理技術者試験","ネットワークスペシャリスト"],"category":"blog"}},"__N_SSG":true}