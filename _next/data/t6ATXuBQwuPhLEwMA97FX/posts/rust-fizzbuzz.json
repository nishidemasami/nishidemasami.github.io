{"pageProps":{"title":"RustでFizzBuzzを書く","description":"RustでFizzBuzzを書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","date":"2022-12-31T04:58:43+0900","modified_date":null,"image":null,"content":"<p>RustでFizzBuzzを書いてみたいと思うこと、ありますよね。<br>\n僕はあるので自分用にメモです。</p>\n<p>なお、この記事を書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Rust-%E7%AC%AC2%E7%89%88-Jim-Blandy/dp/4873119782?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=16SB3SPXD9LVL&keywords=rust&qid=1672662058&sprefix=rust+%2Caps%2C261&sr=8-4&linkCode=ll1&tag=nishidemasami-22&linkId=5f2948f4e335959907e6a8b8e22b859d&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >プログラミングRust 第2版</a>を参考にしました。</p>\n<p>とりあえず最初に結論を書いておきます。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">fmt;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">ops</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">pub</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">enum</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fmt</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\">, f</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;mut</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>以上のようになると思います。</p>\n<p>以下、解説です。</p>\n<p>まず、何も考えずにRustでFizzBuzzを書くと以下のようになると思います。</p>\n<div class=\"preshiki\">main.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  })</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<div class=\"preshiki\">Cargo.toml</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">package</span><span style=\"color: #24292F\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">name = </span><span style=\"color: #0A3069\">\"fizzbuzz\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">version = </span><span style=\"color: #0A3069\">\"0.1.0\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">edition = </span><span style=\"color: #0A3069\">\"2021\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">dependencies</span><span style=\"color: #24292F\">]</span></span></code></pre>\n<p>ここからスタートしてゆきます。</p>\n<p>最終的に、以下のようにすることをゴールとします。</p>\n<ul>\n<li>テスト可能</li>\n<li>汎用的</li>\n<li>ゼロコスト抽象化</li>\n</ul>\n<p>まずメソッドに分けてからテストを書きます。</p>\n<div class=\"preshiki\">main.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fizzbuzz</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">u32</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(fizzbuzz)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">))</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">#[test]</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">test</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> test_target</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Vec</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(fizzbuzz)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">collect</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">assert_eq!</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    test_target,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">vec!</span><span style=\"color: #24292F\">[</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"1\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"2\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"7\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"8\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"11\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"13\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"14\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>次はこれをRustらしく、<code>enum</code>に<a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\"><code>std::convert::From</code></a>トレイトと<a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\"><code>fmt::Display</code></a>トレイトを実装した書き方にします。<br>\n<a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\"><code>std::convert::From</code></a>トレイトの<a href=\"https://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from\"><code>from()</code></a>メソッドを実装すれば<a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\"><code>std::convert::Into</code></a>トレイトの<a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into\"><code>into()</code></a>メソッドが自動で実装され、<a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\"><code>fmt::Display</code></a>トレイトの<a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt\"><code>fmt()</code></a>メソッドを実装すれば<a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html\"><code>std::string::ToString</code></a>トレイトの<a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\"><code>to_string()</code></a>メソッドが自動で実装されます。<br>\nついでにファイルも分けます。</p>\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">fmt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">pub</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">enum</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u32</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">u32</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">==</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fmt</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\">, f</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;mut</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<div class=\"preshiki\">src/main.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  } )</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  } )</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">))</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">#[test]</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">test</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> test_target</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Vec</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    } )</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    } )</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">collect</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">assert_eq!</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    test_target,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">vec!</span><span style=\"color: #24292F\">[</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"1\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"2\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"7\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"8\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"11\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"13\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"14\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>さて、<code>u32</code>では<code>4294967295</code>が最大値なのは心もとないので拡張可能にしたいと考えると思います。<br>\nしかし、たとえ<code>u32</code>を<code>u128</code>にしたところで<code>340282366920938463463374607431768211455</code>が最大値です。<br>\nこれでは十分ではないので、もっと「抽象的な数値」を扱えるようにします。</p>\n<p>fizzbuzz関数<span class=\"math math-inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.299ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1900 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use data-c=\"1D453\" xlink:href=\"#MJX-1-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><use data-c=\"28\" xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-1-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><use data-c=\"29\" xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container></span>を定義してみます。</p>\n<div class=\"math math-display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -4.638ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"49.057ex\" height=\"10.407ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -2550 21683.2 4600\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-S4-23A7\" d=\"M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z\"></path><path id=\"MJX-2-TEX-S4-23A9\" d=\"M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z\"></path><path id=\"MJX-2-TEX-S4-23A8\" d=\"M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z\"></path><path id=\"MJX-2-TEX-S4-23AA\" d=\"M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z\"></path><path id=\"MJX-2-TEX-N-46\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z\"></path><path id=\"MJX-2-TEX-N-69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"></path><path id=\"MJX-2-TEX-N-7A\" d=\"M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z\"></path><path id=\"MJX-2-TEX-N-42\" d=\"M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z\"></path><path id=\"MJX-2-TEX-N-75\" d=\"M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z\"></path><path id=\"MJX-2-TEX-N-6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path id=\"MJX-2-TEX-N-6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\"></path><path id=\"MJX-2-TEX-N-64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\"></path><path id=\"MJX-2-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-2-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-2-TEX-N-2227\" d=\"M318 591Q325 598 333 598Q344 598 348 591Q349 590 414 445T545 151T611 -4Q609 -22 591 -22Q588 -22 586 -21T581 -20T577 -17T575 -13T572 -9T570 -4L333 528L96 -4Q87 -20 80 -21Q78 -22 75 -22Q57 -22 55 -4Q55 2 120 150T251 444T318 591Z\"></path><path id=\"MJX-2-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-2-TEX-N-2260\" d=\"M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z\"></path><path id=\"MJX-2-TEX-N-74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\"></path><path id=\"MJX-2-TEX-N-68\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path id=\"MJX-2-TEX-N-65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"></path><path id=\"MJX-2-TEX-N-72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\"></path><path id=\"MJX-2-TEX-N-77\" d=\"M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use data-c=\"1D453\" xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><use data-c=\"28\" xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><use data-c=\"29\" xlink:href=\"#MJX-2-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2177.8,0)\"><use data-c=\"3D\" xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(3233.6,0)\"><g data-mml-node=\"mo\"><use data-c=\"23A7\" xlink:href=\"#MJX-2-TEX-S4-23A7\" transform=\"translate(0,1651)\"></use><use data-c=\"23A9\" xlink:href=\"#MJX-2-TEX-S4-23A9\" transform=\"translate(0,-1151)\"></use><use data-c=\"23A8\" xlink:href=\"#MJX-2-TEX-S4-23A8\" transform=\"translate(0,0)\"></use><svg width=\"889\" height=\"681\" y=\"1060\" x=\"0\" viewBox=\"0 120 889 681\"><use data-c=\"23AA\" xlink:href=\"#MJX-2-TEX-S4-23AA\" transform=\"scale(1,3.349)\"></use></svg><svg width=\"889\" height=\"681\" y=\"-1241\" x=\"0\" viewBox=\"0 120 889 681\"><use data-c=\"23AA\" xlink:href=\"#MJX-2-TEX-S4-23AA\" transform=\"scale(1,3.349)\"></use></svg></g><g data-mml-node=\"mtable\" transform=\"translate(889,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,1800)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mtext\"><use data-c=\"46\" xlink:href=\"#MJX-2-TEX-N-46\"></use><use data-c=\"69\" xlink:href=\"#MJX-2-TEX-N-69\" transform=\"translate(653,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(931,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(1375,0)\"></use><use data-c=\"42\" xlink:href=\"#MJX-2-TEX-N-42\" transform=\"translate(1819,0)\"></use><use data-c=\"75\" xlink:href=\"#MJX-2-TEX-N-75\" transform=\"translate(2527,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(3083,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(3527,0)\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4971,0)\"><g data-mml-node=\"mo\"><use data-c=\"28\" xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1238.8,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3405.6,0)\"><use data-c=\"33\" xlink:href=\"#MJX-2-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4183.3,0)\"><use data-c=\"3D\" xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5239.1,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5961.3,0)\"><use data-c=\"2227\" xlink:href=\"#MJX-2-TEX-N-2227\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6850.6,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7700.3,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(9867.1,0)\"><use data-c=\"35\" xlink:href=\"#MJX-2-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10644.9,0)\"><use data-c=\"3D\" xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(11700.7,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(12200.7,0)\"><use data-c=\"29\" xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mtext\"><use data-c=\"46\" xlink:href=\"#MJX-2-TEX-N-46\"></use><use data-c=\"69\" xlink:href=\"#MJX-2-TEX-N-69\" transform=\"translate(653,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(931,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(1375,0)\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4971,0)\"><g data-mml-node=\"mo\"><use data-c=\"28\" xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1238.8,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3405.6,0)\"><use data-c=\"33\" xlink:href=\"#MJX-2-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4183.3,0)\"><use data-c=\"3D\" xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5239.1,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5961.3,0)\"><use data-c=\"2227\" xlink:href=\"#MJX-2-TEX-N-2227\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6850.6,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7700.3,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(9867.1,0)\"><use data-c=\"35\" xlink:href=\"#MJX-2-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10644.9,0)\"><use data-c=\"2260\" xlink:href=\"#MJX-2-TEX-N-2260\"></use></g><g data-mml-node=\"mn\" transform=\"translate(11700.7,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(12200.7,0)\"><use data-c=\"29\" xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mtext\"><use data-c=\"42\" xlink:href=\"#MJX-2-TEX-N-42\"></use><use data-c=\"75\" xlink:href=\"#MJX-2-TEX-N-75\" transform=\"translate(708,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(1264,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(1708,0)\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4971,0)\"><g data-mml-node=\"mo\"><use data-c=\"28\" xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1238.8,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3405.6,0)\"><use data-c=\"33\" xlink:href=\"#MJX-2-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4183.3,0)\"><use data-c=\"2260\" xlink:href=\"#MJX-2-TEX-N-2260\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5239.1,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5961.3,0)\"><use data-c=\"2227\" xlink:href=\"#MJX-2-TEX-N-2227\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6850.6,0)\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7700.3,0)\"><use data-c=\"6D\" xlink:href=\"#MJX-2-TEX-N-6D\"></use><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\" transform=\"translate(833,0)\"></use><use data-c=\"64\" xlink:href=\"#MJX-2-TEX-N-64\" transform=\"translate(1333,0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(9867.1,0)\"><use data-c=\"35\" xlink:href=\"#MJX-2-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10644.9,0)\"><use data-c=\"3D\" xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(11700.7,0)\"><use data-c=\"30\" xlink:href=\"#MJX-2-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(12200.7,0)\"><use data-c=\"29\" xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1800)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use data-c=\"1D465\" xlink:href=\"#MJX-2-TEX-I-1D465\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4971,0)\"><g data-mml-node=\"mo\"><use data-c=\"28\" xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mtext\" transform=\"translate(389,0)\"><use data-c=\"6F\" xlink:href=\"#MJX-2-TEX-N-6F\"></use><use data-c=\"74\" xlink:href=\"#MJX-2-TEX-N-74\" transform=\"translate(500,0)\"></use><use data-c=\"68\" xlink:href=\"#MJX-2-TEX-N-68\" transform=\"translate(889,0)\"></use><use data-c=\"65\" xlink:href=\"#MJX-2-TEX-N-65\" transform=\"translate(1445,0)\"></use><use data-c=\"72\" xlink:href=\"#MJX-2-TEX-N-72\" transform=\"translate(1889,0)\"></use><use data-c=\"77\" xlink:href=\"#MJX-2-TEX-N-77\" transform=\"translate(2281,0)\"></use><use data-c=\"69\" xlink:href=\"#MJX-2-TEX-N-69\" transform=\"translate(3003,0)\"></use><use data-c=\"7A\" xlink:href=\"#MJX-2-TEX-N-7A\" transform=\"translate(3281,0)\"></use><use data-c=\"65\" xlink:href=\"#MJX-2-TEX-N-65\" transform=\"translate(3725,0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4558,0)\"><use data-c=\"29\" xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18449.7,0) translate(0 250)\"></g></g></g></g></svg></mjx-container></div>\n<p>ここで定義を冷静になって見てみると、<span class=\"math math-inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use data-c=\"1D465\" xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g></g></g></svg></mjx-container></span>に対する操作は「3で割る」「5で割る」「割った結果を0と比較する」「文字列に変換する」しかしていないことしかわかります。<br>\n型で表すと以下のようなものです。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span></code></pre>\n<p>つまり、<code>u8</code>で割ることができて0と比較できて文字列に変換できる値なら、どんな値でもFizzBuzzをすることができるのです。<br>\nCloneも合わせて先述の<code>from</code>は以下のように書けるのです。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Clone</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">clone</span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">clone</span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p><code>.clone()</code>を何度もするのはパフォーマンス上の観点から躊躇われますし処理上特に所有権も必要としておらず借用で十分なのでこれを借用に修正すると以下のようになります。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<div class=\"note alert\">\n<p><i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i>もしここで以下のようにライフタイム<code>'a</code>の記述を書かないと…</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>以下のようなエラーメッセージが出てしまいます。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292f\">error[E0637]: `&#x26;` without an explicit lifetime name cannot be used here</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  --> src\\main.rs:42:5</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">   |</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">42 |   &#x26;T: Rem&#x3C;T, Output = U> + ToString,</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">   |   ^ explicit lifetime name needed here</span></span></code></pre>\n<p>where句で<code>&#x26;</code>を使う必要があるならライフタイムを明示的に示さないといけないのです。</p>\n</div>\n<p>シンプルに書くのなら、ライフタイム<code>'a</code>は高階トレイト境界を用いて以下のような書き方をすることができます。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>これで完成です。</p>\n<p><code>num::BigUint</code>などもこの<code>T</code>を満たすので、これで<code>u128</code>でも扱えないような大きな数字も以下のように扱うことができるようになりました。</p>\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">fmt;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">ops</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">pub</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">enum</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fmt</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\">, f</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;mut</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<div class=\"preshiki\">src/main.rs</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">mod</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fizzbuzz</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fizzbuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">{</span><span style=\"color: #953800\">BigUint</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Num</span><span style=\"color: #24292F\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">num_iter</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">range_inclusive</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">BigUint</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from_str_radix</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211471\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">unwrap</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">BigUint</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from_str_radix</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211485\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">unwrap</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  )</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">BigUint</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> fizzbuzz</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    fizzbuzz</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  })</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">#[test]</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">test_bigint</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> test_target</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Vec</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num_iter</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">range_inclusive</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">BigUint</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from_str_radix</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211471\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">unwrap</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">BigUint</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from_str_radix</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211485\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">unwrap</span><span style=\"color: #24292F\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  )</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    buffer</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  })</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">collect</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">assert_eq!</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    test_target,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">vec!</span><span style=\"color: #24292F\">[</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211471\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211472\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211474\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211477\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211478\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211481\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211483\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"340282366920938463463374607431768211484\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">#[test]</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">test</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> test_target</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Vec</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">String</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> buffer</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      buffer</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">to_string</span><span style=\"color: #24292F\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    })</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">collect</span><span style=\"color: #24292F\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">assert_eq!</span><span style=\"color: #24292F\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    test_target,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">vec!</span><span style=\"color: #24292F\">[</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"1\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"2\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"4\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"7\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"8\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"11\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"13\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"14\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<div class=\"preshiki\">Cargo.toml</div>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">package</span><span style=\"color: #24292F\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">name = </span><span style=\"color: #0A3069\">\"fizzbuzz\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">version = </span><span style=\"color: #0A3069\">\"0.1.0\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">edition = </span><span style=\"color: #0A3069\">\"2021\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292F\">[</span><span style=\"color: #953800\">dependencies</span><span style=\"color: #24292F\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">num = </span><span style=\"color: #0A3069\">\"0.4.0\"</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">num-iter = </span><span style=\"color: #0A3069\">\"0.1.43\"</span></span></code></pre>\n<div class=\"note warn\">\n<p><i class=\"fontawesome fa fa-exclamation-circle\" style=\"color:#f7a535;font-size:20px;\" aria-hidden=\"true\"></i> ここで「そうだ！FizzBuzzのenumにString型ではなく<code>Box&#x3C;dyn 'a + ToString></code>型で動的な型の値を持たせればゼロコスト抽象化の恩恵も得られながらよりコンパイル時に最適化されるのでは？」と思うかもしれませんが…</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">fmt;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">ops</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">pub</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">enum</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">Box</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">dyn</span><span style=\"color: #24292F\"> '</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">>),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fmt</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\">, f</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;mut</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">></span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> '</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ToString</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> three </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> three)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">Box</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">new</span><span style=\"color: #24292F\">(x)),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>しかし、実際にはBoxによるメモリ操作や動的ディスパッチによるオーバーヘッドもありますし、最終的に<code>to_string()</code>で文字列を生成しているのには変わりありませんから、メリットはあまりありません。</p>\n<p>また、これを以下のような利用をしようとすると…</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">map</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x)</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">())</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{}\"</span><span style=\"color: #24292F\">, x));</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>以下のようなエラーメッセージが出てしまいます。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292f\">error[E0515]: cannot return value referencing function parameter `x`</span></span>\n<span class=\"line\"><span style=\"color: #24292f\"> --> src\\main.rs:7:18</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  |</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">7 | .map(|x| (&#x26;x).into())</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  |          ----^^^^^^^</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  |          |</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  |          returns a value referencing data owned by the current function</span></span>\n<span class=\"line\"><span style=\"color: #24292f\">  |          `x` is borrowed here</span></span></code></pre>\n<p>クロージャ外から出た後までライフタイムを必要とするような処理はできないということです。<br>\nこれは、以下のようにクロージャ内で変数のライフタイムが尽きた後に参照しないように修正しなければなりません。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">main</span><span style=\"color: #24292F\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  (</span><span style=\"color: #0550AE\">1</span><span style=\"color: #CF222E\">..=</span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">for_each</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\">x</span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">println!</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"{}\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Into</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">></span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">into</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x)));</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>もしくは所有権を要求してしまうという手もあります。所有権を得た後はライフタイムが伸びるのでこれは問題ありません。</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">num</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">fmt</span><span style=\"color: #CF222E\">::</span><span style=\"color: #24292F\">{</span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\">};</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">use</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">std</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">ops</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">pub</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">enum</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">Box</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #CF222E\">dyn</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\">>),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">fmt</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\">, f</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&#x26;mut</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Formatter</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Result</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">self</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Fizz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"Buzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"FizzBuzz\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(x) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">write!</span><span style=\"color: #24292F\">(f, </span><span style=\"color: #0A3069\">\"{x}\"</span><span style=\"color: #24292F\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CF222E\">impl</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span></span>\n<span class=\"line\"><span style=\"color: #CF222E\">where</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> '</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Display</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">From</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">u8</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\">&#x3C;'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">> </span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">'</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Rem</span><span style=\"color: #24292F\">&#x3C;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">Output</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">>,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">U</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Zero</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">fn</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">-></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">match</span><span style=\"color: #24292F\"> ((</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">(), (</span><span style=\"color: #CF222E\">&#x26;</span><span style=\"color: #24292F\">x </span><span style=\"color: #CF222E\">%</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">from</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">))</span><span style=\"color: #CF222E\">.</span><span style=\"color: #8250DF\">is_zero</span><span style=\"color: #24292F\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, _) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Fizz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      (_, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #953800\">Buzz</span><span style=\"color: #24292F\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">      _ </span><span style=\"color: #CF222E\">=></span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">FizzBuzz</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">Number</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">Box</span><span style=\"color: #CF222E\">::</span><span style=\"color: #8250DF\">new</span><span style=\"color: #24292F\">(x)),</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292F\">}</span></span></code></pre>\n<p>以上のように書けますが、どちらにせよBoxによるメモリ操作や動的ディスパッチによる実行時オーバーヘッドがあることには変わりありません。※静的ディスパッチであればビルド後のサイズは多少膨らむものの実行時のオーバーヘッドは無い。</p>\n<p>このように、過大なライフタイムを要求すると、後々取り回しに苦労してしまうので、パフォーマンスや汎用性を天秤にかけて判断するようにしましょう。</p>\n</div>\n<p>RustでFizzBuzzを実装してみましたという話でした。</p><style>\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n</style>","recents":[{"slug":"posts/nextjs-plantuml","date":"2023-03-04T23:04:03+0900","draft":false,"title":"Next.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGとして出力する","description":"Next.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGにして出力してみたいと思うこと、ありますよね。僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。","content":"\r\nNext.jsでSSG時にRemarkでPlantUMLで書いたAWSのアーキテクチャ図をSVGにして出力してみたいと思うこと、ありますよね。  \r\n僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。\r\n\r\n今回は`remark-sync-plantuml`を使って実装しました。\r\n\r\nこのサイトではMarkdownを`unified`で扱っているので`remark-sync-plantuml`を`use`します。  \r\n`remark-sync-plantuml`はjavaでplantuml.jarを使ってMermaidをSVGにしているらしく、このサイトはGitHub Actionsでビルドしているので問題なく動かせそうなので採用しました。\r\n\r\n```typescript\r\nimport rehypeShiki from '@leafac/rehype-shiki';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkMermaid from 'remark-mermaidjs';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport remarkPlantUML from 'remark-sync-plantuml';\r\nimport { getHighlighter } from 'shiki';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n\t(\r\n\t\tawait unified()\r\n\t\t\t.use(remarkParse)\r\n\t\t\t.use(remarkMath)\r\n\t\t\t.use(remarkGfm)\r\n\t\t\t.use(remarkMermaid, {\r\n\t\t\t\tlaunchOptions: {\r\n\t\t\t\t\texecutablePath:\r\n\t\t\t\t\t\tprocess.env.GoogleChromeExecutablePath ??\r\n\t\t\t\t\t\t'/opt/google/chrome/google-chrome',\r\n\t\t\t\t},\r\n\t\t\t\tsvgo: false,\r\n\t\t\t})\r\n\t\t\t.use(remarkPlantUML)\r\n\t\t\t.use(remarkRehype, {\r\n\t\t\t\tallowDangerousHtml: true,\r\n\t\t\t\tfootnoteLabel: '脚注',\r\n\t\t\t})\r\n\t\t\t.use(rehypeShiki, {\r\n\t\t\t\thighlighter: await getHighlighter({\r\n\t\t\t\t\ttheme: 'github-light',\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\t.use(rehypeKatex)\r\n\t\t\t.use(rehypeStringify, { allowDangerousHtml: true })\r\n\t\t\t.process(markdown)\r\n\t)\r\n\t\t.toString();\r\n\r\n```\r\n\r\n以下にサンプルを置いておきます。図がSVGになっていることがわかると思います。\r\n\r\n## AWS Architecture Diagrams\r\n\r\nAWSが<https://github.com/awslabs/aws-icons-for-plantuml>で公開しているAWS Icons for PlantUMLも使うことができます。  \r\nこれなら簡単にAWSのアーキテクチャ図を書くことができて便利です。\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)\r\n\r\n!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist\r\n\r\n!include AWSPuml/AWSCommon.puml\r\n!include AWSPuml/AWSExperimental.puml\r\n!include AWSPuml/Groups/all.puml\r\n!include AWSPuml/Compute/LambdaLambdaFunction.puml\r\n!include AWSPuml/General/Documents.puml\r\n!include AWSPuml/General/Multimedia.puml\r\n!include AWSPuml/General/Tapestorage.puml\r\n!include AWSPuml/General/User.puml\r\n!include AWSPuml/MediaServices/ElementalMediaConvert.puml\r\n!include AWSPuml/MachineLearning/Transcribe.puml\r\n!include AWSPuml/Storage/SimpleStorageService.puml\r\n\r\n' define custom group for Amazon S3 bucket\r\nAWSGroupColoring(S3BucketGroup, #FFFFFF, AWS_COLOR_GREEN, plain)\r\n!define S3BucketGroup(g_alias, g_label=\"Amazon S3 bucket\") AWSGroupEntity(g_alias, g_label, AWS_COLOR_GREEN, SimpleStorageService, S3BucketGroup)\r\n\r\n' Groups are rectangles with a custom style using stereotype - need to hide\r\nhide stereotype\r\nskinparam linetype ortho\r\nskinparam rectangle {\r\n\t\tBackgroundColor AWS_BG_COLOR\r\n\t\tBorderColor transparent\r\n}\r\nsprite Callout_1 <svg width=\"18\" height=\"18\"><circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"black\" /><text x=\"5\" y=\"13\" fill=\"#FFFFFF\" font-size=\"12\">1</text></svg>\r\n\r\nrectangle \"$UserIMG()\\nユーザー\" as user\r\nAWSCloudGroup(cloud){\r\n\tRegionGroup(region) {\r\n\t\tS3BucketGroup(s3) {\r\n\t\t\trectangle \"$MultimediaIMG()\\n\\t動画\\t\" as video\r\n\t\t\trectangle \"$TapestorageIMG()\\n\\t音声\\t\" as audio\r\n\t\t\trectangle \"$DocumentsIMG()\\n\\tテキスト\\t\" as transcript\r\n\r\n\t\t\tuser -r-> video: <$Callout_1>\\lアップロード\r\n\t\t\tvideo -r-> audio\r\n\t\t\taudio -r-> transcript\r\n\t\t}\r\n\r\n\t\trectangle \"$LambdaLambdaFunctionIMG()\\nObjectCreated\\nevent handler\" as e1\r\n\t\trectangle \"$ElementalMediaConvertIMG()\\nAWS Elemental\\nMediaConvert\" as mediaconvert\r\n\t\trectangle \"$TranscribeIMG()\\nAmazon Transcribe\\n\" as transcribe\r\n\r\n\t\tvideo -d-> e1: <$Callout_2>\r\n\t\te1 -[hidden]r-> mediaconvert\r\n\t\tmediaconvert -[hidden]r-> transcribe\r\n\t\tmediaconvert -u-> audio: <$Callout_3>\r\n\t\ttranscribe -u-> transcript: <$Callout_4>\r\n\r\n\t\tStepFunctionsWorkflowGroup(sfw) {\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\nextract audio\" as sfw1\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\ntranscribe audio\" as sfw2\r\n\r\n\t\t\te1 -r-> sfw1: 起動\r\n\t\t\tsfw1 -r-> sfw2\r\n\t\t\tsfw1 -u-> mediaconvert\r\n\t\t\tsfw2 -u-> transcribe\r\n\t\t}\r\n\t}\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)\r\n\r\n!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist\r\n\r\n!include AWSPuml/AWSCommon.puml\r\n!include AWSPuml/AWSExperimental.puml\r\n!include AWSPuml/Groups/all.puml\r\n!include AWSPuml/Compute/LambdaLambdaFunction.puml\r\n!include AWSPuml/General/Documents.puml\r\n!include AWSPuml/General/Multimedia.puml\r\n!include AWSPuml/General/Tapestorage.puml\r\n!include AWSPuml/General/User.puml\r\n!include AWSPuml/MediaServices/ElementalMediaConvert.puml\r\n!include AWSPuml/MachineLearning/Transcribe.puml\r\n!include AWSPuml/Storage/SimpleStorageService.puml\r\n\r\n' define custom group for Amazon S3 bucket\r\nAWSGroupColoring(S3BucketGroup, #FFFFFF, AWS_COLOR_GREEN, plain)\r\n!define S3BucketGroup(g_alias, g_label=\"Amazon S3 bucket\") AWSGroupEntity(g_alias, g_label, AWS_COLOR_GREEN, SimpleStorageService, S3BucketGroup)\r\n\r\n' Groups are rectangles with a custom style using stereotype - need to hide\r\nhide stereotype\r\nskinparam linetype ortho\r\nskinparam rectangle {\r\n\t\tBackgroundColor AWS_BG_COLOR\r\n\t\tBorderColor transparent\r\n}\r\nsprite Callout_1 <svg width=\"18\" height=\"18\"><circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"black\" /><text x=\"5\" y=\"13\" fill=\"#FFFFFF\" font-size=\"12\">1</text></svg>\r\n\r\nrectangle \"$UserIMG()\\nユーザー\" as user\r\nAWSCloudGroup(cloud){\r\n\tRegionGroup(region) {\r\n\t\tS3BucketGroup(s3) {\r\n\t\t\trectangle \"$MultimediaIMG()\\n\\t動画\\t\" as video\r\n\t\t\trectangle \"$TapestorageIMG()\\n\\t音声\\t\" as audio\r\n\t\t\trectangle \"$DocumentsIMG()\\n\\tテキスト\\t\" as transcript\r\n\r\n\t\t\tuser -r-> video: <$Callout_1>\\lアップロード\r\n\t\t\tvideo -r-> audio\r\n\t\t\taudio -r-> transcript\r\n\t\t}\r\n\r\n\t\trectangle \"$LambdaLambdaFunctionIMG()\\nObjectCreated\\nevent handler\" as e1\r\n\t\trectangle \"$ElementalMediaConvertIMG()\\nAWS Elemental\\nMediaConvert\" as mediaconvert\r\n\t\trectangle \"$TranscribeIMG()\\nAmazon Transcribe\\n\" as transcribe\r\n\r\n\t\tvideo -d-> e1: <$Callout_2>\r\n\t\te1 -[hidden]r-> mediaconvert\r\n\t\tmediaconvert -[hidden]r-> transcribe\r\n\t\tmediaconvert -u-> audio: <$Callout_3>\r\n\t\ttranscribe -u-> transcript: <$Callout_4>\r\n\r\n\t\tStepFunctionsWorkflowGroup(sfw) {\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\nextract audio\" as sfw1\r\n\t\t\trectangle \"$LambdaLambdaFunctionIMG()\\ntranscribe audio\" as sfw2\r\n\r\n\t\t\te1 -r-> sfw1: 起動\r\n\t\t\tsfw1 -r-> sfw2\r\n\t\t\tsfw1 -u-> mediaconvert\r\n\t\t\tsfw2 -u-> transcribe\r\n\t\t}\r\n\t}\r\n}\r\n@enduml\r\n```\r\n\r\n## 他のUML図\r\n\r\nPlantUMLで書ける他のUML図の例も紹介しておきます。\r\n\r\n### シーケンス図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nparticipant User\r\n\r\nUser -> A: DoWork\r\nactivate A #FFBBBB\r\n\r\nA -> A: Internal call\r\nactivate A #DarkSalmon\r\n\r\nA -> B: << createRequest >>\r\nactivate B\r\n\r\nB --> A: RequestCreated\r\ndeactivate B\r\ndeactivate A\r\nA -> User: Done\r\ndeactivate A\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nparticipant User\r\n\r\nUser -> A: DoWork\r\nactivate A #FFBBBB\r\n\r\nA -> A: Internal call\r\nactivate A #DarkSalmon\r\n\r\nA -> B: << createRequest >>\r\nactivate B\r\n\r\nB --> A: RequestCreated\r\ndeactivate B\r\ndeactivate A\r\nA -> User: Done\r\ndeactivate A\r\n\r\n@enduml\r\n```\r\n\r\n### ユースケース図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nUser -> (Start)\r\nUser --> (Use the application) : A small label\r\n\r\n:Main Admin: ---> (Use the application) : This is\\nyet another\\nlabel\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nUser -> (Start)\r\nUser --> (Use the application) : A small label\r\n\r\n:Main Admin: ---> (Use the application) : This is\\nyet another\\nlabel\r\n\r\n@enduml\r\n```\r\n\r\n### クラス図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nclass Student {\r\n  Name\r\n}\r\nStudent \"0..*\" - \"1..*\" Course\r\n(Student, Course) .. Enrollment\r\n\r\nclass Enrollment {\r\n  drop()\r\n  cancel()\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nclass Student {\r\n  Name\r\n}\r\nStudent \"0..*\" - \"1..*\" Course\r\n(Student, Course) .. Enrollment\r\n\r\nclass Enrollment {\r\n  drop()\r\n  cancel()\r\n}\r\n@enduml\r\n```\r\n\r\n### アクティビティ図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nstart\r\nrepeat\r\n  :Test something;\r\n    if (Something went wrong?) then (no)\r\n      #palegreen:OK;\r\n      break\r\n    endif\r\n    ->NOK;\r\n    :Alert \"Error with long text\";\r\nrepeat while (Something went wrong with long text?) is (yes) not (no)\r\n->//merged step//;\r\n:Alert \"Success\";\r\nstop\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nstart\r\nrepeat\r\n  :Test something;\r\n    if (Something went wrong?) then (no)\r\n      #palegreen:OK;\r\n      break\r\n    endif\r\n    ->NOK;\r\n    :Alert \"Error with long text\";\r\nrepeat while (Something went wrong with long text?) is (yes) not (no)\r\n->//merged step//;\r\n:Alert \"Success\";\r\nstop\r\n@enduml\r\n```\r\n\r\n### コンポーネント図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n\r\npackage \"Some Group\" {\r\n  HTTP - [First Component]\r\n  [Another Component]\r\n}\r\n\r\nnode \"Other Groups\" {\r\n  FTP - [Second Component]\r\n  [First Component] --> FTP\r\n}\r\n\r\ncloud {\r\n  [Example 1]\r\n}\r\n\r\n\r\ndatabase \"MySql\" {\r\n  folder \"This is my folder\" {\r\n    [Folder 3]\r\n  }\r\n  frame \"Foo\" {\r\n    [Frame 4]\r\n  }\r\n}\r\n\r\n\r\n[Another Component] --> [Example 1]\r\n[Example 1] --> [Folder 3]\r\n[Folder 3] --> [Frame 4]\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n\r\npackage \"Some Group\" {\r\n  HTTP - [First Component]\r\n  [Another Component]\r\n}\r\n\r\nnode \"Other Groups\" {\r\n  FTP - [Second Component]\r\n  [First Component] --> FTP\r\n}\r\n\r\ncloud {\r\n  [Example 1]\r\n}\r\n\r\n\r\ndatabase \"MySql\" {\r\n  folder \"This is my folder\" {\r\n    [Folder 3]\r\n  }\r\n  frame \"Foo\" {\r\n    [Frame 4]\r\n  }\r\n}\r\n\r\n\r\n[Another Component] --> [Example 1]\r\n[Example 1] --> [Folder 3]\r\n[Folder 3] --> [Frame 4]\r\n\r\n@enduml\r\n```\r\n\r\n### マインドマップ図\r\n\r\n````markdown\r\n```plantuml\r\n@startmindmap\r\n+ root node\r\n++ some first level node\r\n+++_ second level node\r\n+++_ another second level node\r\n+++_ foo\r\n+++_ bar\r\n+++_ foobar\r\n++_ another first level node\r\n-- some first right level node\r\n--_ another first right level node\r\n@endmindmap\r\n```\r\n````\r\n\r\n```plantuml\r\n@startmindmap\r\n+ root node\r\n++ some first level node\r\n+++_ second level node\r\n+++_ another second level node\r\n+++_ foo\r\n+++_ bar\r\n+++_ foobar\r\n++_ another first level node\r\n-- some first right level node\r\n--_ another first right level node\r\n@endmindmap\r\n```\r\n\r\n### 状態図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\nscale 600 width\r\n\r\n[*] -> State1\r\nState1 --> State2 : Succeeded\r\nState1 --> [*] : Aborted\r\nState2 --> State3 : Succeeded\r\nState2 --> [*] : Aborted\r\nstate State3 {\r\n  state \"Accumulate Enough Data\\nLong State Name\" as long1\r\n  long1 : Just a test\r\n  [*] --> long1\r\n  long1 --> long1 : New Data\r\n  long1 --> ProcessData : Enough Data\r\n}\r\nState3 --> State3 : Failed\r\nState3 --> [*] : Succeeded / Save Result\r\nState3 --> [*] : Aborted\r\n\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\nscale 600 width\r\n\r\n[*] -> State1\r\nState1 --> State2 : Succeeded\r\nState1 --> [*] : Aborted\r\nState2 --> State3 : Succeeded\r\nState2 --> [*] : Aborted\r\nstate State3 {\r\n  state \"Accumulate Enough Data\\nLong State Name\" as long1\r\n  long1 : Just a test\r\n  [*] --> long1\r\n  long1 --> long1 : New Data\r\n  long1 --> ProcessData : Enough Data\r\n}\r\nState3 --> State3 : Failed\r\nState3 --> [*] : Succeeded / Save Result\r\nState3 --> [*] : Aborted\r\n\r\n@enduml\r\n```\r\n\r\n### オブジェクト図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml PERT\r\nleft to right direction\r\n' Horizontal lines: -->, <--, <-->\r\n' Vertical lines: ->, <-, <->\r\ntitle PERT: Project Name\r\n\r\nmap Kick.Off {\r\n}\r\nmap task.1 {\r\n    Start => End\r\n}\r\nmap task.2 {\r\n    Start => End\r\n}\r\nmap task.3 {\r\n    Start => End\r\n}\r\nmap task.4 {\r\n    Start => End\r\n}\r\nmap task.5 {\r\n    Start => End\r\n}\r\nKick.Off --> task.1 : Label 1\r\nKick.Off --> task.2 : Label 2\r\nKick.Off --> task.3 : Label 3\r\ntask.1 --> task.4\r\ntask.2 --> task.4\r\ntask.3 --> task.4\r\ntask.4 --> task.5 : Label 4\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml PERT\r\nleft to right direction\r\n' Horizontal lines: -->, <--, <-->\r\n' Vertical lines: ->, <-, <->\r\ntitle PERT: Project Name\r\n\r\nmap Kick.Off {\r\n}\r\nmap task.1 {\r\n    Start => End\r\n}\r\nmap task.2 {\r\n    Start => End\r\n}\r\nmap task.3 {\r\n    Start => End\r\n}\r\nmap task.4 {\r\n    Start => End\r\n}\r\nmap task.5 {\r\n    Start => End\r\n}\r\nKick.Off --> task.1 : Label 1\r\nKick.Off --> task.2 : Label 2\r\nKick.Off --> task.3 : Label 3\r\ntask.1 --> task.4\r\ntask.2 --> task.4\r\ntask.3 --> task.4\r\ntask.4 --> task.5 : Label 4\r\n@enduml\r\n```\r\n\r\n### ネットワーク図\r\n\r\n````markdown\r\n```plantuml\r\n@startuml\r\n!include <office/Servers/application_server>\r\n!include <office/Servers/database_server>\r\n\r\nnwdiag {\r\n  network dmz {\r\n      address = \"210.x.x.x/24\"\r\n\r\n      // set multiple addresses (using comma)\r\n      web01 [address = \"210.x.x.1, 210.x.x.20\",  description = \"<$application_server>\\n web01\"]\r\n      web02 [address = \"210.x.x.2\",  description = \"<$application_server>\\n web02\"];\r\n  }\r\n  network internal {\r\n      address = \"172.x.x.x/24\";\r\n\r\n      web01 [address = \"172.x.x.1\"];\r\n      web02 [address = \"172.x.x.2\"];\r\n      db01 [address = \"172.x.x.100\",  description = \"<$database_server>\\n db01\"];\r\n      db02 [address = \"172.x.x.101\",  description = \"<$database_server>\\n db02\"];\r\n  }\r\n}\r\n@enduml\r\n```\r\n````\r\n\r\n```plantuml\r\n@startuml\r\n!include <office/Servers/application_server>\r\n!include <office/Servers/database_server>\r\n\r\nnwdiag {\r\n  network dmz {\r\n      address = \"210.x.x.x/24\"\r\n\r\n      // set multiple addresses (using comma)\r\n      web01 [address = \"210.x.x.1, 210.x.x.20\",  description = \"<$application_server>\\n web01\"]\r\n      web02 [address = \"210.x.x.2\",  description = \"<$application_server>\\n web02\"];\r\n  }\r\n  network internal {\r\n      address = \"172.x.x.x/24\";\r\n\r\n      web01 [address = \"172.x.x.1\"];\r\n      web02 [address = \"172.x.x.2\"];\r\n      db01 [address = \"172.x.x.100\",  description = \"<$database_server>\\n db01\"];\r\n      db02 [address = \"172.x.x.101\",  description = \"<$database_server>\\n db02\"];\r\n  }\r\n}\r\n@enduml\r\n```\r\n\r\n### ガントチャート図\r\n\r\n````markdown\r\n```plantuml\r\n@startgantt\r\n<style>\r\nganttDiagram {\r\n\ttask {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t}\r\n\tmilestone {\r\n\t\tFontColor blue\r\n\t\tFontSize 25\r\n\t\tFontStyle italic\r\n\t\tBackGroundColor yellow\r\n\t\tLineColor red\r\n\t}\r\n\tnote {\r\n\t\tFontColor DarkGreen\r\n\t\tFontSize 10\r\n\t\tLineColor OrangeRed\r\n\t}\r\n\tarrow {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t\tLineStyle 8.0;13.0\r\n\t\tLineThickness 3.0\r\n\t}\r\n\tseparator {\r\n\t\tBackgroundColor lightGreen\r\n\t\tLineStyle 8.0;3.0\r\n\t\tLineColor red\r\n\t\tLineThickness 1.0\r\n\t\tFontSize 16\r\n\t\tFontStyle bold\r\n\t\tFontColor purple\r\n\t\tMargin 5\r\n\t\tPadding 20\r\n\t}\r\n\ttimeline {\r\n\t    BackgroundColor Bisque\r\n\t}\r\n\tclosed {\r\n\t\tBackgroundColor pink\r\n\t\tFontColor red\r\n\t}\r\n}\r\n</style>\r\nProject starts the 2020-12-01\r\n\r\n[Task1] lasts 10 days\r\nsunday are closed\r\n\r\nnote bottom\r\n  memo1 ...\r\n  memo2 ...\r\n  explanations1 ...\r\n  explanations2 ...\r\nend note\r\n\r\n[Task2] lasts 20 days\r\n[Task2] starts 10 days after [Task1]'s end\r\n-- Separator title --\r\n[M1] happens on 5 days after [Task1]'s end\r\n\r\n<style>\r\n\tseparator {\r\n\t    LineColor black\r\n\t\tMargin 0\r\n\t\tPadding 0\r\n\t}\r\n</style>\r\n\r\n-- end --\r\n@endgantt\r\n```\r\n````\r\n\r\n```plantuml\r\n@startgantt\r\n<style>\r\nganttDiagram {\r\n\ttask {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t}\r\n\tmilestone {\r\n\t\tFontColor blue\r\n\t\tFontSize 25\r\n\t\tFontStyle italic\r\n\t\tBackGroundColor yellow\r\n\t\tLineColor red\r\n\t}\r\n\tnote {\r\n\t\tFontColor DarkGreen\r\n\t\tFontSize 10\r\n\t\tLineColor OrangeRed\r\n\t}\r\n\tarrow {\r\n\t\tFontName Helvetica\r\n\t\tFontColor red\r\n\t\tFontSize 18\r\n\t\tFontStyle bold\r\n\t\tBackGroundColor GreenYellow\r\n\t\tLineColor blue\r\n\t\tLineStyle 8.0;13.0\r\n\t\tLineThickness 3.0\r\n\t}\r\n\tseparator {\r\n\t\tBackgroundColor lightGreen\r\n\t\tLineStyle 8.0;3.0\r\n\t\tLineColor red\r\n\t\tLineThickness 1.0\r\n\t\tFontSize 16\r\n\t\tFontStyle bold\r\n\t\tFontColor purple\r\n\t\tMargin 5\r\n\t\tPadding 20\r\n\t}\r\n\ttimeline {\r\n\t    BackgroundColor Bisque\r\n\t}\r\n\tclosed {\r\n\t\tBackgroundColor pink\r\n\t\tFontColor red\r\n\t}\r\n}\r\n</style>\r\nProject starts the 2020-12-01\r\n\r\n[Task1] lasts 10 days\r\nsunday are closed\r\n\r\nnote bottom\r\n  memo1 ...\r\n  memo2 ...\r\n  explanations1 ...\r\n  explanations2 ...\r\nend note\r\n\r\n[Task2] lasts 20 days\r\n[Task2] starts 10 days after [Task1]'s end\r\n-- Separator title --\r\n[M1] happens on 5 days after [Task1]'s end\r\n\r\n<style>\r\n\tseparator {\r\n\t    LineColor black\r\n\t\tMargin 0\r\n\t\tPadding 0\r\n\t}\r\n</style>\r\n\r\n-- end --\r\n@endgantt\r\n```\r\n\r\nPlantUML記法なら簡単にグラフを書けて便利なので、どんどん使っていきたいと思います。\r\n","tags":["PlantUML","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions"],"category":"blog"},{"slug":"posts/onion-website","date":"2023-02-04T11:14:43+0900","draft":false,"title":"OnionドメインのウェブサイトをDockerで構築して公開する","description":"OnionドメインのウェブサイトをDockerで構築して公開したいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nOnionドメインのウェブサイトをDockerで構築して公開したいこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\nなお、この記事を書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873117763?&linkCode=ll1&tag=nishidemasami-22&linkId=7b0a0e16eab9786a7b21bcf0d7c4e768&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >O'Reilly Docker</a>を参考にしました。\r\n\r\n## 最小構成で作る\r\n\r\n構築の土台となる部分を最小構成で作成します。  \r\n最小構成で一旦動かしてみることで動きなども理解できます。\r\n\r\n### Docker\r\n\r\nまず`docker-compose.yml`を作ります。  \r\n`tor`コンテナと`nginx`コンテナを用意して`tor_network`ネットワークでつなげることにします。  \r\n`nginx`コンテナは、なんとなくセキュリティが高い気がする`nginx:alpine`を使用します。  \r\n`tor`コンテナは、後述の`Dockerfile`を使用します。  \r\n\r\n<div class=\"preshiki\">docker-compose.yml</div>\r\n\r\n```yaml\r\nversion: '3'\r\n\r\nservices:\r\n  nginx:\r\n    image: nginx:alpine\r\n    network_mode: \"none\"\r\n    networks:\r\n      - tor_network\r\n    volumes:\r\n      - ./htdocs:/usr/share/nginx/html:ro\r\n  tor:\r\n    build:\r\n      dockerfile: ./tor/Dockerfile\r\n    networks:\r\n      - tor_network\r\n    volumes:\r\n      - ./data:/var/lib/tor\r\n      - ./tor/settings:/etc/tor\r\n\r\nnetworks:\r\n  tor_network:\r\n```\r\n\r\n### Tor\r\n\r\n`tor`コンテナのDockerfileは、`alpine:latest`にtorを追加して起動するだけのものです。\r\n\r\n<div class=\"preshiki\">tor/Dockerfile</div>\r\n\r\n```text\r\nFROM alpine:latest\r\n\r\nRUN apk update\r\nRUN apk add tor\r\n\r\nCMD [\"tor\", \"-f\", \"/etc/tor/torrc\"]\r\n```\r\n\r\n最後に、torの設定ファイルである`torrc`で、80ポートへの接続を`nginx`コンテナに向けています。  \r\n※Dockerネットワーク内ではコンテナ名で名前解決をすることができる\r\n\r\n<div class=\"preshiki\">tor/settings/torrc</div>\r\n\r\n```text\r\nSocksPort 0\r\nHiddenServiceDir /var/lib/tor/hidden_service/\r\nHiddenServicePort 80 nginx:80\r\n```\r\n\r\n誰かの踏み台にされるのだけは防ぐために`SocksPort 0`の設定をしていますが、自分でもTorプロクシとして利用したい場合はここを`SocksPort 0.0.0.0:9150`として、`Dockerfile`で`EXPOSE 9150`をしてから`docker-compose.yml`でtorのportsに`\"9150:9150\"`を追加することでSOCKSホストとして利用できます。\r\n\r\n### Nginx\r\n\r\n最小限の設定としては以上で完了ですが、なにも表示されないと動いているかどうかわからないので`index.html`を配置しておきます。\r\n\r\n<div class=\"preshiki\">htdocs/index.html</div>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>docker hidden service test title</title>\r\n  </head>\r\n  <body>\r\n    <div>docker hidden service test body div</div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n以上で最小構成は作成完了です。\r\n\r\n## 起動する\r\n\r\nDockerは普通に`docker-compose up -d`コマンドで起動します。\r\n\r\n### 起動確認(Onionドメインの疎通確認)\r\n\r\n起動すると、`data/hidden_service/hostname`に以下のようなファイルが出力されています。\r\n\r\n<pre class=\"preshiki\">data/hidden_service/hostname</pre>\r\n\r\n```text\r\nkxal3j4zblhjt4jinnbly6icciqbh2ihq4u2opsu4qhqyqazwsgaq3ad.onion\r\n```\r\n\r\nこのアドレスにTorブラウザなどで接続し、作成したindex.htmlが表示されていることを確認します。\r\n\r\n<div class=\"note alert\">\r\n\r\n<i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i> WindowsでDockerを立てている場合、ここで既に`data/hidden_service`が存在すると、以下のようなエラーメッセージが出て終了してしまいます。\r\n\r\n```text example-bad\r\n[notice] Tor 0.4.7.13 running on Linux with Libevent 2.1.12-stable, OpenSSL 3.0.7, Zlib 1.2.13, Liblzma 5.2.9, Libzstd 1.5.2 and Unknown N/A as libc.\r\n[notice] Tor can't help you if you use it wrong! Learn how to be safe at https://support.torproject.org/faq/staying-anonymous/\r\n[notice] Read configuration file \"/etc/tor/torrc\".\r\n[warn] Permissions on directory /var/lib/tor/hidden_service/ are too permissive.\r\n[warn] Failed to parse/validate config: Failed to configure rendezvous options. See logs for details.\r\n[err] Reading config failed--see warnings above.\r\n```\r\n\r\n既にWindows側の既存のディレクトリをDockerでマウントするとディレクトリのパーミッションが777になります。  \r\nそのためSSH接続時の証明書と同様に、パーミッションがあまりにもオープンすぎるとTorが判断するとエラーで止まるようです。  \r\nなので既存の`hidden_service`を使用したい場合は、`tor/Dockerfile`内で`COPY`したり`chmod -R 700 /var/lib/tor/hidden_service/`を叩く必要がありそうですが、今回は最小構成だけ作りたいのでここでは説明を省きます。\r\n\r\n</div>\r\n\r\n<div><img srcset=\"/assets/images/tor-browser-preview.webp\" alt=\"Torブラウザで表示できたところ\"/><div class=\"photo-space-detail\">Torブラウザで表示できたところ</div></div>\r\n\r\n無事に動いていることが確認できました。\r\n\r\nもしここからさらにセキュリティを高めるなら、`nginx`コンテナを外部に接続できないようにしたりすれば良いと思います。\r\n","tags":["Onion Service","Tor","Docker","Tor Hidden Service","Nginx"],"category":"blog"},{"slug":"articles/react-leaflet-egnlish","date":"2023-01-28T12:00:00+0900","draft":false,"title":"Reactで地図上に地名を英語で表示する","description":"Reactで地図上に地名を英語で表示したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { useMemo } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\n\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `Next.jsとReactとTypeScriptで地図に地名を英字表記で表示したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873119049?&linkCode=ll1&tag=nishidemasami-22&linkId=269abe7d00fb75538542192fd6ea40b4&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n[前回の記事](https://nishidemasami.github.io/articles/react-leaflet/)の続きです。\n\n国土地理院が、地図データをgeojson形式で公開してくれています。  \n[ベクトルタイルとその提供実験について 国土地理院](https://maps.gsi.go.jp/development/vt.html)  \n地名を多言語で表記するためのデータも公開してくれています。\n[国土地理院地図 多言語表記の地図 国土地理院](https://www.gsi.go.jp/kihonjohochousa/multilingual.html)  \n仕様も[PDF](https://www.gsi.go.jp/common/000212661.pdf)で見られます。\n\nこのデータも、国土地理院の地図と同様に、国土交通省国土地理院地図は利用規約を守る限り自由に使えます。  \n利用規約は以下の通りです。  \n国土地理院コンテンツ利用規約 国土地理院:<https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html>\n\n今回このデータを使って、地図上に地名などを表示するように作ってみました。  \n文字の色やサイズ、日本語と英語と非表示を切り替えられるように作ってみました。\n\nなお、本当はgeojsonには「地物種別コード(ftCode)」や「注記分類コード(annoCtg)」などで、どれが都道府県名だとかどれが空港名だとか、どれが河川名でどれが駅名だとかがコードでデータに入っていて、仕様も[PDF](https://maps.gsi.go.jp/help/pdf/vector/dataspec.pdf)で公開されているのですが、ご覧の通り(少なくとも個人開発でやる分には)やってられないので、今回は全部一緒くたに表示してみます。\n\nさて、実際に実装してみたのが ↓ これです。\n`;\n\nconst secondArticle = `\n先述の通り、都道府県名から河川名まで一緒くたに表示されているので見にくいですが、無事に表示することができました！  \n用途に合わせてもう少しチューニングしてゆけば、もっと見やすくなると思います。\n\nこれが ↓ この今回のコードです。\n\\`\\`\\`tsx\nimport React from 'react';\n\nimport { TextDecrease, TextIncrease } from '@mui/icons-material';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Slider,\n  Stack,\n  Typography,\n} from '@mui/material';\nimport { Util, geoJSON, marker, divIcon } from 'leaflet';\nimport { SketchPicker } from 'react-color';\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst languages = ['English', '日本語', '地名非表示'];\n\nconst MapController: React.FC<{\n  setZoom: (zoom: number) => void;\n}> = ({ setZoom }) => {\n  const map = useMap();\n  React.useEffect(() => {\n    map.on('zoomend', () => {\n      setZoom(map.getZoom());\n    });\n  }, [map, setZoom]);\n  return (\n    <TileLayer\n      attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\" target=\"_blank\">地理院タイル</a>'\n      url=\"https://maps.gsi.go.jp/xyz/pale2/{z}/{x}/{y}.png\"\n      eventHandlers={{\n        tileload: async (event) => {\n          const response = await fetch(\n            Util.template(\n              'https://cyberjapandata.gsi.go.jp/xyz/experimental_multil/{z}/{x}/{y}.geojson',\n              event.coords\n            )\n          );\n          if (!response.ok) return;\n          const geojson = await response.json();\n          if (!geojson) return;\n          const zoom = event.coords.z;\n          geoJSON(geojson, {\n            filter: (feature) => feature.properties.name,\n            pointToLayer: (feature, latlng) =>\n              marker(latlng, {\n                icon: divIcon({\n                  className: 'gsi-div-icon font-sans',\n                  html:\n                    \\`<span class=\"English marker zoomLevel\\${zoom}marker\">\\${feature.properties.name}</span>\\` +\n                    \\`<span class=\"日本語 marker zoomLevel\\${zoom}marker\">\\${feature.properties.knj}</span>\\`,\n                }),\n              }),\n          }).addTo(map);\n        },\n      }}\n    />\n  );\n};\n\nconst LeafletEnglishDemo = (): JSX.Element => {\n  const [zoom, setZoom] = React.useState<number>(7);\n  const [fontSize, setFontSize] = React.useState<number>(12);\n  const [color, setColor] = React.useState<string>('#000000');\n  const [language, setLanguage] = React.useState<string>('English');\n\n  return (\n    <div className={\\`allZoomLevel zoomLevel\\${zoom}\\`}>\n      <style jsx>\n        {\\`\n          :global(.allZoomLevel .marker) {\n            display: none;\n            color: \\${color};\n            font-size: \\${fontSize}px;\n            font-weight: bold;\n            text-shadow: -1px -1px #fff, 1px -1px #fff, -1px 1px #fff,\n              1px 1px #fff;\n            background: transparent;\n            line-height: \\${fontSize}px;\n            white-space: nowrap;\n          }\n          .allZoomLevel.zoomLevel\\${zoom}\n            :global(.zoomLevel\\${zoom}marker.\\${language}) {\n            display: block;\n          }\n        \\`}\n      </style>\n      <SketchPicker\n        className=\"float-left m-2\"\n        color={color}\n        disableAlpha\n        onChangeComplete={(value) => {\n          setColor(value.hex);\n        }}\n      />\n      <Typography className=\"m-1\">地図上の地名の文字設定</Typography>\n      <Stack\n        className=\"mb-1 w-1/2\"\n        spacing={2}\n        direction=\"row\"\n        alignItems=\"center\"\n      >\n        <TextDecrease />\n        <Slider\n          value={fontSize}\n          min={10}\n          max={50}\n          onChange={(_, newValue) => {\n            if (typeof newValue === 'number') setFontSize(newValue);\n          }}\n        />\n        <TextIncrease />\n      </Stack>\n      <FormControl margin=\"normal\">\n        <InputLabel>Language</InputLabel>\n        <Select\n          value={language}\n          label=\"Language\"\n          onChange={(event) => {\n            setLanguage(event.target.value);\n          }}\n        >\n          {languages.map((value) => (\n            <MenuItem key={value} value={value}>\n              {value}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <MapContainer\n        center={[35.0585904, 137.5191176]}\n        className=\"h-96 w-full\"\n        zoom={7}\n        minZoom={5}\n        maxZoom={17}\n        scrollWheelZoom={true}\n      >\n        <MapController setZoom={setZoom} />\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default LeafletEnglishDemo;\n\\`\\`\\`\nよかったら参考にしてみてください！(なげやり)\n`;\n\nconst ReactLeafletTest = (props: ReactSoundTestProps) => {\n\tconst LeafletDemoComponent = useMemo(\n\t\t() =>\n\t\t\tdynamic(() => import('../../components/Leaflet/LeafletEnglishDemo'), {\n\t\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\t\tssr: false,\n\t\t\t}),\n\t\t[]\n\t);\n\treturn (\n\t\t<Main\n\t\t\trecents={props.recents}\n\t\t\ttags={props.tags}\n\t\t\tmeta={\n\t\t\t\t<Meta\n\t\t\t\t\ttitle=\"Reactで地図上に地名を英語で表示する\"\n\t\t\t\t\tdescription=\"Reactで地図上に地名を英語で表示したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t\t/>\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"content-title\">Reactで地図上に地名を英語で表示する</h1>\n\t\t\t<div className=\"content-date\">\n\t\t\t\tPosted {format(new Date('2023-01-28T12:00:00+0900'), 'LLLL d, yyyy')}\n\t\t\t</div>\n\t\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t\t{[\n\t\t\t\t\t'TypeScript',\n\t\t\t\t\t'React',\n\t\t\t\t\t'OpenStreetMap',\n\t\t\t\t\t'国土地理院地図',\n\t\t\t\t\t'leaflet',\n\t\t\t\t\t'Next.js',\n\t\t\t\t].map((tag) => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\t\tkey={tag}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t\t#{tag}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<Content>\n\t\t\t\t<div>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t\t<LeafletDemoComponent />\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\n\t\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t\t</Main>\n\t);\n};\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactLeafletTest;\n","tags":["TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js"],"category":"blog"},{"slug":"articles/react-leaflet","date":"2023-01-21T01:04:03+0900","draft":false,"title":"Reactで国土地理院地図やOpenStreetMapなどを表示する","description":"ReactとTypeScriptで国土地理院地図やOpenStreetMapなどを表示したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { useMemo } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\n\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873119049?&linkCode=ll1&tag=nishidemasami-22&linkId=269abe7d00fb75538542192fd6ea40b4&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\nGoogle Mapsが2018年の7月頃に有料になってからかなり経ちました。  \nいまさらGoogle Mapsの代わりを探している人はいないと思いますが、あれから色々とWebの事情も変わったので自分用にメモの意味も込めて書いています。\n\n「画像タイル地図」を公開しているWebサービスはたくさんあります。  \nですが無料で自由に使えるものは意外と少なく、国土地理院やOpenStreetMapは貴重な選択肢の一つだと思います。  \n(「画像タイル地図」ではなく「ベクトルタイル地図」も国土地理院は(実験的に)提供しているので次の記事で説明します。)\n\n### 国土地理院地図\n\n国土交通省国土地理院地図は利用規約を守る限り自由に使えます。  \n利用規約は以下です。  \n国土地理院コンテンツ利用規約 国土地理院:<https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html>\n\n### OpenStreetMap\n\nOpenStreetMapもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nOpenStreetMap著作権とライセンス:<https://www.openstreetmap.org/copyright/ja>  \nOpenStreetMapは現地の言語(日本はもちろん日本語)を表示しているみたいでした。  \nただ、ドイツ語版が日本では英語を併記しているようなので試しに表示してみます。\n\n### Stamen Maps\n\nStamen MapsもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nStamen Maps:<http://maps.stamen.com/>  \n\n### OpenTopoMap\n\nOpenTopoMapは、OSMやSRTMのデータから地形図を表示するようにした地図です。ライセンスはCC-BY-SAです。  \nOpenTopoMap:<opentopomap.org>  \n\n今回は、この4つのフリーの地図から5種類の地図を表示してみたいと思います。\n\n地図描画にはLeafletを使用します。\n\nライブラリとしては現在最新の\\`leaflet@1.9.3\\`と\\`react-leaflet@4.2.0\\`、それからTypeScript用の型定義として\\`@types/leaflet@1.9.0\\`を利用しています。  \n※react-leafletはバージョンがv4にメジャーバージョンアップされてからまだ1年も経っておらず、ネット上にもv3の情報ばかりですが最近v4の情報も少しずつ増えてきています。僕もこのことに困っていたので後の参考になるようにこの記事を書いています。\n\n必要なnpm installは以下の通りです。TypeScript用にleafletの型定義が公開されています。react-leafletは最初から型定義が含まれています。\n\n\\`\\`\\`bash\nnpm install leaflet react-leaflet\nnpm install -D @types/leaflet\n\\`\\`\\`\n\n以上で実装のための説明は終了ですが、ただ地図を表示するだけだとつまらないので今回は東海道五十三次の場所をピンで表示して、セレクトボックスで選択したらその場所に動くようにしてみます。  \nそのための\\`@mui/material\\`も入れています。\n\n実際に実装してみたのが ↓ これです。\n`;\n\nconst secondArticle = `\n\n書いたのが ↓ この今回のコードです。\n\\`\\`\\`tsx\nimport React from 'react';\n\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { LatLngExpression, Icon } from 'leaflet';\nimport PinIcon from 'leaflet/dist/images/marker-icon.png';\nimport { TileLayer, MapContainer, Marker, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst merkerIcon = new Icon({\n  iconUrl: PinIcon.src,\n  iconAnchor: [13, 41],\n});\n\nconst maps = [\n  {\n    name: 'OpenStreetMap',\n    url: 'https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png',\n    attribution:\n      'Daten von <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> - Veröffentlicht unter <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>',\n  },\n  {\n    name: '国土地理院地図',\n    url: 'https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',\n    attribution:\n      '<a href=\"https://maps.gsi.go.jp/development/ichiran.html\" target=\"_blank\">地理院タイル</a>',\n  },\n  {\n    name: 'OpenStreetMap(日本語版)',\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  },\n  {\n    name: 'Stamen Maps(Terrain)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'Stamen Maps(Toner)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'OpenTopoMap',\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributions, <a href=\"http://viewfinderpanoramas.org/\">SRTM</a> | map style: © <a href=\"https://opentopomap.org/#map=15/35.68374/139.75330\">OpenTopoMap</a>',\n  },\n];\nconst places: {\n  name: string;\n  latlng: LatLngExpression;\n}[] = [\n  { name: '日本橋', latlng: [35.6836111111111, 139.774444444444] },\n  { name: '品川宿', latlng: [35.6219444444444, 139.739166666667] },\n  { name: '川崎宿', latlng: [35.5355555555556, 139.707777777778] },\n  { name: '神奈川宿', latlng: [35.4727777777778, 139.632277777778] },\n  { name: '保ヶ谷宿', latlng: [35.4440277777778, 139.595555555556] },\n  { name: '戸塚宿', latlng: [35.3950277777778, 139.529861111111] },\n  { name: '藤沢宿', latlng: [35.3456666666667, 139.486305555556] },\n  { name: '平塚宿', latlng: [35.3272777777778, 139.337805555556] },\n  { name: '大磯宿', latlng: [35.309, 139.315305555556] },\n  { name: '小田原宿', latlng: [35.2487222222222, 139.161027777778] },\n  { name: '箱根宿', latlng: [35.1904166666667, 139.026361111111] },\n  { name: '三島宿', latlng: [35.11925, 138.914472222222] },\n  { name: '沼津宿', latlng: [35.1001111111111, 138.857416666667] },\n  { name: '原宿', latlng: [35.1255277777778, 138.797333333333] },\n  { name: '吉原宿', latlng: [35.1627777777778, 138.685638888889] },\n  { name: '蒲原宿', latlng: [35.1199722222222, 138.605472222222] },\n  { name: '由比宿', latlng: [35.1076111111111, 138.567472222222] },\n  { name: '興津宿', latlng: [35.0498333333333, 138.519555555556] },\n  { name: '江尻宿', latlng: [35.0198888888889, 138.480861111111] },\n  { name: '府中宿', latlng: [34.9749166666667, 138.387638888889] },\n  { name: '鞠子宿', latlng: [34.9494166666667, 138.342444444444] },\n  { name: '岡部宿', latlng: [34.9188333333333, 138.282666666667] },\n  { name: '藤枝宿', latlng: [34.8698055555556, 138.252722222222] },\n  { name: '島田宿', latlng: [34.8328055555556, 138.175861111111] },\n  { name: '金谷宿', latlng: [34.8228611111111, 138.129277777778] },\n  { name: '日坂宿', latlng: [34.8041388888889, 138.075361111111] },\n  { name: '掛川宿', latlng: [34.7729166666667, 138.015888888889] },\n  { name: '袋井宿', latlng: [34.7474722222222, 137.923222222222] },\n  { name: '見附宿', latlng: [34.7268055555556, 137.857027777778] },\n  { name: '浜松宿', latlng: [34.7051111111111, 137.731916666667] },\n  { name: '舞阪宿', latlng: [34.6843888888889, 137.608944444444] },\n  { name: '新居宿', latlng: [34.6941388888889, 137.560777777778] },\n  { name: '白須賀宿', latlng: [34.6885555555556, 137.500833333333] },\n  { name: '二川宿', latlng: [34.7230555555556, 137.464527777778] },\n  { name: '吉田宿', latlng: [34.7666388888889, 137.389722222222] },\n  { name: '御油宿', latlng: [34.8448888888889, 137.317333333333] },\n  { name: '赤坂宿', latlng: [34.8557222222222, 137.308222222222] },\n  { name: '藤川宿', latlng: [34.9110555555556, 137.222194444444] },\n  { name: '岡崎宿', latlng: [34.9579166666667, 137.169194444444] },\n  { name: '池鯉鮒宿', latlng: [35.0081111111111, 137.040944444444] },\n  { name: '鳴海宿', latlng: [35.0796666666667, 136.949805555556] },\n  { name: '宮宿', latlng: [35.1204166666667, 136.906722222222] },\n  { name: '桑名宿', latlng: [35.0687222222222, 136.6955] },\n  { name: '四日市宿', latlng: [34.9695277777778, 136.625277777778] },\n  { name: '石薬師宿', latlng: [34.9043333333333, 136.548] },\n  { name: '庄野宿', latlng: [34.8833888888889, 136.524833333333] },\n  { name: '亀山宿', latlng: [34.8543055555556, 136.454111111111] },\n  { name: '関宿', latlng: [34.8524722222222, 136.392083333333] },\n  { name: '坂下宿', latlng: [34.8885555555556, 136.354083333333] },\n  { name: '土山宿', latlng: [34.9344166666667, 136.283833333333] },\n  { name: '水口宿', latlng: [34.9655555555556, 136.1835] },\n  { name: '石部宿', latlng: [35.0100555555556, 136.054638888889] },\n  { name: '草津宿', latlng: [35.0174444444444, 135.960638888889] },\n  { name: '大津宿', latlng: [35.0059722222222, 135.861416666667] },\n  { name: '三条大橋', latlng: [35.0103333333333, 135.774361111111] },\n];\n\nconst MapController: React.FC<{ center?: LatLngExpression }> = ({ center }) => {\n  const map = useMap();\n  React.useEffect(() => {\n    if (center) {\n      map.setView(center, 13, { animate: true });\n    }\n  }, [center, map]);\n  return null;\n};\n\nconst LeafletDemo = (): JSX.Element => {\n  const [center, setCenter] = React.useState<LatLngExpression>();\n  const [mapName, setMapName] = React.useState(maps[0].name);\n  const [placeName, setPlaceName] = React.useState('');\n  const selectedMap = React.useMemo(\n    () => maps.find((value) => value.name === mapName)!,\n    [mapName]\n  );\n\n  return (\n    <>\n      <FormControl margin=\"normal\">\n        <InputLabel>地図選択</InputLabel>\n        <Select\n          value={mapName}\n          label=\"地図選択\"\n          onChange={(event) => {\n            setMapName(event.target.value);\n          }}\n        >\n          {maps.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <InputLabel>場所選択</InputLabel>\n        <Select\n          className=\"w-28\"\n          value={placeName}\n          label=\"場所選択\"\n          onChange={(event) => {\n            const selected = places.find(\n              (value) => value.name === event.target.value\n            );\n            if (selected) {\n              setPlaceName(selected.name);\n              setCenter(selected.latlng);\n            }\n          }}\n        >\n          {places.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <MapContainer\n        center={[35.0585904, 137.5191176]}\n        zoom={7}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        style={{ height: 400, width: '100%' }}\n      >\n        <MapController center={center} />\n        <TileLayer\n          attribution={selectedMap.attribution}\n          url={selectedMap.url}\n        />\n        {places.map((place) => (\n          <Marker key={place.name} position={place.latlng} icon={merkerIcon}>\n            <Popup>{place.name}</Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n    </>\n  );\n};\n\nexport default LeafletDemo;\n\\`\\`\\`\n\nなお、Next.jsでSSGでLeafletを含むページを静的に生成しようとすると\n\\`\\`\\`\nReferenceError: window is not defined\n\\`\\`\\`\nというエラーが出てしまうので、Dynamic Importで\n\\`\\`\\`tsx\nconst LeafletDemoComponent = React.useMemo(\n\t() =>\n\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\tssr: false,\n\t\t}),\n\t[]\n);\n\\`\\`\\`\nというコンポーネントを1つ挟んでブラウザへのレンダリング時に動的インポートさせて表示させるようにしました。\n`;\n\nconst ReactLeafletTest = (props: ReactSoundTestProps) => {\n\tconst LeafletDemoComponent = useMemo(\n\t\t() =>\n\t\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\t\tssr: false,\n\t\t\t}),\n\t\t[]\n\t);\n\treturn (\n\t\t<Main\n\t\t\trecents={props.recents}\n\t\t\ttags={props.tags}\n\t\t\tmeta={\n\t\t\t\t<Meta\n\t\t\t\t\ttitle=\"Reactで国土地理院地図やOpenStreetMapを表示する\"\n\t\t\t\t\tdescription=\"ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t\t/>\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"content-title\">\n\t\t\t\tReactで国土地理院地図やOpenStreetMapを表示する\n\t\t\t</h1>\n\t\t\t<div className=\"content-date\">\n\t\t\t\tPosted {format(new Date('2023-01-21T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t\t</div>\n\t\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t\t{[\n\t\t\t\t\t'TypeScript',\n\t\t\t\t\t'React',\n\t\t\t\t\t'OpenStreetMap',\n\t\t\t\t\t'国土地理院地図',\n\t\t\t\t\t'leaflet',\n\t\t\t\t\t'Next.js',\n\t\t\t\t].map((tag) => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\t\tkey={tag}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t\t#{tag}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<Content>\n\t\t\t\t<div>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t\t<LeafletDemoComponent />\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\n\t\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t\t</Main>\n\t);\n};\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactLeafletTest;\n","tags":["TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js"],"category":"blog"},{"slug":"posts/rust-fizzbuzz","date":"2022-12-31T04:58:43+0900","draft":false,"title":"RustでFizzBuzzを書く","description":"RustでFizzBuzzを書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\nRustでFizzBuzzを書いてみたいと思うこと、ありますよね。  \n僕はあるので自分用にメモです。\n\nなお、この記事を書くにあたって<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Rust-%E7%AC%AC2%E7%89%88-Jim-Blandy/dp/4873119782?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=16SB3SPXD9LVL&keywords=rust&qid=1672662058&sprefix=rust+%2Caps%2C261&sr=8-4&linkCode=ll1&tag=nishidemasami-22&linkId=5f2948f4e335959907e6a8b8e22b859d&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >プログラミングRust 第2版</a>を参考にしました。\n\nとりあえず最初に結論を書いておきます。\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n以上のようになると思います。\n\n以下、解説です。\n\nまず、何も考えずにRustでFizzBuzzを書くと以下のようになると思います。\n\n<div class=\"preshiki\">main.rs</div>\n\n```rust\nfn main() {\n  (1..=15).for_each(|x| {\n    match ((x % 3) == 0, (x % 5) == 0) {\n      (true, true) => println!(\"FizzBuzz\"),\n      (true, _) => println!(\"Fizz\"),\n      (_, true) => println!(\"Buzz\"),\n      _ => println!(\"{x}\"),\n    }\n  })\n}\n```\n\n<div class=\"preshiki\">Cargo.toml</div>\n\n```toml\n[package]\nname = \"fizzbuzz\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n```\n\nここからスタートしてゆきます。\n\n最終的に、以下のようにすることをゴールとします。\n\n* テスト可能\n* 汎用的\n* ゼロコスト抽象化\n\nまずメソッドに分けてからテストを書きます。\n\n<div class=\"preshiki\">main.rs</div>\n\n```rust\nfn fizzbuzz(x: u32) -> String {\n  match ((x % 3) == 0, (x % 5) == 0) {\n    (true, true) => \"FizzBuzz\".to_string(),\n    (true, _) => \"Fizz\".to_string(),\n    (_, true) => \"Buzz\".to_string(),\n    _ => x.to_string(),\n  }\n}\n\nfn main() {\n  (1..=15).map(fizzbuzz).for_each(|x| println!(\"{x}\"))\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(fizzbuzz)\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\n次はこれをRustらしく、`enum`に[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトと[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトを実装した書き方にします。  \n[`std::convert::From`](https://doc.rust-lang.org/std/convert/trait.From.html)トレイトの[`from()`](https://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from)メソッドを実装すれば[`std::convert::Into`](https://doc.rust-lang.org/std/convert/trait.Into.html)トレイトの[`into()`](https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into)メソッドが自動で実装され、[`fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)トレイトの[`fmt()`](https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt)メソッドを実装すれば[`std::string::ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html)トレイトの[`to_string()`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)メソッドが自動で実装されます。  \nついでにファイルも分けます。\n\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n\n```rust\nuse std::fmt;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl From<u32> for FizzBuzz {\n  fn from(x: u32) -> FizzBuzz {\n    match ((x % 3) == 0, (x % 5) == 0) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n```\n\n<div class=\"preshiki\">src/main.rs</div>\n\n```rust\nfn main() {\n  (1..=15).map(|x| -> FizzBuzz {\n    x.into()\n  } ).map(|x| -> String {\n    x.to_string()\n  } ).for_each(|x| println!(\"{x}\"))\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(|x| -> FizzBuzz {\n      x.into()\n    } )\n    .map(|x| -> String {\n      x.to_string()\n    } )\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\nさて、`u32`では`4294967295`が最大値なのは心もとないので拡張可能にしたいと考えると思います。  \nしかし、たとえ`u32`を`u128`にしたところで`340282366920938463463374607431768211455`が最大値です。  \nこれでは十分ではないので、もっと「抽象的な数値」を扱えるようにします。\n\nfizzbuzz関数$f(x)$を定義してみます。\n\n$$$\nf(x) =\n\\begin{cases}\n  \\text{FizzBuzz} & (x \\bmod 3 = 0 \\land x \\bmod 5 = 0)\\\\\n  \\text{Fizz} & (x \\bmod 3 = 0 \\land x \\bmod 5 \\neq 0)\\\\\n  \\text{Buzz} & (x \\bmod 3 \\neq 0 \\land x \\bmod 5 = 0)\\\\\n  x & (\\text{otherwize})\\\\\n\\end{cases}\n$$$\n\nここで定義を冷静になって見てみると、$x$に対する操作は「3で割る」「5で割る」「割った結果を0と比較する」「文字列に変換する」しかしていないことしかわかります。  \n型で表すと以下のようなものです。\n\n```rust\nT: Rem<T, Output = U> + From<u8> + ToString,\nU: Zero,\n```\n\nつまり、`u8`で割ることができて0と比較できて文字列に変換できる値なら、どんな値でもFizzBuzzをすることができるのです。  \nCloneも合わせて先述の`from`は以下のように書けるのです。\n\n```rust\nimpl<T, U> From<T> for FizzBuzz\nwhere\n  T: Rem<T, Output = U> + Clone + From<u8> + ToString,\n  U: Zero,\n{\n  fn from(x: T) -> FizzBuzz {\n    match ((x.clone() % T::from(3)).is_zero(), (x.clone() % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n`.clone()`を何度もするのはパフォーマンス上の観点から躊躇われますし処理上特に所有権も必要としておらず借用で十分なのでこれを借用に修正すると以下のようになります。\n\n```rust\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n  T: From<u8>,\n  &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n<div class=\"note alert\">\n\n<i class=\"fontawesome fa fa-times-circle\" style=\"color:#d60a34;font-size:20px;\" aria-hidden=\"true\"></i>もしここで以下のようにライフタイム`'a`の記述を書かないと…\n\n```rust example-bad\nimpl<'a, T, U> From<&'a T> for FizzBuzz\nwhere\n  T: From<u8>,\n  &T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0637]: `&` without an explicit lifetime name cannot be used here\n  --> src\\main.rs:42:5\n   |\n42 |   &T: Rem<T, Output = U> + ToString,\n   |   ^ explicit lifetime name needed here\n```\n\nwhere句で`&`を使う必要があるならライフタイムを明示的に示さないといけないのです。\n\n</div>\n\nシンプルに書くのなら、ライフタイム`'a`は高階トレイト境界を用いて以下のような書き方をすることができます。\n\n```rust\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\nこれで完成です。\n\n`num::BigUint`などもこの`T`を満たすので、これで`u128`でも扱えないような大きな数字も以下のように扱うことができるようになりました。\n\n<div class=\"preshiki\">src/fizzbuzz.rs</div>\n\n```rust\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(String),\n}\n\nimpl fmt::Display for FizzBuzz {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<&T> for FizzBuzz\nwhere\n  T: From<u8>,\n  for<'a> &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &T) -> FizzBuzz {\n    match ((x % T::from(3)).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(x.to_string()),\n    }\n  }\n}\n```\n\n<div class=\"preshiki\">src/main.rs</div>\n\n```rust\nmod fizzbuzz;\n\nuse fizzbuzz::FizzBuzz;\nuse num::{BigUint, Num};\n\nfn main() {\n  num_iter::range_inclusive(\n    BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n    BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n  )\n  .map(|x: BigUint| -> String {\n    let fizzbuzz: FizzBuzz = (&x).into();\n    fizzbuzz.to_string()\n  })\n  .for_each(|x| println!(\"{x}\"));\n}\n\n#[test]\nfn test_bigint() {\n  let test_target: Vec<String> = num_iter::range_inclusive(\n    BigUint::from_str_radix(\"340282366920938463463374607431768211471\", 10).unwrap(),\n    BigUint::from_str_radix(\"340282366920938463463374607431768211485\", 10).unwrap(),\n  )\n  .map(|x| {\n    let buffer: FizzBuzz = (&x).into();\n    let buffer: String = buffer.to_string();\n    buffer.to_string()\n  })\n  .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"340282366920938463463374607431768211471\",\n      \"340282366920938463463374607431768211472\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211474\",\n      \"Buzz\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211477\",\n      \"340282366920938463463374607431768211478\",\n      \"Fizz\",\n      \"Buzz\",\n      \"340282366920938463463374607431768211481\",\n      \"Fizz\",\n      \"340282366920938463463374607431768211483\",\n      \"340282366920938463463374607431768211484\",\n      \"FizzBuzz\",\n    ]\n  );\n}\n\n#[test]\nfn test() {\n  let test_target: Vec<String> = (1..=15)\n    .map(|x| {\n      let buffer: FizzBuzz = (&x).into();\n      let buffer: String = buffer.to_string();\n      buffer.to_string()\n    })\n    .collect();\n\n  assert_eq!(\n    test_target,\n    vec![\n      \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\",\n      \"14\", \"FizzBuzz\",\n    ]\n  );\n}\n```\n\n<div class=\"preshiki\">Cargo.toml</div>\n\n```toml\n[package]\nname = \"fizzbuzz\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nnum = \"0.4.0\"\nnum-iter = \"0.1.43\"\n```\n\n<div class=\"note warn\">\n\n<i class=\"fontawesome fa fa-exclamation-circle\" style=\"color:#f7a535;font-size:20px;\" aria-hidden=\"true\"></i> ここで「そうだ！FizzBuzzのenumにString型ではなく`Box<dyn 'a + ToString>`型で動的な型の値を持たせればゼロコスト抽象化の恩恵も得られながらよりコンパイル時に最適化されるのでは？」と思うかもしれませんが…\n\n```rust example-bad\nuse num::Zero;\nuse std::fmt;\nuse std::ops::Rem;\n\npub enum FizzBuzz<'a> {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(Box<dyn 'a + ToString>),\n}\n\nimpl<'a> fmt::Display for FizzBuzz<'a> {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<'a, T, U> From<&'a T> for FizzBuzz<'a>\nwhere\n  T: 'a + From<u8>,\n  &'a T: Rem<T, Output = U> + ToString,\n  U: Zero,\n{\n  fn from(x: &'a T) -> FizzBuzz<'a> {\n    let three = T::from(3);\n    match ((x % three).is_zero(), (x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(Box::new(x)),\n    }\n  }\n}\n```\n\nしかし、実際にはBoxによるメモリ操作や動的ディスパッチによるオーバーヘッドもありますし、最終的に`to_string()`で文字列を生成しているのには変わりありませんから、メリットはあまりありません。\n\nまた、これを以下のような利用をしようとすると…\n\n```rust example-bad\nfn main() {\n  (1..=15)\n    .map(|x| (&x).into())\n    .for_each(|x: FizzBuzz| println!(\"{}\", x));\n}\n```\n\n以下のようなエラーメッセージが出てしまいます。\n\n```text example-bad\nerror[E0515]: cannot return value referencing function parameter `x`\n --> src\\main.rs:7:18\n  |\n7 | .map(|x| (&x).into())\n  |          ----^^^^^^^\n  |          |\n  |          returns a value referencing data owned by the current function\n  |          `x` is borrowed here\n```\n\nクロージャ外から出た後までライフタイムを必要とするような処理はできないということです。  \nこれは、以下のようにクロージャ内で変数のライフタイムが尽きた後に参照しないように修正しなければなりません。\n\n```rust\nfn main() {\n  (1..=15)\n    .for_each(|x| println!(\"{}\", Into::<FizzBuzz>::into(&x)));\n}\n```\n\nもしくは所有権を要求してしまうという手もあります。所有権を得た後はライフタイムが伸びるのでこれは問題ありません。\n\n```rust\nuse num::Zero;\nuse std::fmt::{Display, Formatter, Result};\nuse std::ops::Rem;\n\npub enum FizzBuzz {\n  Fizz,\n  Buzz,\n  FizzBuzz,\n  Number(Box<dyn Display>),\n}\n\nimpl Display for FizzBuzz {\n  fn fmt(&self, f: &mut Formatter) -> Result {\n    match self {\n      FizzBuzz::Fizz => write!(f, \"Fizz\"),\n      FizzBuzz::Buzz => write!(f, \"Buzz\"),\n      FizzBuzz::FizzBuzz => write!(f, \"FizzBuzz\"),\n      FizzBuzz::Number(x) => write!(f, \"{x}\"),\n    }\n  }\n}\n\nimpl<T, U> From<T> for FizzBuzz\nwhere\n  for<'a> T: 'a + Display + From<u8>,\n  for<'a> &'a T: Rem<T, Output = U>,\n  U: Zero,\n{\n  fn from(x: T) -> FizzBuzz {\n    match ((&x % T::from(3)).is_zero(), (&x % T::from(5)).is_zero()) {\n      (true, true) => FizzBuzz::FizzBuzz,\n      (true, _) => FizzBuzz::Fizz,\n      (_, true) => FizzBuzz::Buzz,\n      _ => FizzBuzz::Number(Box::new(x)),\n    }\n  }\n}\n```\n\n以上のように書けますが、どちらにせよBoxによるメモリ操作や動的ディスパッチによる実行時オーバーヘッドがあることには変わりありません。※静的ディスパッチであればビルド後のサイズは多少膨らむものの実行時のオーバーヘッドは無い。\n\nこのように、過大なライフタイムを要求すると、後々取り回しに苦労してしまうので、パフォーマンスや汎用性を天秤にかけて判断するようにしましょう。\n\n</div>\n\nRustでFizzBuzzを実装してみましたという話でした。\n","tags":["Rust","FizzBuzz"],"category":"blog"},{"slug":"articles/typescript-bitcoin","date":"2022-12-24T01:04:03+0900","draft":false,"title":"Typescriptでビットコインアドレスを生成する","description":"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport Link from 'next/link';\n\nimport { TypescriptBitcoin } from '../../components/TypescriptBitcoin';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `\nTypescriptでビットコインアドレスを生成したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%AA%E3%82%A2%E3%83%A0%E3%80%81DApp%E9%96%8B%E7%99%BA%E3%81%BE%E3%81%A7-Bikramaditya-Singhal/dp/4274225372?_encoding=UTF8&qid=1671896601&sr=8-1&linkCode=ll1&tag=nishidemasami-22&linkId=b026b2c2bd3729a8fe4c35dda528a7bb&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n👇このボタンをクリックするとビットコインアドレスを生成します。\n`;\n\nconst secondArticle = `\nビットコインのアドレスは、32バイトの秘密鍵を以下のようにしてビットコインアドレスに変換します。\n\n\\`\\`\\`mermaid\nflowchart TD\n\nA[32バイトの秘密鍵] -->|secp256k1| B(公開鍵)\nA -->|base58変換とチェックサム付与| F[WIF形式秘密鍵]\nB --> C{ビットコインアドレス形式}\nC -->|BASE58変換とチェックサム付与| D[P2PKH形式ビットコインアドレス]\nC -->|BASE32変換とチェックサム付与| E[Bech32形式ビットコインアドレス]\n\\`\\`\\`\n\nこれはTypescriptでも簡単に計算できます。\n\nそれを実際に書いてみたのが ↓ この今回のコードです\n\\`\\`\\`tsx\nimport { randomBytes, createHash, BinaryLike } from 'crypto';\n\nimport { useState, FC, useMemo, useCallback } from 'react';\n\nimport { Button, TextField } from '@mui/material';\nimport { bech32 } from 'bech32';\nimport { encode } from 'bs58';\nimport RIPEMD160 from 'ripemd160';\nimport { publicKeyCreate, privateKeyVerify } from 'secp256k1';\n\n/** 16進数の文字列かどうかチェックする正規表現 */\nconst check32BytesHex = /^[0-9a-fA-F]{64}$/;\n\n/** 16進数の文字列をUint8Arrayに変換する */\nconst hexToUint8Array = (hex: string): Uint8Array => Buffer.from(hex, 'hex');\n\n/** Bufferを16進数の文字列に変換する */\nconst bufferToHex = (data: Buffer): string => data.toString('hex');\n\n/** sha256でハッシュする */\nconst sha256 = (data: BinaryLike): Buffer =>\n  createHash('sha256').update(data).digest();\n\n/** ripemd160でハッシュする */\nconst ripemd160 = (data: BinaryLike): Buffer =>\n  new RIPEMD160().update(data).digest();\n\n/** BASE58チェックサム生成 */\nconst calcBase58Checksum = (data: BinaryLike): Buffer =>\n  sha256(sha256(data)).subarray(0, 4);\n\n/** BASE58変換＋チェックサム */\nconst base58WithChecksum = (data: Uint8Array): string =>\n  encode([...data, ...calcBase58Checksum(data)]);\n\n/** ビットコインアドレス(BASE58(P2PKH)形式)生成 */\nconst genBitcoinAddressP2PKH = (publicKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x00, ...ripemd160(sha256(publicKey))]));\n\n/** BASE32変換＋チェックサム */\nconst bech32WithChecksum = (data: Uint8Array) =>\n  bech32.encode('bc', [0x00, ...bech32.toWords(data)]);\n\n/** ビットコインアドレス(BASE32(Bech32)形式)生成 */\nconst genBitcoinAddressBECH32 = (publicKey: Uint8Array): string =>\n  bech32WithChecksum(ripemd160(sha256(publicKey)));\n\n/** 秘密鍵(WIF形式)生成 */\nconst genWif = (privateKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x80, ...privateKey]));\n\nconst TypescriptBitcoin: FC = () => {\n  // 秘密鍵(32バイトの16進数)\n  const [hexPrivateKey, setHexPrivateKey] = useState(\n    bufferToHex(randomBytes(32))\n  );\n\n  /** 秘密鍵(32バイト) */\n  const privateKey: Uint8Array | string = useMemo(() => {\n    if (!check32BytesHex.test(hexPrivateKey))\n      return '秘密鍵が32バイトの16進数ではない';\n    return hexToUint8Array(hexPrivateKey);\n  }, [hexPrivateKey]);\n\n  /** 公開鍵 */\n  const publicKey: Uint8Array | string = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (!privateKeyVerify(privateKey)) return '秘密鍵が不適切';\n    return publicKeyCreate(privateKey, false);\n  }, [privateKey]);\n\n  /** ビットコインアドレス(BASE32(Bech32)形式) */\n  const bitcoinAddressBECH32 = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressBECH32(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** ビットコインアドレス(BASE58(P2PKH)形式) */\n  const bitcoinAddressP2PKH = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressP2PKH(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** 秘密鍵をランダムに生成 */\n  const genRamdamKey = useCallback(\n    () => setHexPrivateKey(bufferToHex(randomBytes(32))),\n    []\n  );\n\n  /** 秘密鍵(WIF形式) */\n  const wif = useMemo(\n    () => genWif(hexToUint8Array(hexPrivateKey)),\n    [hexPrivateKey]\n  );\n\n  return (\n    <>\n      <Button onClick={genRamdamKey} variant=\"outlined\">\n        秘密鍵をランダムに生成\n      </Button>\n      <TextField\n        error={!check32BytesHex.test(hexPrivateKey)}\n        fullWidth\n        label=\"秘密鍵(32バイトの16進数)\"\n        margin=\"dense\"\n        value={hexPrivateKey}\n        onChange={(e) => {\n          setHexPrivateKey(e.currentTarget.value);\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"秘密鍵(WIF形式)\"\n        margin=\"dense\"\n        value={wif}\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE58(P2PKH)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressP2PKH}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE32(Bech32)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressBECH32}\n      />\n    </>\n  );\n};\n\nexport { TypescriptBitcoin };\n\\`\\`\\`\n`;\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Typescriptでビットコインアドレスを生成する\"\n\t\t\t\tdescription=\"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"content-title\">\n\t\t\tTypescriptでビットコインアドレスを生成する\n\t\t</h1>\n\t\t<div className=\"content-date\">\n\t\t\tPosted {format(new Date('2022-12-10T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t{['TypeScript', 'React', 'Bitcoin'].map((tag) => (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\tkey={tag}\n\t\t\t\t>\n\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t#{tag}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t<TypescriptBitcoin />\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React","Bitcoin"],"category":"blog"},{"slug":"posts/nextjs-mermaid","date":"2022-12-18T23:04:03+0900","draft":false,"title":"Next.jsでSSG時にRemarkでMermaidをSVGとして出力する","description":"Next.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。","content":"\r\nNext.jsでSSG時にRemarkでMermaidをSVGにして出力してみたいと思うこと、ありますよね。  \r\n僕はあるのですがネット上にあまり情報が無かったので自分用にメモです。\r\n\r\n今回は`remark-mermaidjs`を使って実装しました。\r\n\r\nこのサイトではMarkdownを`unified`で扱っているので`remark-mermaidjs`を`use`します。  \r\n`remark-mermaidjs`はGoogle Chromeを使ってMermaidをSVGにしているらしく`executablePath`でGoogle Chromeのパスを指定しなければならないようです。  \r\nこのサイトはGitHub Actionsでビルドしているので、ubuntuのために`/opt/google/chrome/google-chrome`を指定しました。なお、ローカル環境でも自由に動かせるように`.env`にもGoogle Chromeへのパスを書くことにしました。\r\n\r\n```typescript\r\n// @ts-ignore\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkMermaid from 'remark-mermaidjs';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkMermaid, {\r\n        launchOptions: {\r\n          executablePath:\r\n            process.env.GoogleChromeExecutablePath ?? // .env\r\n            '/opt/google/chrome/google-chrome', // for GitHub Actions Ubuntu\r\n        },\r\n        svgo: false,\r\n      })\r\n      .use(remarkRehype, { allowDangerousHtml: true, footnoteLabel: '脚注' })\r\n      .use(rehypePrism)\r\n      .use(rehypeKatex)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString()\r\n    .replace(/@@baseUrl@@/g, process.env.baseUrl || '');\r\n```\r\n\r\n以下にサンプルを置いておきます。図がSVGになっていることがわかると思います。\r\n\r\n## Flowchart\r\n\r\n````markdown\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n````\r\n\r\n```mermaid\r\nflowchart LR\r\n\r\nA[Hard] -->|Text| B(Round)\r\nB --> C{Decision}\r\nC -->|One| D[Result 1]\r\nC -->|Two| E[Result 2]\r\n```\r\n\r\n## Sequence diagram\r\n\r\n````markdown\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n````\r\n\r\n```mermaid\r\nsequenceDiagram\r\nAlice->>John: Hello John, how are you?\r\nloop Healthcheck\r\n    John->>John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn-->>Alice: Great!\r\nJohn->>Bob: How about you?\r\nBob-->>John: Jolly good!\r\n```\r\n\r\n## Gantt chart\r\n\r\n````markdown\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n````\r\n\r\n```mermaid\r\ngantt\r\n    section Section\r\n    Completed :done,    des1, 2014-01-06,2014-01-08\r\n    Active        :active,  des2, 2014-01-07, 3d\r\n    Parallel 1   :         des3, after des1, 1d\r\n    Parallel 2   :         des4, after des1, 1d\r\n    Parallel 3   :         des5, after des3, 1d\r\n    Parallel 4   :         des6, after des4, 1d\r\n```\r\n\r\n## Class diagram\r\n\r\n````markdown\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n````\r\n\r\n```mermaid\r\nclassDiagram\r\nClass01 <|-- AveryLongClass : Cool\r\n<<Interface>> Class01\r\nClass09 --> C2 : Where am I?\r\nClass09 --* C3\r\nClass09 --|> Class07\r\nClass07 : equals()\r\nClass07 : Object[] elementData\r\nClass01 : size()\r\nClass01 : int chimp\r\nClass01 : int gorilla\r\nclass Class10 {\r\n  <<service>>\r\n  int id\r\n  size()\r\n}\r\n```\r\n\r\n## Git graph\r\n\r\n````markdown\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n````\r\n\r\n```mermaid\r\ngitGraph\r\n    commit\r\n    commit\r\n    branch develop\r\n    commit\r\n    commit\r\n    commit\r\n    checkout main\r\n    commit\r\n    commit\r\n```\r\n\r\n## State diagram\r\n\r\n````markdown\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n````\r\n\r\n```mermaid\r\nstateDiagram-v2\r\n[*] --> Still\r\nStill --> [*]\r\nStill --> Moving\r\nMoving --> Still\r\nMoving --> Crash\r\nCrash --> [*]\r\n```\r\n\r\n## Pie chart\r\n\r\n````markdown\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n````\r\n\r\n```mermaid\r\npie\r\n\"Dogs\" : 386\r\n\"Cats\" : 85.9\r\n\"Rats\" : 15\r\n```\r\n\r\n## Entity Relationship Diagram\r\n\r\n````markdown\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n````\r\n\r\n```mermaid\r\nerDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\r\n```\r\n\r\n## User Journey diagram\r\n\r\n````markdown\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n````\r\n\r\n```mermaid\r\njourney\r\n  title My working day\r\n  section Go to work\r\n    Make tea: 5: Me\r\n    Go upstairs: 3: Me\r\n    Do work: 1: Me, Cat\r\n  section Go home\r\n    Go downstairs: 5: Me\r\n    Sit down: 3: Me\r\n```\r\n\r\n## C4 diagram\r\n\r\n````markdown\r\n```mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n```\r\n````\r\n\r\n````mermaid\r\nC4Context\r\ntitle System Context diagram for Internet Banking System\r\n\r\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\r\nPerson(customerB, \"Banking Customer B\")\r\nPerson_Ext(customerC, \"Banking Customer C\")\r\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\r\n\r\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\r\n\r\nEnterprise_Boundary(b1, \"BankBoundary\") {\r\n\r\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\r\n\r\n  System_Boundary(b2, \"BankBoundary2\") {\r\n    System(SystemA, \"Banking System A\")\r\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n\r\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\r\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\r\n\r\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\r\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\r\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\r\n  }\r\n}\r\n\r\nBiRel(customerA, SystemAA, \"Uses\")\r\nBiRel(SystemAA, SystemE, \"Uses\")\r\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\r\nRel(SystemC, customerA, \"Sends e-mails to\")\r\n````\r\n\r\nMermaid記法なら簡単にグラフを書けて便利なので、どんどん使っていきたいと思います。\r\n","tags":["Mermaid","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions"],"category":"blog"},{"slug":"posts/svg-prayer-wheel","date":"2022-12-17T01:04:03+0900","draft":false,"title":"SVGだけで作ったSVGマニ車をCSSでクルクル回して自動で徳を積む","description":"徳、積みたいですよね。JavaScriptを使わずにSVGとCSSだけでマニ車をクルクル回して自動で徳を積みたいこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n\r\n徳、積みたいですよね。\r\n\r\nご存知マニ車。お寺とかにたまにある、周囲にマントラが書いてあって手で回すと1回転毎に1回お経を読んだのと同じ徳を積めるスピリチュアルグッズです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=マニ車\">参考</a>]</sup>  \r\nチベット仏教が国教であるブータンでは、水力マニ車や風力マニ車、ソーラーマニ車<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/gp/search?ie=UTF8&tag=nishidemasami-22&linkCode=ur2&linkId=d1ba0bb31ef3d317b4a5c8ad6af3095d&camp=247&creative=1211&index=aps&keywords=ソーラーマニ車\">参考</a>]</sup>などもあり、マニ車も進化しているということがわかります。[^1]\r\n\r\n[^1]: 日本風力エネルギー学会誌 Vol.44, No.4\r\n\r\nならば、SVGとCSSでマントラを回しても徳が積めるのでは…？  \r\nそう思ったので自分用にメモです。\r\n\r\n```html\r\n<style>\r\n  #Text1{animation: spin 11s linear infinite; transform-origin: center;}\r\n  #Text2{animation: spin 10s linear infinite; transform-origin: center;}\r\n  #Text3{animation: spin 9s linear infinite; transform-origin: center;}\r\n  #Text4{animation: spin 8s linear infinite; transform-origin: center;}\r\n  #Text5{animation: spin 7s linear infinite; transform-origin: center;}\r\n  #Text6{animation: spin 6s linear infinite; transform-origin: center;}\r\n  #Text7{animation: spin 5s linear infinite; transform-origin: center;}\r\n  #Text8{animation: spin 4s linear infinite; transform-origin: center;}\r\n  #Text9{animation: spin 3s linear infinite; transform-origin: center;}\r\n</style>\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text id=\"Text1\">\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text2\">\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text3\">\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text4\">\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text5\">\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text6\">\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text7\">\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text8\">\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n  <text id=\"Text9\">\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n  </text>\r\n</svg>\r\n```\r\n\r\nこのような感じで円のパスを複数個作って、それぞれを違う速さで回しています。\r\n\r\nなお、以下のようにSVGのanimateTransformで回転させることもできます。  \r\nしかし、CPUレンダリングになってしまうのでちょっとカクカクするので今回はこの方法は使いませんでした。\r\n\r\n\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n\r\n```xml\r\n<svg style=\"max-width:400px\" viewBox=\"0 0 400 400\" >\r\n  <defs>\r\n    <path id=\"Circle1\" d=\"M 25, 200 a 175,175 0 1,1 350,0 a 175,175 0 1,1 -350,0\" />\r\n    <path id=\"Circle2\" d=\"M 50, 200 a 150,150 0 1,1 300,0 a 150,150 0 1,1 -300,0\" />\r\n    <path id=\"Circle3\" d=\"M 75, 200 a 125,125 0 1,1 250,0 a 125,125 0 1,1 -250,0\" />\r\n    <path id=\"Circle4\" d=\"M 100, 200 a 100,100 0 1,1 200,0 a 100,100 0 1,1 -200,0\" />\r\n    <path id=\"Circle5\" d=\"M 125, 200 a 75,75 0 1,1 150,0 a 75,75 0 1,1 -150,0\" />\r\n    <path id=\"Circle6\" d=\"M 150, 200 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0\" />\r\n    <path id=\"Circle7\" d=\"M 175, 200 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0\" />\r\n  </defs>\r\n  <text>\r\n    <textPath href=\"#Circle1\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"11s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle2\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"10s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle3\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"9s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle4\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"8s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle5\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"7s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle6\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"6s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle7\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle8\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"4s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n  <text>\r\n    <textPath href=\"#Circle9\">ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ ॐ मणिपद्मे हूँ</textPath>\r\n    <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" from=\"0 200,200\" to=\"360 200,200\" dur=\"3s\" repeatCount=\"indefinite\" />\r\n  </text>\r\n</svg>\r\n```\r\n\r\nSVG単体でanimateTransformを利用してマニ車を回すより、CSSのanimationで回した方がスムーズな動作で回せました。\r\n\r\nこれでパソコンでもスマホでも、いつでもどこでも誰でも自動でスマートに徳を積めますね。  \r\n以上、SVGで徳を積んだという話でした。\r\n","tags":["SVG","CSS"],"category":"blog"},{"slug":"posts/google-colab-github","date":"2022-12-03T05:58:43+0900","draft":false,"title":"Google ColaboratoryでGitHubのipynbファイルを開く","description":"Google ColaboratoryでGitHubのipynbファイルを開いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nGoogle ColaboratoryでGitHubのファイルを開いてみたいと思うこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\nと言っても簡単で、GitHubでパブリックのリポジトリにファイルをコミットするだけです。\r\n\r\n<https://github.com/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこのようなパスにコミットしたとしたら、\r\n\r\n<https://colab.research.google.com/github/nishidemasami/google-colab-tutorial/blob/main/ubuntu-command/useful_tools.ipynb>\r\n\r\nこうやってGoogle Colaboratoryで開くことができます。\r\n\r\n簡単！\r\n","tags":["Google Colaboratory","GitHub"],"category":"blog"},{"slug":"posts/nextjs-latex","date":"2022-11-26T04:58:43+0900","draft":false,"title":"Next.jsで数式を書く","description":"Next.jsで数式を書いてみたいと思うこと、ありますよね。僕はあるので自分用にメモです。","content":"\r\nNext.jsで数式を書いてみたいと思うこと、ありますよね。  \r\n僕はあるので自分用にメモです。\r\n\r\n2次方程式の解の公式、懐かしいですね。\r\n\r\n$$$\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n$$$\r\n\r\nこれを見ると学生時代を思い出しますね。  \r\nこういう数式を、Next.jsでもMarkdownに$\\LaTeX$で\r\n\r\n```latex\r\nx = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\r\n```\r\n\r\nこんな感じで書けたら便利です。\r\n\r\n今回は$\\LaTeX$をMathJaxでSVGにするようにしてNext.jsで使ってみました。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/React-js%EF%BC%86Next-js%E8%B6%85%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83-ebook/dp/B08XBNGYVH?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1304MCUGBPN1M&keywords=next.js&qid=1670505884&sprefix=next.j%2Caps%2C195&sr=8-6&linkCode=ll1&tag=nishidemasami-22&linkId=1faf1c568d048e662fff7bffcc7794e3&language=ja_JP&ref_=as_li_ss_tl\">参考文献</a>]</sup>\r\n\r\nKaTeXなどでJavaScriptで動的にブラウザ上で数式を描画する方法はよく見ますが、Next.jsでSSGをしているならその時に数式をSVGにレンダリングした方がフォントを別途読み込んだりしなくてもいいので便利です。  \r\n$\\LaTeX$形式の数式をHTMLへ変換する処理をブラウザがする必要がなくなり描画が高速だという点がメリットです。JavaScriptを無効化していても見れるのもいいですね。\r\n\r\nまず、必要なパッケージをインストールします。\r\n\r\n```bash\r\nnpm install remark-math rehype-mathjax\r\n```\r\n\r\nこのウェブサイトではMarkdownを読み込むのに _unified_ を使用しているので、 _remark-math_ と _rehype-mathjax_ を追加で _use_ します。\r\n\r\n```typescript\r\nimport rehypePrism from '@mapbox/rehype-prism';\r\nimport rehypeMathJaxSvg from 'rehype-mathjax/svg';\r\nimport rehypeStringify from 'rehype-stringify';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport { unified } from 'unified';\r\n\r\nexport const markdownToHtml = async (markdown: string) =>\r\n  (\r\n    await unified()\r\n      .use(remarkParse)\r\n      .use(remarkMath)\r\n      .use(remarkGfm)\r\n      .use(remarkRehype, { allowDangerousHtml: true })\r\n      .use(rehypePrism)\r\n      .use(rehypeMathJaxSvg)\r\n      .use(rehypeStringify, { allowDangerousHtml: true })\r\n      .process(markdown)\r\n  )\r\n    .toString();\r\n```\r\n\r\nでは、実際に書いてみることにします。\r\n\r\n### 任意の$x$と$y$の最大公約数を求める$gcd$関数\r\n\r\n```latex\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y) & (\\text{otherwize})\r\n\\end{cases}\r\n```\r\n\r\n$$$\r\n\\gcd(x, y) =\r\n\\begin{cases}\r\n  y & (x = 0)\\\\\r\n  x & (y = 0)\\\\\r\n  \\gcd(y, x \\bmod y) & (\\text{otherwize})\r\n\\end{cases}\r\n$$$\r\n\r\n### クロネッカーのデルタ\r\n\r\n```latex\r\n\\delta_{ij} =\r\n\\begin{cases}\r\n  1 & \\text{if }i = j\\\\\r\n  0 & \\text{if }i \\ne j\r\n\\end{cases}\r\n```\r\n\r\n$$$\r\n\\delta_{ij} =\r\n\\begin{cases}\r\n  1 & (i = j)\\\\\r\n  0 & (i \\ne j)\r\n\\end{cases}\r\n$$$\r\n\r\n上手に書けました！✨\r\n\r\n以上です。  \r\n<https://github.com/nishidemasami/nishidemasami.github.io>  \r\n実際にNext.jsで動いているコードは👆ここから確認してください。\r\n","tags":["Next.js","LaTeX","MathJax","Markdown"],"category":"blog"}],"tags":["Rust","FizzBuzz"],"prevPost":{"slug":"articles/react-leaflet","date":"2023-01-21T01:04:03+0900","draft":false,"title":"Reactで国土地理院地図やOpenStreetMapなどを表示する","description":"ReactとTypeScriptで国土地理院地図やOpenStreetMapなどを表示したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { useMemo } from 'react';\n\nimport { CircularProgress } from '@mui/material';\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\n\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/dp/4873119049?&linkCode=ll1&tag=nishidemasami-22&linkId=269abe7d00fb75538542192fd6ea40b4&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\nGoogle Mapsが2018年の7月頃に有料になってからかなり経ちました。  \nいまさらGoogle Mapsの代わりを探している人はいないと思いますが、あれから色々とWebの事情も変わったので自分用にメモの意味も込めて書いています。\n\n「画像タイル地図」を公開しているWebサービスはたくさんあります。  \nですが無料で自由に使えるものは意外と少なく、国土地理院やOpenStreetMapは貴重な選択肢の一つだと思います。  \n(「画像タイル地図」ではなく「ベクトルタイル地図」も国土地理院は(実験的に)提供しているので次の記事で説明します。)\n\n### 国土地理院地図\n\n国土交通省国土地理院地図は利用規約を守る限り自由に使えます。  \n利用規約は以下です。  \n国土地理院コンテンツ利用規約 国土地理院:<https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html>\n\n### OpenStreetMap\n\nOpenStreetMapもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nOpenStreetMap著作権とライセンス:<https://www.openstreetmap.org/copyright/ja>  \nOpenStreetMapは現地の言語(日本はもちろん日本語)を表示しているみたいでした。  \nただ、ドイツ語版が日本では英語を併記しているようなので試しに表示してみます。\n\n### Stamen Maps\n\nStamen MapsもODbLライセンスに従って自由に使えます。ODbLライセンスの詳細は以下の通りです。  \nStamen Maps:<http://maps.stamen.com/>  \n\n### OpenTopoMap\n\nOpenTopoMapは、OSMやSRTMのデータから地形図を表示するようにした地図です。ライセンスはCC-BY-SAです。  \nOpenTopoMap:<opentopomap.org>  \n\n今回は、この4つのフリーの地図から5種類の地図を表示してみたいと思います。\n\n地図描画にはLeafletを使用します。\n\nライブラリとしては現在最新の\\`leaflet@1.9.3\\`と\\`react-leaflet@4.2.0\\`、それからTypeScript用の型定義として\\`@types/leaflet@1.9.0\\`を利用しています。  \n※react-leafletはバージョンがv4にメジャーバージョンアップされてからまだ1年も経っておらず、ネット上にもv3の情報ばかりですが最近v4の情報も少しずつ増えてきています。僕もこのことに困っていたので後の参考になるようにこの記事を書いています。\n\n必要なnpm installは以下の通りです。TypeScript用にleafletの型定義が公開されています。react-leafletは最初から型定義が含まれています。\n\n\\`\\`\\`bash\nnpm install leaflet react-leaflet\nnpm install -D @types/leaflet\n\\`\\`\\`\n\n以上で実装のための説明は終了ですが、ただ地図を表示するだけだとつまらないので今回は東海道五十三次の場所をピンで表示して、セレクトボックスで選択したらその場所に動くようにしてみます。  \nそのための\\`@mui/material\\`も入れています。\n\n実際に実装してみたのが ↓ これです。\n`;\n\nconst secondArticle = `\n\n書いたのが ↓ この今回のコードです。\n\\`\\`\\`tsx\nimport React from 'react';\n\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { LatLngExpression, Icon } from 'leaflet';\nimport PinIcon from 'leaflet/dist/images/marker-icon.png';\nimport { TileLayer, MapContainer, Marker, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst merkerIcon = new Icon({\n  iconUrl: PinIcon.src,\n  iconAnchor: [13, 41],\n});\n\nconst maps = [\n  {\n    name: 'OpenStreetMap',\n    url: 'https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png',\n    attribution:\n      'Daten von <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> - Veröffentlicht unter <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>',\n  },\n  {\n    name: '国土地理院地図',\n    url: 'https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png',\n    attribution:\n      '<a href=\"https://maps.gsi.go.jp/development/ichiran.html\" target=\"_blank\">地理院タイル</a>',\n  },\n  {\n    name: 'OpenStreetMap(日本語版)',\n    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  },\n  {\n    name: 'Stamen Maps(Terrain)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'Stamen Maps(Toner)',\n    url: '//stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',\n    attribution:\n      '© Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under <a href=\"https://opendatacommons.org/licenses/odbl/\">ODbL</a>.',\n  },\n  {\n    name: 'OpenTopoMap',\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    attribution:\n      '© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributions, <a href=\"http://viewfinderpanoramas.org/\">SRTM</a> | map style: © <a href=\"https://opentopomap.org/#map=15/35.68374/139.75330\">OpenTopoMap</a>',\n  },\n];\nconst places: {\n  name: string;\n  latlng: LatLngExpression;\n}[] = [\n  { name: '日本橋', latlng: [35.6836111111111, 139.774444444444] },\n  { name: '品川宿', latlng: [35.6219444444444, 139.739166666667] },\n  { name: '川崎宿', latlng: [35.5355555555556, 139.707777777778] },\n  { name: '神奈川宿', latlng: [35.4727777777778, 139.632277777778] },\n  { name: '保ヶ谷宿', latlng: [35.4440277777778, 139.595555555556] },\n  { name: '戸塚宿', latlng: [35.3950277777778, 139.529861111111] },\n  { name: '藤沢宿', latlng: [35.3456666666667, 139.486305555556] },\n  { name: '平塚宿', latlng: [35.3272777777778, 139.337805555556] },\n  { name: '大磯宿', latlng: [35.309, 139.315305555556] },\n  { name: '小田原宿', latlng: [35.2487222222222, 139.161027777778] },\n  { name: '箱根宿', latlng: [35.1904166666667, 139.026361111111] },\n  { name: '三島宿', latlng: [35.11925, 138.914472222222] },\n  { name: '沼津宿', latlng: [35.1001111111111, 138.857416666667] },\n  { name: '原宿', latlng: [35.1255277777778, 138.797333333333] },\n  { name: '吉原宿', latlng: [35.1627777777778, 138.685638888889] },\n  { name: '蒲原宿', latlng: [35.1199722222222, 138.605472222222] },\n  { name: '由比宿', latlng: [35.1076111111111, 138.567472222222] },\n  { name: '興津宿', latlng: [35.0498333333333, 138.519555555556] },\n  { name: '江尻宿', latlng: [35.0198888888889, 138.480861111111] },\n  { name: '府中宿', latlng: [34.9749166666667, 138.387638888889] },\n  { name: '鞠子宿', latlng: [34.9494166666667, 138.342444444444] },\n  { name: '岡部宿', latlng: [34.9188333333333, 138.282666666667] },\n  { name: '藤枝宿', latlng: [34.8698055555556, 138.252722222222] },\n  { name: '島田宿', latlng: [34.8328055555556, 138.175861111111] },\n  { name: '金谷宿', latlng: [34.8228611111111, 138.129277777778] },\n  { name: '日坂宿', latlng: [34.8041388888889, 138.075361111111] },\n  { name: '掛川宿', latlng: [34.7729166666667, 138.015888888889] },\n  { name: '袋井宿', latlng: [34.7474722222222, 137.923222222222] },\n  { name: '見附宿', latlng: [34.7268055555556, 137.857027777778] },\n  { name: '浜松宿', latlng: [34.7051111111111, 137.731916666667] },\n  { name: '舞阪宿', latlng: [34.6843888888889, 137.608944444444] },\n  { name: '新居宿', latlng: [34.6941388888889, 137.560777777778] },\n  { name: '白須賀宿', latlng: [34.6885555555556, 137.500833333333] },\n  { name: '二川宿', latlng: [34.7230555555556, 137.464527777778] },\n  { name: '吉田宿', latlng: [34.7666388888889, 137.389722222222] },\n  { name: '御油宿', latlng: [34.8448888888889, 137.317333333333] },\n  { name: '赤坂宿', latlng: [34.8557222222222, 137.308222222222] },\n  { name: '藤川宿', latlng: [34.9110555555556, 137.222194444444] },\n  { name: '岡崎宿', latlng: [34.9579166666667, 137.169194444444] },\n  { name: '池鯉鮒宿', latlng: [35.0081111111111, 137.040944444444] },\n  { name: '鳴海宿', latlng: [35.0796666666667, 136.949805555556] },\n  { name: '宮宿', latlng: [35.1204166666667, 136.906722222222] },\n  { name: '桑名宿', latlng: [35.0687222222222, 136.6955] },\n  { name: '四日市宿', latlng: [34.9695277777778, 136.625277777778] },\n  { name: '石薬師宿', latlng: [34.9043333333333, 136.548] },\n  { name: '庄野宿', latlng: [34.8833888888889, 136.524833333333] },\n  { name: '亀山宿', latlng: [34.8543055555556, 136.454111111111] },\n  { name: '関宿', latlng: [34.8524722222222, 136.392083333333] },\n  { name: '坂下宿', latlng: [34.8885555555556, 136.354083333333] },\n  { name: '土山宿', latlng: [34.9344166666667, 136.283833333333] },\n  { name: '水口宿', latlng: [34.9655555555556, 136.1835] },\n  { name: '石部宿', latlng: [35.0100555555556, 136.054638888889] },\n  { name: '草津宿', latlng: [35.0174444444444, 135.960638888889] },\n  { name: '大津宿', latlng: [35.0059722222222, 135.861416666667] },\n  { name: '三条大橋', latlng: [35.0103333333333, 135.774361111111] },\n];\n\nconst MapController: React.FC<{ center?: LatLngExpression }> = ({ center }) => {\n  const map = useMap();\n  React.useEffect(() => {\n    if (center) {\n      map.setView(center, 13, { animate: true });\n    }\n  }, [center, map]);\n  return null;\n};\n\nconst LeafletDemo = (): JSX.Element => {\n  const [center, setCenter] = React.useState<LatLngExpression>();\n  const [mapName, setMapName] = React.useState(maps[0].name);\n  const [placeName, setPlaceName] = React.useState('');\n  const selectedMap = React.useMemo(\n    () => maps.find((value) => value.name === mapName)!,\n    [mapName]\n  );\n\n  return (\n    <>\n      <FormControl margin=\"normal\">\n        <InputLabel>地図選択</InputLabel>\n        <Select\n          value={mapName}\n          label=\"地図選択\"\n          onChange={(event) => {\n            setMapName(event.target.value);\n          }}\n        >\n          {maps.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl margin=\"normal\">\n        <InputLabel>場所選択</InputLabel>\n        <Select\n          className=\"w-28\"\n          value={placeName}\n          label=\"場所選択\"\n          onChange={(event) => {\n            const selected = places.find(\n              (value) => value.name === event.target.value\n            );\n            if (selected) {\n              setPlaceName(selected.name);\n              setCenter(selected.latlng);\n            }\n          }}\n        >\n          {places.map(({ name }) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <MapContainer\n        center={[35.0585904, 137.5191176]}\n        zoom={7}\n        maxZoom={18}\n        scrollWheelZoom={true}\n        style={{ height: 400, width: '100%' }}\n      >\n        <MapController center={center} />\n        <TileLayer\n          attribution={selectedMap.attribution}\n          url={selectedMap.url}\n        />\n        {places.map((place) => (\n          <Marker key={place.name} position={place.latlng} icon={merkerIcon}>\n            <Popup>{place.name}</Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n    </>\n  );\n};\n\nexport default LeafletDemo;\n\\`\\`\\`\n\nなお、Next.jsでSSGでLeafletを含むページを静的に生成しようとすると\n\\`\\`\\`\nReferenceError: window is not defined\n\\`\\`\\`\nというエラーが出てしまうので、Dynamic Importで\n\\`\\`\\`tsx\nconst LeafletDemoComponent = React.useMemo(\n\t() =>\n\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\tssr: false,\n\t\t}),\n\t[]\n);\n\\`\\`\\`\nというコンポーネントを1つ挟んでブラウザへのレンダリング時に動的インポートさせて表示させるようにしました。\n`;\n\nconst ReactLeafletTest = (props: ReactSoundTestProps) => {\n\tconst LeafletDemoComponent = useMemo(\n\t\t() =>\n\t\t\tdynamic(() => import('../../components/Leaflet/LeafletDemo'), {\n\t\t\t\tloading: () => <CircularProgress className=\"w-full\" />,\n\t\t\t\tssr: false,\n\t\t\t}),\n\t\t[]\n\t);\n\treturn (\n\t\t<Main\n\t\t\trecents={props.recents}\n\t\t\ttags={props.tags}\n\t\t\tmeta={\n\t\t\t\t<Meta\n\t\t\t\t\ttitle=\"Reactで国土地理院地図やOpenStreetMapを表示する\"\n\t\t\t\t\tdescription=\"ReactとTypeScriptで国土地理院地図やOpenStreetMapを表示したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t\t/>\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"content-title\">\n\t\t\t\tReactで国土地理院地図やOpenStreetMapを表示する\n\t\t\t</h1>\n\t\t\t<div className=\"content-date\">\n\t\t\t\tPosted {format(new Date('2023-01-21T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t\t</div>\n\t\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t\t{[\n\t\t\t\t\t'TypeScript',\n\t\t\t\t\t'React',\n\t\t\t\t\t'OpenStreetMap',\n\t\t\t\t\t'国土地理院地図',\n\t\t\t\t\t'leaflet',\n\t\t\t\t\t'Next.js',\n\t\t\t\t].map((tag) => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\t\tkey={tag}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t\t#{tag}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<Content>\n\t\t\t\t<div>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t\t<LeafletDemoComponent />\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\n\t\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t\t</Main>\n\t);\n};\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactLeafletTest;\n","tags":["TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js"],"category":"blog"},"nextPost":{"slug":"articles/typescript-bitcoin","date":"2022-12-24T01:04:03+0900","draft":false,"title":"Typescriptでビットコインアドレスを生成する","description":"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。","content":"*/\n\nimport { format } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport Link from 'next/link';\n\nimport { TypescriptBitcoin } from '../../components/TypescriptBitcoin';\nimport { Content } from '../../content/Content';\nimport { Meta } from '../../layout/Meta';\nimport { PostPagination } from '../../pagination/PostPagination';\nimport { Main } from '../../templates/Main';\nimport {\n\tgetPrevNextPost,\n\tgetRecentPosts,\n\tgetTags,\n\tPostItems,\n} from '../../utils/Content';\nimport { markdownToHtml } from '../../utils/Markdown';\n\ntype ReactSoundTestProps = {\n\trecents: PostItems[];\n\ttags: string[];\n\tfirstArticle: string;\n\tsecondArticle: string;\n\tprevPost?: PostItems;\n\tnextPost?: PostItems;\n};\n\nconst firstArticle = `\nTypescriptでビットコインアドレスを生成したいこと、ありますよね。  \n僕はあるので自分用にメモです。<sup>[<a target=\"_blank\" href=\"https://www.amazon.co.jp/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%AA%E3%82%A2%E3%83%A0%E3%80%81DApp%E9%96%8B%E7%99%BA%E3%81%BE%E3%81%A7-Bikramaditya-Singhal/dp/4274225372?_encoding=UTF8&qid=1671896601&sr=8-1&linkCode=ll1&tag=nishidemasami-22&linkId=b026b2c2bd3729a8fe4c35dda528a7bb&language=ja_JP&ref_=as_li_ss_tl\" rel=\"noreferrer\" >参考文献</a>]</sup>\n\n👇このボタンをクリックするとビットコインアドレスを生成します。\n`;\n\nconst secondArticle = `\nビットコインのアドレスは、32バイトの秘密鍵を以下のようにしてビットコインアドレスに変換します。\n\n\\`\\`\\`mermaid\nflowchart TD\n\nA[32バイトの秘密鍵] -->|secp256k1| B(公開鍵)\nA -->|base58変換とチェックサム付与| F[WIF形式秘密鍵]\nB --> C{ビットコインアドレス形式}\nC -->|BASE58変換とチェックサム付与| D[P2PKH形式ビットコインアドレス]\nC -->|BASE32変換とチェックサム付与| E[Bech32形式ビットコインアドレス]\n\\`\\`\\`\n\nこれはTypescriptでも簡単に計算できます。\n\nそれを実際に書いてみたのが ↓ この今回のコードです\n\\`\\`\\`tsx\nimport { randomBytes, createHash, BinaryLike } from 'crypto';\n\nimport { useState, FC, useMemo, useCallback } from 'react';\n\nimport { Button, TextField } from '@mui/material';\nimport { bech32 } from 'bech32';\nimport { encode } from 'bs58';\nimport RIPEMD160 from 'ripemd160';\nimport { publicKeyCreate, privateKeyVerify } from 'secp256k1';\n\n/** 16進数の文字列かどうかチェックする正規表現 */\nconst check32BytesHex = /^[0-9a-fA-F]{64}$/;\n\n/** 16進数の文字列をUint8Arrayに変換する */\nconst hexToUint8Array = (hex: string): Uint8Array => Buffer.from(hex, 'hex');\n\n/** Bufferを16進数の文字列に変換する */\nconst bufferToHex = (data: Buffer): string => data.toString('hex');\n\n/** sha256でハッシュする */\nconst sha256 = (data: BinaryLike): Buffer =>\n  createHash('sha256').update(data).digest();\n\n/** ripemd160でハッシュする */\nconst ripemd160 = (data: BinaryLike): Buffer =>\n  new RIPEMD160().update(data).digest();\n\n/** BASE58チェックサム生成 */\nconst calcBase58Checksum = (data: BinaryLike): Buffer =>\n  sha256(sha256(data)).subarray(0, 4);\n\n/** BASE58変換＋チェックサム */\nconst base58WithChecksum = (data: Uint8Array): string =>\n  encode([...data, ...calcBase58Checksum(data)]);\n\n/** ビットコインアドレス(BASE58(P2PKH)形式)生成 */\nconst genBitcoinAddressP2PKH = (publicKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x00, ...ripemd160(sha256(publicKey))]));\n\n/** BASE32変換＋チェックサム */\nconst bech32WithChecksum = (data: Uint8Array) =>\n  bech32.encode('bc', [0x00, ...bech32.toWords(data)]);\n\n/** ビットコインアドレス(BASE32(Bech32)形式)生成 */\nconst genBitcoinAddressBECH32 = (publicKey: Uint8Array): string =>\n  bech32WithChecksum(ripemd160(sha256(publicKey)));\n\n/** 秘密鍵(WIF形式)生成 */\nconst genWif = (privateKey: Uint8Array): string =>\n  base58WithChecksum(Uint8Array.from([0x80, ...privateKey]));\n\nconst TypescriptBitcoin: FC = () => {\n  // 秘密鍵(32バイトの16進数)\n  const [hexPrivateKey, setHexPrivateKey] = useState(\n    bufferToHex(randomBytes(32))\n  );\n\n  /** 秘密鍵(32バイト) */\n  const privateKey: Uint8Array | string = useMemo(() => {\n    if (!check32BytesHex.test(hexPrivateKey))\n      return '秘密鍵が32バイトの16進数ではない';\n    return hexToUint8Array(hexPrivateKey);\n  }, [hexPrivateKey]);\n\n  /** 公開鍵 */\n  const publicKey: Uint8Array | string = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (!privateKeyVerify(privateKey)) return '秘密鍵が不適切';\n    return publicKeyCreate(privateKey, false);\n  }, [privateKey]);\n\n  /** ビットコインアドレス(BASE32(Bech32)形式) */\n  const bitcoinAddressBECH32 = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressBECH32(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** ビットコインアドレス(BASE58(P2PKH)形式) */\n  const bitcoinAddressP2PKH = useMemo(() => {\n    if (typeof privateKey === 'string') return privateKey;\n    if (typeof publicKey === 'string') return publicKey;\n    return genBitcoinAddressP2PKH(publicKey);\n  }, [privateKey, publicKey]);\n\n  /** 秘密鍵をランダムに生成 */\n  const genRamdamKey = useCallback(\n    () => setHexPrivateKey(bufferToHex(randomBytes(32))),\n    []\n  );\n\n  /** 秘密鍵(WIF形式) */\n  const wif = useMemo(\n    () => genWif(hexToUint8Array(hexPrivateKey)),\n    [hexPrivateKey]\n  );\n\n  return (\n    <>\n      <Button onClick={genRamdamKey} variant=\"outlined\">\n        秘密鍵をランダムに生成\n      </Button>\n      <TextField\n        error={!check32BytesHex.test(hexPrivateKey)}\n        fullWidth\n        label=\"秘密鍵(32バイトの16進数)\"\n        margin=\"dense\"\n        value={hexPrivateKey}\n        onChange={(e) => {\n          setHexPrivateKey(e.currentTarget.value);\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"秘密鍵(WIF形式)\"\n        margin=\"dense\"\n        value={wif}\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE58(P2PKH)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressP2PKH}\n      />\n      <TextField\n        fullWidth\n        label=\"ビットコインアドレス(BASE32(Bech32)形式)\"\n        margin=\"dense\"\n        InputProps={{\n          readOnly: true,\n        }}\n        value={bitcoinAddressBECH32}\n      />\n    </>\n  );\n};\n\nexport { TypescriptBitcoin };\n\\`\\`\\`\n`;\n\nconst ReactSoundTest = (props: ReactSoundTestProps) => (\n\t<Main\n\t\trecents={props.recents}\n\t\ttags={props.tags}\n\t\tmeta={\n\t\t\t<Meta\n\t\t\t\ttitle=\"Typescriptでビットコインアドレスを生成する\"\n\t\t\t\tdescription=\"Typescriptでビットコインアドレスを生成したいこと、ありますよね。僕はあるので自分用にメモです。\"\n\t\t\t/>\n\t\t}\n\t>\n\t\t<h1 className=\"content-title\">\n\t\t\tTypescriptでビットコインアドレスを生成する\n\t\t</h1>\n\t\t<div className=\"content-date\">\n\t\t\tPosted {format(new Date('2022-12-10T01:04:03+0900'), 'LLLL d, yyyy')}\n\t\t</div>\n\t\t<ul className=\"flex flex-row flex-wrap list-none p-0 m-2 justify-start\">\n\t\t\t{['TypeScript', 'React', 'Bitcoin'].map((tag) => (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"px-2 py-1 m-1 rounded-full overflow-hidden shadow-md border-0 bg-white w-fit break-all\"\n\t\t\t\t\tkey={tag}\n\t\t\t\t>\n\t\t\t\t\t<Link href=\"/tag/[tag]\" as={`/tag/${tag}`}>\n\t\t\t\t\t\t#{tag}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\n\t\t<Content>\n\t\t\t<div>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.firstArticle }} />\n\t\t\t\t<TypescriptBitcoin />\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: props.secondArticle }} />\n\t\t\t</div>\n\t\t</Content>\n\n\t\t<PostPagination nextPost={props.nextPost} prevPost={props.prevPost} />\n\t</Main>\n);\n\nexport const getStaticProps: GetStaticProps<ReactSoundTestProps> = async () => {\n\tconst recents = getRecentPosts(['title', 'date', 'slug']);\n\n\treturn {\n\t\tprops: {\n\t\t\trecents,\n\t\t\ttags: getTags(),\n\t\t\tfirstArticle: await markdownToHtml(firstArticle),\n\t\t\tsecondArticle: await markdownToHtml(secondArticle),\n\t\t\t...getPrevNextPost(__filename),\n\t\t},\n\t};\n};\n\nexport default ReactSoundTest;\n","tags":["TypeScript","React","Bitcoin"],"category":"blog"},"mainTags":["GitHub","CSS","SVG","SSH","AWS","GitHub","ED25519","Google Colaboratory","GitHub","Hexo","Java","Ruby","情報処理技術者試験","ネットワークスペシャリスト","Next.js","LaTeX","MathJax","Markdown","Mermaid","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions","PlantUML","Markdown","Next.js","SSG","SVG","Remark","GitHub Actions","Next.js","Onion Service","Tor","Docker","Tor Hidden Service","Nginx","Rust","FizzBuzz","SVG","CSS","Vim","OpenSSL","JavaScript","TypeScript","React","Gatsby.js","TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js","TypeScript","React","OpenStreetMap","国土地理院地図","Leaflet","Next.js","TypeScript","React","TypeScript","React","Bitcoin"]},"__N_SSG":true}